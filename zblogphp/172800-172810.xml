<files codepage='65001' xmlns:dt='urn:schemas-microsoft-com:datatypes'>
	<file name='zb_system\function\c_system_common.php' crc32='FC9F3881'  dt:dt='bin.base64'>PD9waHANCi8qKg0KICog6L6F5Yqp6YCa55So5Ye95pWwLg0KICovDQoNCmlmICghZGVmaW5lZCgnWkJQX1BBVEgnKSkgew0KICAgIGV4aXQoJ0FjY2VzcyBkZW5pZWQnKTsNCn0NCg0KLyoqDQogKiDlvpfliLDor7fmsYLljY/orq7vvIjogIPomZHliLDkuI3mraPnoa7nmoTphY3nva7lj43lkJHku6PnkIbnrYnljp/lm6DvvIzmnKrlv4Xlh4bnoa7vvIkNCiAqIOWmguaenOaDs+iOt+WPluWHhuehrueahOWAvO+8jOivt3picC0+TG9hZOWQjuS9v+eUqCR6YnAtPmlzSHR0cHMuDQogKg0KICogQHBhcmFtIGFycmF5ICRhcnJheQ0KICoNCiAqIEByZXR1cm4gc3RyaW5nDQogKi8NCmZ1bmN0aW9uIEdldFNjaGVtZSgkYXJyYXkpDQp7DQogICAgJGFycmF5ID0gYXJyYXlfY2hhbmdlX2tleV9jYXNlKCRhcnJheSwgQ0FTRV9VUFBFUik7DQoNCiAgICBpZiAoYXJyYXlfa2V5X2V4aXN0cygnUkVRVUVTVF9TQ0hFTUUnLCAkYXJyYXkpICYmIChzdHJ0b2xvd2VyKCRhcnJheVsnUkVRVUVTVF9TQ0hFTUUnXSkgPT0gJ2h0dHBzJykpIHsNCiAgICAgICAgcmV0dXJuICdodHRwczovLyc7DQogICAgfSBlbHNlaWYgKGFycmF5X2tleV9leGlzdHMoJ0hUVFBTJywgJGFycmF5KSAmJiAoc3RydG9sb3dlcigkYXJyYXlbJ0hUVFBTJ10pID09ICdvbicpKSB7DQogICAgICAgIHJldHVybiAnaHR0cHM6Ly8nOw0KICAgIH0gZWxzZWlmIChhcnJheV9rZXlfZXhpc3RzKCdTRVJWRVJfUE9SVCcsICRhcnJheSkgJiYgKCRhcnJheVsnU0VSVkVSX1BPUlQnXSA9PSA0NDMpKSB7DQogICAgICAgIHJldHVybiAnaHR0cHM6Ly8nOw0KICAgIH0gZWxzZWlmIChhcnJheV9rZXlfZXhpc3RzKCdIVFRQX1hfRk9SV0FSREVEX1BPUlQnLCAkYXJyYXkpICYmICgkYXJyYXlbJ0hUVFBfWF9GT1JXQVJERURfUE9SVCddID09IDQ0MykpIHsNCiAgICAgICAgcmV0dXJuICdodHRwczovLyc7DQogICAgfSBlbHNlaWYgKGFycmF5X2tleV9leGlzdHMoJ0hUVFBfWF9GT1JXQVJERURfUFJPVE8nLCAkYXJyYXkpICYmIChzdHJ0b2xvd2VyKCRhcnJheVsnSFRUUF9YX0ZPUldBUkRFRF9QUk9UTyddKSA9PSAnaHR0cHMnKSkgew0KICAgICAgICByZXR1cm4gJ2h0dHBzOi8vJzsNCiAgICB9IGVsc2VpZiAoYXJyYXlfa2V5X2V4aXN0cygnSFRUUF9YX0ZPUldBUkRFRF9QUk9UT0NPTCcsICRhcnJheSkgJiYgKHN0cnRvbG93ZXIoJGFycmF5WydIVFRQX1hfRk9SV0FSREVEX1BST1RPQ09MJ10pID09ICdodHRwcycpKSB7DQogICAgICAgIHJldHVybiAnaHR0cHM6Ly8nOw0KICAgIH0gZWxzZWlmIChhcnJheV9rZXlfZXhpc3RzKCdIVFRQX1hfRk9SV0FSREVEX1NTTCcsICRhcnJheSkgJiYgKHN0cnRvbG93ZXIoJGFycmF5WydIVFRQX1hfRk9SV0FSREVEX1NTTCddKSA9PSAnb24nKSkgew0KICAgICAgICByZXR1cm4gJ2h0dHBzOi8vJzsNCiAgICB9IGVsc2VpZiAoYXJyYXlfa2V5X2V4aXN0cygnSFRUUF9YX1VSTF9TQ0hFTUUnLCAkYXJyYXkpICYmIChzdHJ0b2xvd2VyKCRhcnJheVsnSFRUUF9YX1VSTF9TQ0hFTUUnXSkgPT0gJ2h0dHBzJykpIHsNCiAgICAgICAgcmV0dXJuICdodHRwczovLyc7DQogICAgfSBlbHNlaWYgKGFycmF5X2tleV9leGlzdHMoJ0hUVFBfQ0ZfVklTSVRPUicsICRhcnJheSkgJiYgKHN0cmlwb3MoJGFycmF5WydIVFRQX0NGX1ZJU0lUT1InXSwgJ2h0dHBzJykgIT09IGZhbHNlKSkgew0KICAgICAgICByZXR1cm4gJ2h0dHBzOi8vJzsNCiAgICB9IGVsc2VpZiAoYXJyYXlfa2V5X2V4aXN0cygnSFRUUF9GUk9NX0hUVFBTJywgJGFycmF5KSAmJiAoc3RydG9sb3dlcigkYXJyYXlbJ0hUVFBfRlJPTV9IVFRQUyddKSA9PSAnb24nKSkgew0KICAgICAgICByZXR1cm4gJ2h0dHBzOi8vJzsNCiAgICB9IGVsc2VpZiAoYXJyYXlfa2V5X2V4aXN0cygnSFRUUF9GUk9OVF9FTkRfSFRUUFMnLCAkYXJyYXkpICYmIChzdHJ0b2xvd2VyKCRhcnJheVsnSFRUUF9GUk9OVF9FTkRfSFRUUFMnXSkgPT0gJ29uJykpIHsNCiAgICAgICAgcmV0dXJuICdodHRwczovLyc7DQogICAgfSBlbHNlaWYgKGFycmF5X2tleV9leGlzdHMoJ1NFUlZFUl9QT1JUX1NFQ1VSRScsICRhcnJheSkgJiYgKCRhcnJheVsnU0VSVkVSX1BPUlRfU0VDVVJFJ10gPT0gMSkpIHsNCiAgICAgICAgcmV0dXJuICdodHRwczovLyc7DQogICAgfQ0KICAgIHJldHVybiAnaHR0cDovLyc7DQp9DQoNCi8qKg0KICog6I635Y+W5pyN5Yqh5ZmoLg0KICoNCiAqIEByZXR1cm4gaW50DQogKi8NCmZ1bmN0aW9uIEdldFdlYlNlcnZlcigpDQp7DQogICAgaWYgKCFpc3NldCgkX1NFUlZFUlsnU0VSVkVSX1NPRlRXQVJFJ10pKSB7DQogICAgICAgIHJldHVybiBTRVJWRVJfVU5LTk9XTjsNCiAgICB9DQogICAgJHdlYlNlcnZlciA9IHN0cnRvbG93ZXIoJF9TRVJWRVJbJ1NFUlZFUl9TT0ZUV0FSRSddKTsNCiAgICBpZiAoc3RycG9zKCR3ZWJTZXJ2ZXIsICdhcGFjaGUnKSAhPT0gZmFsc2UpIHsNCiAgICAgICAgcmV0dXJuIFNFUlZFUl9BUEFDSEU7DQogICAgfSBlbHNlaWYgKHN0cnBvcygkd2ViU2VydmVyLCAnbWljcm9zb2Z0LWlpcycpICE9PSBmYWxzZSkgew0KICAgICAgICByZXR1cm4gU0VSVkVSX0lJUzsNCiAgICB9IGVsc2VpZiAoc3RycG9zKCR3ZWJTZXJ2ZXIsICduZ2lueCcpICE9PSBmYWxzZSkgew0KICAgICAgICByZXR1cm4gU0VSVkVSX05HSU5YOw0KICAgIH0gZWxzZWlmIChzdHJwb3MoJHdlYlNlcnZlciwgJ2xpZ2h0dHBkJykgIT09IGZhbHNlKSB7DQogICAgICAgIHJldHVybiBTRVJWRVJfTElHSFRUUEQ7DQogICAgfSBlbHNlaWYgKHN0cnBvcygkd2ViU2VydmVyLCAna2FuZ2xlJykgIT09IGZhbHNlKSB7DQogICAgICAgIHJldHVybiBTRVJWRVJfS0FOR0xFOw0KICAgIH0gZWxzZWlmIChzdHJwb3MoJHdlYlNlcnZlciwgJ2NhZGR5JykgIT09IGZhbHNlKSB7DQogICAgICAgIHJldHVybiBTRVJWRVJfQ0FERFk7DQogICAgfSBlbHNlaWYgKHN0cnBvcygkd2ViU2VydmVyLCAnZGV2ZWxvcG1lbnQgc2VydmVyJykgIT09IGZhbHNlKSB7DQogICAgICAgIHJldHVybiBTRVJWRVJfQlVJTFRJTjsNCiAgICB9IGVsc2Ugew0KICAgICAgICByZXR1cm4gU0VSVkVSX1VOS05PV047DQogICAgfQ0KfQ0KDQovKioNCiAqIOiOt+WPluaTjeS9nOezu+e7nw0KICoNCiAqIEByZXR1cm4gaW50DQogKi8NCmZ1bmN0aW9uIEdldFN5c3RlbSgpDQp7DQogICAgaWYgKGluX2FycmF5KHN0cnRvdXBwZXIoUEhQX09TKSwgYXJyYXkoJ1dJTk5UJywgJ1dJTjMyJywgJ1dJTkRPV1MnKSkpIHsNCiAgICAgICAgcmV0dXJuIFNZU1RFTV9XSU5ET1dTOw0KICAgIH0gZWxzZWlmICgoc3RydG91cHBlcihQSFBfT1MpID09PSAnVU5JWCcpKSB7DQogICAgICAgIHJldHVybiBTWVNURU1fVU5JWDsNCiAgICB9IGVsc2VpZiAoc3RydG91cHBlcihQSFBfT1MpID09PSAnTElOVVgnKSB7DQogICAgICAgIHJldHVybiBTWVNURU1fTElOVVg7DQogICAgfSBlbHNlaWYgKHN0cnRvdXBwZXIoUEhQX09TKSA9PT0gJ0RBUldJTicpIHsNCiAgICAgICAgcmV0dXJuIFNZU1RFTV9EQVJXSU47DQogICAgfSBlbHNlaWYgKHN0cnRvdXBwZXIoc3Vic3RyKFBIUF9PUywgMCwgNikpID09PSAnQ1lHV0lOJykgew0KICAgICAgICByZXR1cm4gU1lTVEVNX0NZR1dJTjsNCiAgICB9IGVsc2VpZiAoaW5fYXJyYXkoc3RydG91cHBlcihQSFBfT1MpLCBhcnJheSgnTkVUQlNEJywgJ09QRU5CU0QnLCAnRlJFRUJTRCcpKSkgew0KICAgICAgICByZXR1cm4gU1lTVEVNX0JTRDsNCiAgICB9IGVsc2Ugew0KICAgICAgICByZXR1cm4gU1lTVEVNX1VOS05PV047DQogICAgfQ0KfQ0KDQovKioNCiAqIOiOt+WPllBIUOino+aekOW8leaTji4NCiAqDQogKiBAcmV0dXJuIGludA0KICovDQpmdW5jdGlvbiBHZXRQSFBFbmdpbmUoKQ0Kew0KICAgIHJldHVybiBFTkdJTkVfUEhQOw0KfQ0KDQovKioNCiAqIOiOt+WPllBIUCBWZXJzaW9uLg0KICoNCiAqIEByZXR1cm4gc3RyaW5nDQogKi8NCmZ1bmN0aW9uIEdldFBIUFZlcnNpb24oKQ0Kew0KICAgICRwID0gcGhwdmVyc2lvbigpOw0KICAgIGlmIChzdHJwb3MoJHAsICctJykgIT09IGZhbHNlKSB7DQogICAgICAgICRwID0gc3Vic3RyKCRwLCAwLCBzdHJwb3MoJHAsICctJykpOw0KICAgIH0NCg0KICAgIHJldHVybiAkcDsNCn0NCg0KLyoqDQogKiDoh6rliqjliqDovb3nsbvmlofku7YuDQogKg0KICogQHBhcmFtIHN0cmluZyAkY2xhc3NOYW1lIOexu+WQjQ0KICoNCiAqIEBhcGkgICAgRmlsdGVyX1BsdWdpbl9BdXRvbG9hZA0KICogKg0KICogQHJldHVybiBtaXhlZA0KICovDQpmdW5jdGlvbiBBdXRvbG9hZENsYXNzKCRjbGFzc05hbWUpDQp7DQogICAgZm9yZWFjaCAoJEdMT0JBTFNbJ2hvb2tzJ11bJ0ZpbHRlcl9QbHVnaW5fQXV0b2xvYWQnXSBhcyAkZnBuYW1lID0+ICYkZnBzaWduYWwpIHsNCiAgICAgICAgJGZwcmV0dXJuID0gJGZwbmFtZSgkY2xhc3NOYW1lKTsNCiAgICAgICAgaWYgKCRmcHNpZ25hbCA9PSBQTFVHSU5fRVhJVFNJR05BTF9SRVRVUk4pIHsNCiAgICAgICAgICAgICRmcHNpZ25hbCA9IFBMVUdJTl9FWElUU0lHTkFMX05PTkU7DQoNCiAgICAgICAgICAgIHJldHVybiAkZnByZXR1cm47DQogICAgICAgIH0NCiAgICB9DQogICAgJGNsYXNzTmFtZSA9IHN0cl9yZXBsYWNlKCdfXycsICcvJywgJGNsYXNzTmFtZSk7DQogICAgJGZpbGVOYW1lID0gWkJQX1BBVEggLiAnemJfc3lzdGVtL2Z1bmN0aW9uL2xpYi8nIC4gc3RydG9sb3dlcigkY2xhc3NOYW1lKSAuICcucGhwJzsNCiAgICBpZiAoaXNfcmVhZGFibGUoJGZpbGVOYW1lKSkgew0KICAgICAgICBpbmNsdWRlICRmaWxlTmFtZTsNCg0KICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICB9DQoNCiAgICByZXR1cm4gZmFsc2U7DQp9DQoNCi8qKg0KICog6K6w5b2V5pel5b+XLg0KICoNCiAqIEBwYXJhbSBzdHJpbmcgJGxvZ1N0cmluZw0KICogQHBhcmFtIHN0cmluZyAkbGV2ZWwgSU5GT3xFUlJPUnxXQVJOSU5HfEZBVEFMfERFQlVHfFRSQUNFDQogKiBAcGFyYW0gc3RyaW5nICRzb3VyY2Ugc3lzdGVtIG9yIHBsdWdpbiBJRA0KICoNCiAqIEByZXR1cm4gYm9vbA0KICovDQpmdW5jdGlvbiBMb2dzKCRsb2dTdHJpbmcsICRsZXZlbCA9ICdJTkZPJywgJHNvdXJjZSA9ICdzeXN0ZW0nKQ0Kew0KICAgIGdsb2JhbCAkemJwOw0KICAgICR0aW1lID0gZGF0ZSgnWS1tLWQnKSAuICcgJyAuIGRhdGUoJ0g6aTpzJykgLiAnICcgLiBzdWJzdHIobWljcm90aW1lKCksIDEsIDkpIC4gJyAnIC4gZGF0ZSgnUCcpOw0KICAgICRpc0Vycm9yID0gZmFsc2U7DQogICAgaWYgKCRsZXZlbCA9PT0gdHJ1ZSkgew0KICAgICAgICAkbGV2ZWwgPSAnRVJST1InOw0KICAgIH0gZWxzZWlmICgkbGV2ZWwgPT09IGZhbHNlKSB7DQogICAgICAgICRsZXZlbCA9ICdJTkZPJzsNCiAgICB9DQogICAgJGxldmVsID0gc3RydG91cHBlcigkbGV2ZWwpOw0KICAgIGlmICgkbGV2ZWwgPT0gJ1dBUk5JTkcnIHx8ICRsZXZlbCA9PSAnRVJST1InIHx8ICRsZXZlbCA9PSAnRkFUQUwnKSB7DQogICAgICAgICRpc0Vycm9yID0gdHJ1ZTsNCiAgICB9DQoNCiAgICBmb3JlYWNoICgkR0xPQkFMU1snaG9va3MnXVsnRmlsdGVyX1BsdWdpbl9Mb2dzJ10gYXMgJGZwbmFtZSA9PiAmJGZwc2lnbmFsKSB7DQogICAgICAgICRmcHJldHVybiA9ICRmcG5hbWUoJGxvZ1N0cmluZywgJGxldmVsLCAkc291cmNlLCAkdGltZSk7DQogICAgICAgIGlmICgkZnBzaWduYWwgPT0gUExVR0lOX0VYSVRTSUdOQUxfUkVUVVJOKSB7DQogICAgICAgICAgICAkZnBzaWduYWwgPSBQTFVHSU5fRVhJVFNJR05BTF9OT05FOw0KDQogICAgICAgICAgICByZXR1cm4gJGZwcmV0dXJuOw0KICAgICAgICB9DQogICAgfQ0KICAgIGlmICgkemJwLT5ndWlkKSB7DQogICAgICAgIGlmICgkaXNFcnJvcikgew0KICAgICAgICAgICAgJGYgPSAkemJwLT5sb2dzZGlyIC4gJycgLiAkemJwLT5ndWlkIC4gJy1lcnJvcicgLiBkYXRlKCJZbWQiKSAuICcudHh0JzsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICRmID0gJHpicC0+bG9nc2RpciAuICcnIC4gJHpicC0+Z3VpZCAuICctbG9nJyAuIGRhdGUoIlltZCIpIC4gJy50eHQnOw0KICAgICAgICB9DQogICAgfSBlbHNlIHsNCiAgICAgICAgaWYgKCRpc0Vycm9yKSB7DQogICAgICAgICAgICAkZiA9ICR6YnAtPmxvZ3NkaXIgLiAnJyAuIG1kNSgkemJwLT5wYXRoKSAuICctZXJyb3IudHh0JzsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICRmID0gJHpicC0+bG9nc2RpciAuICcnIC4gbWQ1KCR6YnAtPnBhdGgpIC4gJy50eHQnOw0KICAgICAgICB9DQogICAgfQ0KICAgIFpCbG9nRXhjZXB0aW9uOjpTdXNwZW5kRXJyb3JIb29rKCk7DQogICAgJGhhbmRsZSA9IEBmb3BlbigkZiwgJ2ErJyk7DQogICAgaWYgKCRoYW5kbGUpIHsNCiAgICAgICAgJHQgPSAkdGltZTsNCiAgICAgICAgQGZ3cml0ZSgkaGFuZGxlLCAnWycgLiAkdCAuICddJyAuICIgIiAuICRsZXZlbCAuICIgIiAuICRzb3VyY2UgLiAiXHJcbiIgLiAkbG9nU3RyaW5nIC4gIlxyXG4iKTsNCiAgICAgICAgQGZjbG9zZSgkaGFuZGxlKTsNCiAgICB9DQogICAgWkJsb2dFeGNlcHRpb246OlJlc3VtZUVycm9ySG9vaygpOw0KDQogICAgcmV0dXJuIHRydWU7DQp9DQoNCi8qKg0KICog6L6T5Ye66aG16Z2i6L+Q6KGM5pe26ZW/DQogKg0KICogQHBhcmFtIGJvb2wgJGlzT3V0cHV0IOaYr+WQpui+k+WHuu+8iOiAg+iZkeWOhuWPsuWOn+WboO+8jOm7mOiupOi+k+WHuu+8iQ0KICoNCiAqIEByZXR1cm4gYXJyYXkNCiAqLw0KZnVuY3Rpb24gUnVuVGltZSgkaXNPdXRwdXQgPSB0cnVlKQ0Kew0KICAgIGdsb2JhbCAkemJwOw0KDQogICAgJHJ0ID0gYXJyYXkoKTsNCiAgICAkX2VuZF90aW1lID0gbWljcm90aW1lKHRydWUpOw0KICAgICRydFsndGltZSddID0gbnVtYmVyX2Zvcm1hdCgoMTAwMCAqICgkX2VuZF90aW1lIC0gJF9TRVJWRVJbJ19zdGFydF90aW1lJ10pKSwgMik7DQogICAgJHJ0WydxdWVyeSddID0gJF9TRVJWRVJbJ19xdWVyeV9jb3VudCddOw0KICAgICRydFsnbWVtb3J5J10gPSAkX1NFUlZFUlsnX21lbW9yeV91c2FnZSddOw0KICAgICRydFsnZXJyb3InXSA9ICRfU0VSVkVSWydfZXJyb3JfY291bnQnXTsNCiAgICAkcnRbJ2Vycm9yX2RldGFpbCddID0gWkJsb2dFeGNlcHRpb246OiRlcnJvcnNfbXNnOw0KICAgIGlmIChmdW5jdGlvbl9leGlzdHMoJ21lbW9yeV9nZXRfdXNhZ2UnKSkgew0KICAgICAgICAkcnRbJ21lbW9yeSddID0gKGludCkgKChtZW1vcnlfZ2V0X3VzYWdlKCkgLSAkX1NFUlZFUlsnX21lbW9yeV91c2FnZSddKSAvIDEwMjQpOw0KICAgIH0NCg0KICAgICRfU0VSVkVSWydfcnVudGltZV9yZXN1bHQnXSA9ICRydDsNCg0KICAgIGlmIChhcnJheV9rZXlfZXhpc3RzKCdfZW5kX3RpbWUnLCAkX1NFUlZFUikpIHsNCiAgICAgICAgcmV0dXJuICRydDsNCiAgICB9IGVsc2Ugew0KICAgICAgICAkX1NFUlZFUlsnX2VuZF90aW1lJ10gPSAkX2VuZF90aW1lOw0KICAgIH0NCg0KICAgIGlmIChpc3NldCgkemJwLT5vcHRpb25bJ1pDX1JVTklORk9fRElTUExBWSddKSAmJiAkemJwLT5vcHRpb25bJ1pDX1JVTklORk9fRElTUExBWSddID09IGZhbHNlKSB7DQogICAgICAgIHJldHVybiAkcnQ7DQogICAgfQ0KDQogICAgaWYgKCRpc091dHB1dCkgew0KICAgICAgICBlY2hvICc8IS0tJyAuICRydFsndGltZSddIC4gJyBtcyAsICc7DQogICAgICAgIGVjaG8gJHJ0WydxdWVyeSddIC4gJyBxdWVyeSc7DQogICAgICAgIGVjaG8gJyAsICcgLiAkcnRbJ21lbW9yeSddIC4gJ2tiIG1lbW9yeSc7DQogICAgICAgIGVjaG8gJyAsICcgLiAkcnRbJ2Vycm9yJ10gLiAnIGVycm9yJzsNCiAgICAgICAgZWNobyAnLS0+JzsNCiAgICB9DQoNCiAgICByZXR1cm4gJHJ0Ow0KfQ0KDQovKioNCiAqIOiOt+W+l+ezu+e7n+S/oeaBry4NCiAqDQogKiBAcmV0dXJuIHN0cmluZyDns7vnu5/kv6Hmga8NCiAqDQogKiBAc2luY2UgMS40DQogKi8NCmZ1bmN0aW9uIEdldEVudmlyb25tZW50KCkNCnsNCiAgICBnbG9iYWwgJHpicDsNCiAgICAkYWpheCA9IE5ldHdvcms6OkNyZWF0ZSgpOw0KICAgIGlmICgkYWpheCkgew0KICAgICAgICAkYWpheCA9IHN1YnN0cihnZXRfY2xhc3MoJGFqYXgpLCA5KTsNCiAgICB9DQogICAgaWYgKCRhamF4ID09ICdjdXJsJykgew0KICAgICAgICBpZiAoaW5pX2dldCgic2FmZV9tb2RlIikpIHsNCiAgICAgICAgICAgICRhamF4IC49ICctcyc7DQogICAgICAgIH0NCiAgICAgICAgaWYgKGluaV9nZXQoIm9wZW5fYmFzZWRpciIpKSB7DQogICAgICAgICAgICAkYWpheCAuPSAnLW8nOw0KICAgICAgICB9DQogICAgICAgICRhcnJheSA9IGN1cmxfdmVyc2lvbigpOw0KICAgICAgICAkYWpheCAuPSAkYXJyYXlbJ3ZlcnNpb24nXTsNCiAgICB9DQogICAgaWYgKGZ1bmN0aW9uX2V4aXN0cygncGhwX3VuYW1lJykgPT0gdHJ1ZSkgew0KICAgICAgICAkdW5hbWUgPSBTcGxpdEFuZEdldChwaHBfdW5hbWUoJ3InKSwgJy0nLCAwKTsNCiAgICB9IGVsc2Ugew0KICAgICAgICAkdW5hbWUgPSAnJzsNCiAgICB9DQogICAgJHN5c3RlbV9lbnZpcm9ubWVudCA9IFBIUF9PUyAuICR1bmFtZSAuICc7ICcgLg0KICAgICAgICBHZXRWYWx1ZUluQXJyYXkoDQogICAgICAgICAgICBleHBsb2RlKA0KICAgICAgICAgICAgICAgICcgJywNCiAgICAgICAgICAgICAgICBzdHJfcmVwbGFjZShhcnJheSgnTWljcm9zb2Z0LScsICcvJyksIGFycmF5KCcnLCAnJyksIEdldFZhcnMoJ1NFUlZFUl9TT0ZUV0FSRScsICdTRVJWRVInKSkNCiAgICAgICAgICAgICksDQogICAgICAgICAgICAwDQogICAgICAgICkgLiAnOyBQSFAnIC4gR2V0UEhQVmVyc2lvbigpIC4gKElTX1g2NCA/ICd4NjQnIDogJycpIC4gJzsgJyAuDQogICAgICAgICR6YnAtPm9wdGlvblsnWkNfREFUQUJBU0VfVFlQRSddIC4gJHpicC0+ZGItPnZlcnNpb24gLiAnOyAnIC4gJGFqYXg7DQoNCiAgICBpZiAoZGVmaW5lZCgnT1BFTlNTTF9WRVJTSU9OX1RFWFQnKSkgew0KICAgICAgICAkYSA9IGV4cGxvZGUoJyAnLCBPUEVOU1NMX1ZFUlNJT05fVEVYVCk7DQogICAgICAgICRzeXN0ZW1fZW52aXJvbm1lbnQgLj0gJzsgJyAuIEdldFZhbHVlSW5BcnJheSgkYSwgMCkgLiBHZXRWYWx1ZUluQXJyYXkoJGEsIDEpOw0KICAgIH0NCg0KICAgIHJldHVybiAkc3lzdGVtX2Vudmlyb25tZW50Ow0KfQ0KDQovKioNCiAqIOmAmui/h+aWh+S7tuiOt+WPluW6lOeUqFVSTOWcsOWdgA0KICoNCiAqIEBwYXJhbSBzdHJpbmcgJGZpbGUg5paH5Lu25ZCNDQogKg0KICogQHJldHVybiBzdHJpbmcg6L+U5ZueVVJM5Zyw5Z2ADQogKi8NCmZ1bmN0aW9uIHBsdWdpbl9kaXJfdXJsKCRmaWxlKQ0Kew0KICAgIGdsb2JhbCAkemJwOw0KICAgICRzMSA9ICR6YnAtPnBhdGg7DQogICAgJHMyID0gc3RyX3JlcGxhY2UoJ1xcJywgJy8nLCBkaXJuYW1lKCRmaWxlKSAuICcvJyk7DQogICAgJHMgPSBzdWJzdHIoJHMyLCBzdHJzcG4oJHMxLCAkczIsIDApKTsNCiAgICBpZiAoc3RycG9zKCRzLCAnemJfdXNlcnMvcGx1Z2luLycpICE9PSBmYWxzZSkgew0KICAgICAgICAkcyA9IHN1YnN0cigkcywgc3Ryc3BuKCRzLCAkczMgPSAnemJfdXNlcnMvcGx1Z2luLycsIDApKTsNCiAgICB9IGVsc2Ugew0KICAgICAgICAkcyA9IHN1YnN0cigkcywgc3Ryc3BuKCRzLCAkczMgPSAnemJfdXNlcnMvdGhlbWUvJywgMCkpOw0KICAgIH0NCiAgICAkYSA9IGV4cGxvZGUoJy8nLCAkcyk7DQogICAgJHMgPSAkYVswXTsNCiAgICAkcyA9ICR6YnAtPmhvc3QgLiAkczMgLiAkcyAuICcvJzsNCg0KICAgIHJldHVybiAkczsNCn0NCg0KLyoqDQogKiDpgJrov4fmlofku7bojrflj5blupTnlKjnm67lvZXot6/lvoQuDQogKg0KICogQHBhcmFtICRmaWxlDQogKg0KICogQHJldHVybiBzdHJpbmcNCiAqLw0KZnVuY3Rpb24gcGx1Z2luX2Rpcl9wYXRoKCRmaWxlKQ0Kew0KICAgIGdsb2JhbCAkemJwOw0KICAgICRzMSA9ICR6YnAtPnBhdGg7DQogICAgJHMyID0gc3RyX3JlcGxhY2UoJ1xcJywgJy8nLCBkaXJuYW1lKCRmaWxlKSAuICcvJyk7DQogICAgJHMgPSBzdWJzdHIoJHMyLCBzdHJzcG4oJHMxLCAkczIsIDApKTsNCiAgICBpZiAoc3RycG9zKCRzLCAnemJfdXNlcnMvcGx1Z2luLycpICE9PSBmYWxzZSkgew0KICAgICAgICAkcyA9IHN1YnN0cigkcywgc3Ryc3BuKCRzLCAkczMgPSAnemJfdXNlcnMvcGx1Z2luLycsIDApKTsNCiAgICB9IGVsc2Ugew0KICAgICAgICAkcyA9IHN1YnN0cigkcywgc3Ryc3BuKCRzLCAkczMgPSAnemJfdXNlcnMvdGhlbWUvJywgMCkpOw0KICAgIH0NCiAgICAkYSA9IGV4cGxvZGUoJy8nLCAkcyk7DQogICAgJHMgPSAkYVswXTsNCiAgICAkcyA9ICR6YnAtPnBhdGggLiAkczMgLiAkcyAuICcvJzsNCg0KICAgIHJldHVybiAkczsNCn0NCg0KLyoqDQogKiDpgJrov4dLZXnku47mlbDnu4Tojrflj5bmlbDmja4uDQogKg0KICogQHBhcmFtIGFycmF5ICAkYXJyYXkg5pWw57uE5ZCNDQogKiBAcGFyYW0gc3RyaW5nICRuYW1lICDkuIvmoIdrZXkNCiAqDQogKiBAcmV0dXJuIG1peGVkDQogKi8NCmZ1bmN0aW9uIEdldFZhbHVlSW5BcnJheSgkYXJyYXksICRuYW1lLCAkZGVmYXVsdCA9IG51bGwpDQp7DQogICAgaWYgKGlzX2FycmF5KCRhcnJheSkpIHsNCiAgICAgICAgaWYgKGFycmF5X2tleV9leGlzdHMoJG5hbWUsICRhcnJheSkpIHsNCiAgICAgICAgICAgIHJldHVybiAkYXJyYXlbJG5hbWVdOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgcmV0dXJuICRkZWZhdWx0Ow0KICAgICAgICB9DQogICAgfQ0KfQ0KDQovKioNCiAqIOiOt+WPluaVsOe7hOS4reeahOW9k+WJjeWFg+e0oCjov5jmmK/mlbDnu4Qp55qE5pWw5o2uLg0KICoNCiAqIEBwYXJhbSBzdHJpbmcgJGFycmF5IOaVsOe7hOWQjQ0KICogQHBhcmFtIHN0cmluZyAkbmFtZSAg5LiL5qCHa2V5DQogKg0KICogQHJldHVybiBtaXhlZA0KICovDQpmdW5jdGlvbiBHZXRWYWx1ZUluQXJyYXlCeUN1cnJlbnQoJGFycmF5LCAkbmFtZSwgJGRlZmF1bHQgPSBudWxsKQ0Kew0KICAgIGlmIChpc19hcnJheSgkYXJyYXkpKSB7DQogICAgICAgICRhcnJheSA9IGN1cnJlbnQoJGFycmF5KTsNCg0KICAgICAgICByZXR1cm4gR2V0VmFsdWVJbkFycmF5KCRhcnJheSwgJG5hbWUsICRkZWZhdWx0KTsNCiAgICB9DQp9DQoNCi8qKg0KICog5YiG5Ymyc3RyaW5n5bm25Y+W5p+Q6aG55pWw5o2uLg0KICoNCiAqIEBwYXJhbSBzdHJpbmcgJHN0cmluZw0KICogQHBhcmFtIHN0cmluZyAkZGVsaW1pdGVyDQogKiBAcGFyYW0gaW50ICAgICRuDQogKg0KICogQHJldHVybiBzdHJpbmcNCiAqLw0KZnVuY3Rpb24gU3BsaXRBbmRHZXQoJHN0cmluZywgJGRlbGltaXRlciA9ICc7JywgJG4gPSAwKQ0Kew0KICAgICRhID0gZXhwbG9kZSgkZGVsaW1pdGVyLCAkc3RyaW5nKTsNCiAgICBpZiAoIWlzX2FycmF5KCRhKSkgew0KICAgICAgICAkYSA9IGFycmF5KCk7DQogICAgfQ0KICAgIGlmIChpc3NldCgkYVskbl0pKSB7DQogICAgICAgIHJldHVybiAoc3RyaW5nKSAkYVskbl07DQogICAgfQ0KDQogICAgcmV0dXJuICcnOw0KfQ0KDQovKioNCiAqIOWIoOmZpOi/nue7reepuuagvA0KICoNCiAqIEBwYXJhbSAkcw0KICoNCiAqIEByZXR1cm4gbnVsbHxzdHJpbmd8c3RyaW5nW10NCiAqLw0KZnVuY3Rpb24gUmVtb3ZlTW9yZVNwYWNlcygkcykNCnsNCiAgICByZXR1cm4gcHJlZ19yZXBsYWNlKCIvXHMoPz1ccykvIiwgIlxcMSIsICRzKTsNCn0NCg0KLyoqDQogKiDojrflj5ZHdWlkLg0KICoNCiAqIEByZXR1cm4gc3RyaW5nDQogKi8NCmZ1bmN0aW9uIEdldEd1aWQoKQ0Kew0KICAgICRjaGFyaWQgPSBzdHJ0b2xvd2VyKG1kNSh1bmlxaWQobXRfcmFuZCgpLCB0cnVlKSkpOw0KDQogICAgcmV0dXJuICRjaGFyaWQ7DQp9DQoNCi8qKg0KICog6I635Y+W5Y+C5pWw5YC8DQogKg0KICogQHBhcmFtIHN0cmluZyAkbmFtZSDmlbDnu4RrZXnlkI0NCiAqIEBwYXJhbSBzdHJpbmcgJHR5cGUg6buY6K6k5Li6UkVRVUVTVA0KICoNCiAqIEByZXR1cm4gbWl4ZWR8bnVsbA0KICovDQpmdW5jdGlvbiBHZXRWYXJzKCRuYW1lLCAkdHlwZSA9ICdSRVFVRVNUJywgJGRlZmF1bHQgPSBudWxsKQ0Kew0KICAgICRhcnJheSA9ICYkR0xPQkFMU1tzdHJ0b3VwcGVyKCJfJHR5cGUiKV07DQoNCiAgICBpZiAoaXNzZXQoJGFycmF5WyRuYW1lXSkpIHsNCiAgICAgICAgcmV0dXJuICRhcnJheVskbmFtZV07DQogICAgfSBlbHNlIHsNCiAgICAgICAgcmV0dXJuICRkZWZhdWx0Ow0KICAgIH0NCn0NCg0KLyoqDQogKiDojrflj5blj4LmlbDlgLzvvIjlj6/orr7nva7pu5jorqTov5Tlm57lgLzvvIku5pys5Ye95pWw5ZyoMS435bey57uP5bqf5byD5LqG77yM5pS555SoR2V0VmFyc++8gQ0KICoNCiAqIEBwYXJhbSBzdHJpbmcgJG5hbWUgICAg5pWw57uEa2V55ZCNDQogKiBAcGFyYW0gc3RyaW5nICR0eXBlICAgIOm7mOiupOS4ulJFUVVFU1QNCiAqIEBwYXJhbSBzdHJpbmcgJGRlZmF1bHQg6buY6K6k5Li6bnVsbA0KICoNCiAqIEByZXR1cm4gbWl4ZWR8bnVsbA0KICoNCiAqIEBzaW5jZSAxLjMuMTQwNjE0DQogKi8NCmZ1bmN0aW9uIEdldFZhcnNCeURlZmF1bHQoJG5hbWUsICR0eXBlID0gJ1JFUVVFU1QnLCAkZGVmYXVsdCA9IG51bGwpDQp7DQogICAgJGFycmF5ID0gJiRHTE9CQUxTW3N0cnRvdXBwZXIoIl8kdHlwZSIpXTsNCg0KICAgIGlmIChpc3NldCgkYXJyYXlbJG5hbWVdKSkgew0KICAgICAgICByZXR1cm4gJGFycmF5WyRuYW1lXTsNCiAgICB9IGVsc2Ugew0KICAgICAgICByZXR1cm4gJGRlZmF1bHQ7DQogICAgfQ0KfQ0KDQovKioNCiAqIOiOt+WPluaVsOaNruW6k+WQjS4NCiAqDQogKiBAcmV0dXJuIHN0cmluZyDov5Tlm57kuIDkuKrpmo/mnLrnmoRTUUxpdGXmlbDmja7mlofku7blkI0NCiAqLw0KZnVuY3Rpb24gR2V0RGJOYW1lKCkNCnsNCiAgICByZXR1cm4gc3RyX3JlcGxhY2UoJy0nLCAnJywgJyMlMjAnIC4gc3RydG9sb3dlcihHZXRHdWlkKCkpKSAuICcuZGInOw0KfQ0KDQovKioNCiAqIOiOt+WPluW9k+WJjee9keermeWcsOWdgA0KICoNCiAqIEBwYXJhbSBzdHJpbmcgJGJsb2dwYXRoICAgICDnvZHnq5nniannkIblrp7pmYXot6/lvoQNCiAqIEBwYXJhbSBzdHJpbmcgJiRjb29raWVzUGF0aCDov5Tlm55jb29raWXkvZznlKjln5/lgLzvvIzopoHkvKDlvJXlhaUNCiAqDQogKiBAcmV0dXJuIHN0cmluZyDov5Tlm57nvZHnq5nlrozmlbTlnLDlnYDvvIzlpoJodHRwOi8vbG9jYWxob3N0L3picC8NCiAqLw0KZnVuY3Rpb24gR2V0Q3VycmVudEhvc3QoJGJsb2dwYXRoLCAmJGNvb2tpZXNQYXRoKQ0Kew0KICAgICRob3N0ID0gSFRUUF9TQ0hFTUU7DQoNCiAgICBpZiAoaXNzZXQoJF9TRVJWRVJbJ0hUVFBfSE9TVCddKSkgew0KICAgICAgICAkaG9zdCAuPSAkX1NFUlZFUlsnSFRUUF9IT1NUJ107DQogICAgfSBlbHNlaWYgKGlzc2V0KCRfU0VSVkVSWyJTRVJWRVJfTkFNRSJdKSkgew0KICAgICAgICAkaG9zdCAuPSAkX1NFUlZFUlsiU0VSVkVSX05BTUUiXTsNCiAgICAgICAgaWYgKCEoJF9TRVJWRVJbIlNFUlZFUl9QT1JUIl0gPT0gJzQ0MycgfHwgJF9TRVJWRVJbIlNFUlZFUl9QT1JUIl0gPT0gJzgwJykpIHsNCiAgICAgICAgICAgICRob3N0IC49ICc6JyAuICRfU0VSVkVSWyJTRVJWRVJfUE9SVCJdOw0KICAgICAgICB9DQogICAgfSBlbHNlIHsNCiAgICAgICAgJGNvb2tpZXNQYXRoID0gJy8nOw0KICAgICAgICByZXR1cm4gJy8nOw0KICAgIH0NCiAgICANCiAgICBpZiAoaXNzZXQoJF9TRVJWRVJbJ1NDUklQVF9OQU1FJ10pICYmICRfU0VSVkVSWydTQ1JJUFRfTkFNRSddKSB7DQogICAgICAgICR4ID0gJF9TRVJWRVJbJ1NDUklQVF9OQU1FJ107DQogICAgICAgICR5ID0gJGJsb2dwYXRoOw0KICAgICAgICBmb3IgKCRpID0gMDsgJGkgPCBzdHJsZW4oJHgpOyAkaSsrKSB7DQogICAgICAgICAgICAkZiA9ICR5IC4gc3Vic3RyKCR4LCAoJGkgLSBzdHJsZW4oJHgpKSk7DQogICAgICAgICAgICAkeiA9IHN1YnN0cigkeCwgMCwgJGkpOw0KICAgICAgICAgICAgaWYgKGZpbGVfZXhpc3RzKCRmKSAmJiBpc19maWxlKCRmKSkgew0KICAgICAgICAgICAgICAgICR6ID0gdHJpbSgkeiwgJy8nKTsNCiAgICAgICAgICAgICAgICAkeiA9ICcvJyAuICR6IC4gJy8nOw0KICAgICAgICAgICAgICAgICR6ID0gc3RyX3JlcGxhY2UoJy8vJywgJy8nLCAkeik7DQogICAgICAgICAgICAgICAgJGNvb2tpZXNQYXRoID0gJHo7DQoNCiAgICAgICAgICAgICAgICByZXR1cm4gJGhvc3QgLiAkejsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIGlmIChpc3NldCgkX1NFUlZFUlsnU0NSSVBUX05BTUUnXSkpIHsNCiAgICAgICAgJHggPSAkX1NFUlZFUlsnU0NSSVBUX05BTUUnXTsNCiAgICAgICAgJHkgPSAkYmxvZ3BhdGg7DQogICAgICAgIGlmIChpc3NldCgkX1NFUlZFUlsiQ09OVEVYVF9ET0NVTUVOVF9ST09UIl0pICYmIGlzc2V0KCRfU0VSVkVSWyJDT05URVhUX1BSRUZJWCJdKSkgew0KICAgICAgICAgICAgaWYgKCRfU0VSVkVSWyJDT05URVhUX0RPQ1VNRU5UX1JPT1QiXSAmJiAkX1NFUlZFUlsiQ09OVEVYVF9QUkVGSVgiXSkgew0KICAgICAgICAgICAgICAgICR5ID0gJF9TRVJWRVJbIkNPTlRFWFRfRE9DVU1FTlRfUk9PVCJdIC4gJF9TRVJWRVJbIkNPTlRFWFRfUFJFRklYIl0gLiAnLyc7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICAkeiA9ICcnOw0KICAgICAgICBmb3IgKCRpID0gc3RybGVuKCR4KTsgJGkgPiAwOyAkaS0tKSB7DQogICAgICAgICAgICAkeiA9IHN1YnN0cigkeCwgMCwgJGkpOw0KICAgICAgICAgICAgaWYgKHN0cnRvbG93ZXIoc3Vic3RyKCR5LCAoc3RybGVuKCR5KSAtICRpKSkpID09IHN0cnRvbG93ZXIoJHopKSB7DQogICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgJGNvb2tpZXNQYXRoID0gJHo7DQogICAgICAgIHJldHVybiAkaG9zdCAuICR6Ow0KICAgIH0NCg0KICAgICRjb29raWVzUGF0aCA9ICcvJzsNCiAgICByZXR1cm4gJGhvc3QgLiAkY29va2llc1BhdGg7DQp9DQoNCi8qKg0KICog6YCa6L+HVVJM6I635Y+W6L+c56iL6aG16Z2i5YaF5a65Lg0KICoNCiAqIEBwYXJhbSBzdHJpbmcgJHVybCBVUkzlnLDlnYANCiAqDQogKiBAcmV0dXJuIHN0cmluZyDov5Tlm57pobXpnaLmlofmnKzlhoXlrrnvvIzpu5jorqTkuLpudWxsDQogKi8NCmZ1bmN0aW9uIEdldEh0dHBDb250ZW50KCR1cmwpDQp7DQogICAgJGFqYXggPSBOZXR3b3JrOjpDcmVhdGUoKTsNCiAgICBpZiAoISRhamF4KSB7DQogICAgICAgIHJldHVybjsNCiAgICB9DQoNCiAgICAkYWpheC0+b3BlbignR0VUJywgJHVybCk7DQogICAgJGFqYXgtPmVuYWJsZUd6aXAoKTsNCiAgICAkYWpheC0+c2V0VGltZU91dHMoNjAsIDYwLCAwLCAwKTsNCiAgICAkYWpheC0+c2VuZCgpOw0KDQogICAgcmV0dXJuICgkYWpheC0+c3RhdHVzID09IDIwMCkgPyAkYWpheC0+cmVzcG9uc2VUZXh0IDogbnVsbDsNCn0NCg0KLyoqDQogKiDojrflj5bnm67lvZXkuIvmlofku7blpLnliJfooago6YCS5b2SKS4NCiAqDQogKiBAcGFyYW0gc3RyaW5nICRkaXIg55uu5b2VDQogKg0KICogQHJldHVybiBhcnJheSDmlofku7blpLnliJfooago6YCS5b2S5Ye95pWw6L+U5Zue55qE5piv6Lev5b6E55qE5YWo56ew77yM5ZKM6Z2e6YCS5b2S6L+U5Zue55qE5pyJ5Yy65YirKQ0KICovDQpmdW5jdGlvbiBHZXREaXJzSW5EaXJfUmVjdXJzaXZlKCRkaXIpDQp7DQogICAgJGRpcnMgPSBhcnJheSgpOw0KDQogICAgaWYgKCFmaWxlX2V4aXN0cygkZGlyKSkgew0KICAgICAgICByZXR1cm4gYXJyYXkoKTsNCiAgICB9DQogICAgaWYgKCFpc19kaXIoJGRpcikpIHsNCiAgICAgICAgcmV0dXJuIGFycmF5KCk7DQogICAgfQ0KICAgICRkaXIgPSBzdHJfcmVwbGFjZSgnXFwnLCAnLycsICRkaXIpOw0KICAgIGlmIChzdWJzdHIoJGRpciwgLTEpICE9PSAnLycpIHsNCiAgICAgICAgJGRpciAuPSAnLyc7DQogICAgfQ0KDQogICAgaWYgKGZ1bmN0aW9uX2V4aXN0cygnc2NhbmRpcicpKSB7DQogICAgICAgIGZvcmVhY2ggKHNjYW5kaXIoJGRpciwgMCkgYXMgJGQpIHsNCiAgICAgICAgICAgIGlmIChpc19kaXIoJGRpciAuICRkKSkgew0KICAgICAgICAgICAgICAgIGlmICgoJGQgIT0gJy4nKSAmJiAoJGQgIT0gJy4uJykpIHsNCiAgICAgICAgICAgICAgICAgICAgJGFycmF5ID0gR2V0RGlyc0luRGlyKCRkaXIgLiAkZCk7DQogICAgICAgICAgICAgICAgICAgIGlmIChjb3VudCgkYXJyYXkpID4gMCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgZm9yZWFjaCAoJGFycmF5IGFzICRrZXkgPT4gJHZhbHVlKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJGRpcnNbXSA9ICRkaXIgLiAkZCAuICcvJyAuICR2YWx1ZTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAkZGlyc1tdID0gJGRpciAuICRkOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgIH0gZWxzZSB7DQogICAgICAgICRoYW5kbGUgPSBvcGVuZGlyKCRkaXIpOw0KICAgICAgICBpZiAoJGhhbmRsZSkgew0KICAgICAgICAgICAgd2hpbGUgKGZhbHNlICE9PSAoJGZpbGUgPSByZWFkZGlyKCRoYW5kbGUpKSkgew0KICAgICAgICAgICAgICAgIGlmICgkZmlsZSAhPSAiLiIgJiYgJGZpbGUgIT0gIi4uIikgew0KICAgICAgICAgICAgICAgICAgICBpZiAoaXNfZGlyKCRkaXIgLiAkZmlsZSkpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICRhcnJheSA9IEdldERpcnNJbkRpcigkZGlyIC4gJGZpbGUpOw0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvdW50KCRhcnJheSkgPiAwKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yZWFjaCAoJGFycmF5IGFzICRrZXkgPT4gJHZhbHVlKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRkaXJzW10gPSAkZGlyIC4gJGZpbGUgLiAnLycgLiAkdmFsdWU7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgJGRpcnNbXSA9ICRkaXIgLiAkZmlsZTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGNsb3NlZGlyKCRoYW5kbGUpOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgcmV0dXJuICRkaXJzOw0KfQ0KDQovKioNCiAqIOiOt+WPluebruW9leS4i+aMh+Wumuexu+Wei+aWh+S7tuWIl+ihqCjpgJLlvZIpLi4NCiAqDQogKiBAcGFyYW0gc3RyaW5nICRkaXIgIOebruW9lQ0KICogQHBhcmFtIHN0cmluZyAkdHlwZSDmlofku7bnsbvlnovvvIzku6XvvZzliIbpmpQNCiAqDQogKiBAcmV0dXJuIGFycmF5IOaWh+S7tuWIl+ihqA0KICovDQpmdW5jdGlvbiBHZXRGaWxlc0luRGlyX1JlY3Vyc2l2ZSgkZGlyLCAkdHlwZSkNCnsNCiAgICAkZGlycyA9IEdldERpcnNJbkRpcl9SZWN1cnNpdmUoJGRpcik7DQogICAgJGZpbGVzID0gYXJyYXkoKTsNCiAgICBmb3JlYWNoICgkZGlycyBhcyAka2V5ID0+ICRkKSB7DQogICAgICAgICRmID0gR2V0RmlsZXNJbkRpcigkZCwgJHR5cGUpOw0KICAgICAgICBmb3JlYWNoICgkZiBhcyAka2V5ID0+ICR2YWx1ZSkgew0KICAgICAgICAgICAgJGZpbGVzW10gPSAkdmFsdWU7DQogICAgICAgIH0NCiAgICB9DQogICAgcmV0dXJuICRmaWxlczsNCn0NCg0KLyoqDQogKiDojrflj5blvZPliY3nm67lvZXkuIvmlofku7blpLnliJfooaguDQogKg0KICogQHBhcmFtIHN0cmluZyAkZGlyIOebruW9lQ0KICoNCiAqIEByZXR1cm4gYXJyYXkg5paH5Lu25aS55YiX6KGoDQogKi8NCmZ1bmN0aW9uIEdldERpcnNJbkRpcigkZGlyKQ0Kew0KICAgICRkaXJzID0gYXJyYXkoKTsNCg0KICAgIGlmICghZmlsZV9leGlzdHMoJGRpcikpIHsNCiAgICAgICAgcmV0dXJuIGFycmF5KCk7DQogICAgfQ0KICAgIGlmICghaXNfZGlyKCRkaXIpKSB7DQogICAgICAgIHJldHVybiBhcnJheSgpOw0KICAgIH0NCiAgICAkZGlyID0gc3RyX3JlcGxhY2UoJ1xcJywgJy8nLCAkZGlyKTsNCiAgICBpZiAoc3Vic3RyKCRkaXIsIC0xKSAhPT0gJy8nKSB7DQogICAgICAgICRkaXIgLj0gJy8nOw0KICAgIH0NCg0KICAgIC8vIOatpOWkhOeahHNjYW5kaXLomb3nhLbmmK9QSFAgNeWwseW3suWKoOWFpeeahOWGheWuue+8jOS9huW/hemhu+WKoOS4iuWFvOWuueWkhOeQhg0KICAgIC8vIOmDqOWIhuS4gOmUruWuieijheWMheeahOaXqeacn+eJiOacrOWvueWFtui/m+ihjOS6huemgeeUqA0KICAgIC8vIOi/meS4gOemgeeUqOWvueWuieWFqOayoeacieS7u+S9leW4ruWKqe+8jOaOqOa1i+aYr+aXqeacn+S6kuiBlOe9kea1geS8oOS4i+adpeeahOKAnOWuieWFqOenmOesiOKAneOAgg0KICAgIC8vIEBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9saWNlc3MvbG5tcC9jb21taXQvYmQzNGQ1YzgwMzMwOGFmZGFjNjE2MjYwMThlNDE2ODcxNmQwODlhZSNkaWZmLTYyODJlNzY2N2RhMWUyZmM2ODNiZWQwNmY4N2Y3NGMxDQogICAgaWYgKGZ1bmN0aW9uX2V4aXN0cygnc2NhbmRpcicpKSB7DQogICAgICAgIGZvcmVhY2ggKHNjYW5kaXIoJGRpciwgMCkgYXMgJGQpIHsNCiAgICAgICAgICAgIGlmIChpc19kaXIoJGRpciAuICRkKSkgew0KICAgICAgICAgICAgICAgIGlmICgoJGQgIT0gJy4nKSAmJiAoJGQgIT0gJy4uJykpIHsNCiAgICAgICAgICAgICAgICAgICAgJGRpcnNbXSA9ICRkOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgIH0gZWxzZSB7DQogICAgICAgICRoYW5kbGUgPSBvcGVuZGlyKCRkaXIpOw0KICAgICAgICBpZiAoJGhhbmRsZSkgew0KICAgICAgICAgICAgd2hpbGUgKGZhbHNlICE9PSAoJGZpbGUgPSByZWFkZGlyKCRoYW5kbGUpKSkgew0KICAgICAgICAgICAgICAgIGlmICgkZmlsZSAhPSAiLiIgJiYgJGZpbGUgIT0gIi4uIikgew0KICAgICAgICAgICAgICAgICAgICBpZiAoaXNfZGlyKCRkaXIgLiAkZmlsZSkpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICRkaXJzW10gPSAkZmlsZTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGNsb3NlZGlyKCRoYW5kbGUpOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgcmV0dXJuICRkaXJzOw0KfQ0KDQovKioNCiAqIOiOt+WPluW9k+WJjeebruW9leS4i+aMh+Wumuexu+Wei+aWh+S7tuWIl+ihqC4NCiAqDQogKiBAcGFyYW0gc3RyaW5nICRkaXIgIOebruW9lQ0KICogQHBhcmFtIHN0cmluZyAkdHlwZSDmlofku7bnsbvlnovvvIzku6XvvZzliIbpmpQNCiAqDQogKiBAcmV0dXJuIGFycmF5IOaWh+S7tuWIl+ihqA0KICovDQpmdW5jdGlvbiBHZXRGaWxlc0luRGlyKCRkaXIsICR0eXBlKQ0Kew0KICAgICRmaWxlcyA9IGFycmF5KCk7DQogICAgJGRpciA9IHN0cl9yZXBsYWNlKCdcXCcsICcvJywgJGRpcik7DQogICAgaWYgKHN1YnN0cigkZGlyLCAtMSkgIT09ICcvJykgew0KICAgICAgICAkZGlyIC49ICcvJzsNCiAgICB9DQogICAgaWYgKCFpc19kaXIoJGRpcikpIHsNCiAgICAgICAgcmV0dXJuIGFycmF5KCk7DQogICAgfQ0KDQogICAgaWYgKGZ1bmN0aW9uX2V4aXN0cygnc2NhbmRpcicpKSB7DQogICAgICAgIGZvcmVhY2ggKHNjYW5kaXIoJGRpcikgYXMgJGYpIHsNCiAgICAgICAgICAgIGlmICgkZiAhPSAiLiIgJiYgJGYgIT0gIi4uIiAmJiBpc19maWxlKCRkaXIgLiAkZikpIHsNCiAgICAgICAgICAgICAgICBmb3JlYWNoIChleHBsb2RlKCJ8IiwgJHR5cGUpIGFzICR0KSB7DQogICAgICAgICAgICAgICAgICAgICR0ID0gJy4nIC4gJHQ7DQogICAgICAgICAgICAgICAgICAgICRpID0gc3RybGVuKCR0KTsNCiAgICAgICAgICAgICAgICAgICAgaWYgKHN1YnN0cigkZiwgLSRpLCAkaSkgPT0gJHQpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICRzb3J0bmFtZSA9IHN1YnN0cigkZiwgMCwgKHN0cmxlbigkZikgLSAkaSkpOw0KICAgICAgICAgICAgICAgICAgICAgICAgJGZpbGVzWyRzb3J0bmFtZV0gPSAkZGlyIC4gJGY7DQogICAgICAgICAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgIH0gZWxzZSB7DQogICAgICAgICRoYW5kbGUgPSBvcGVuZGlyKCRkaXIpOw0KICAgICAgICBpZiAoJGhhbmRsZSkgew0KICAgICAgICAgICAgd2hpbGUgKGZhbHNlICE9PSAoJGZpbGUgPSByZWFkZGlyKCRoYW5kbGUpKSkgew0KICAgICAgICAgICAgICAgIGlmICgkZmlsZSAhPSAiLiIgJiYgJGZpbGUgIT0gIi4uIikgew0KICAgICAgICAgICAgICAgICAgICBpZiAoaXNfZmlsZSgkZGlyIC4gJGZpbGUpKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBmb3JlYWNoIChleHBsb2RlKCJ8IiwgJHR5cGUpIGFzICR0KSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHQgPSAnLicgLiAkdDsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkaSA9IHN0cmxlbigkdCk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN1YnN0cigkZmlsZSwgLSRpLCAkaSkgPT0gJHQpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNvcnRuYW1lID0gc3Vic3RyKCRmaWxlLCAwLCAoc3RybGVuKCRmaWxlKSAtICRpKSk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRmaWxlc1skc29ydG5hbWVdID0gJGRpciAuICRmaWxlOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgICAgICBjbG9zZWRpcigkaGFuZGxlKTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIHJldHVybiAkZmlsZXM7DQp9DQoNCi8qKg0KICog6K6+572uaHR0cOeKtuaAgeWktC4NCiAqDQogKiBAcGFyYW0gaW50ICRudW1iZXIgSHR0cFN0YXR1cw0KICoNCiAqIEBpbnRlcm5hbCBwYXJhbSBzdHJpbmcgJHN0YXR1cyDmiJDlip/ojrflj5bnirbmgIHnoIHorr7nva7pnZnmgIHlj4LmlbBzdGF0dXMNCiAqDQogKiBAcmV0dXJuIGJvb2wNCiAqLw0KZnVuY3Rpb24gU2V0SHR0cFN0YXR1c0NvZGUoJG51bWJlciwgJGZvcmNlID0gZmFsc2UpDQp7DQogICAgc3RhdGljICRzdGF0dXMgPSAnJzsNCiAgICBpZiAoJHN0YXR1cyAhPSAnJyAmJiAkZm9yY2UgPT0gZmFsc2UpIHsNCiAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgIH0NCg0KICAgICRjb2RlcyA9IGFycmF5KA0KICAgICAgICAvLyBJbmZvcm1hdGlvbmFsIDF4eA0KICAgICAgICAxMDAgPT4gJ0NvbnRpbnVlJywNCiAgICAgICAgMTAxID0+ICdTd2l0Y2hpbmcgUHJvdG9jb2xzJywNCiAgICAgICAgMTAyID0+ICdQcm9jZXNzaW5nJywNCg0KICAgICAgICAvLyBTdWNjZXNzIDJ4eA0KICAgICAgICAyMDAgPT4gJ09LJywNCiAgICAgICAgMjAxID0+ICdDcmVhdGVkJywNCiAgICAgICAgMjAyID0+ICdBY2NlcHRlZCcsDQogICAgICAgIDIwMyA9PiAnTm9uLUF1dGhvcml0YXRpdmUgSW5mb3JtYXRpb24nLA0KICAgICAgICAyMDQgPT4gJ05vIENvbnRlbnQnLA0KICAgICAgICAyMDUgPT4gJ1Jlc2V0IENvbnRlbnQnLA0KICAgICAgICAyMDYgPT4gJ1BhcnRpYWwgQ29udGVudCcsDQogICAgICAgIDIwNyA9PiAnTXVsdGktU3RhdHVzJywNCg0KICAgICAgICAvLyBSZWRpcmVjdGlvbiAzeHgNCiAgICAgICAgMzAwID0+ICdNdWx0aXBsZSBDaG9pY2VzJywNCiAgICAgICAgMzAxID0+ICdNb3ZlZCBQZXJtYW5lbnRseScsDQogICAgICAgIDMwMiA9PiAnRm91bmQnLCAvLyAxLjENCiAgICAgICAgMzAzID0+ICdTZWUgT3RoZXInLA0KICAgICAgICAzMDQgPT4gJ05vdCBNb2RpZmllZCcsDQogICAgICAgIDMwNSA9PiAnVXNlIFByb3h5JywNCiAgICAgICAgMzA2ID0+ICdTd2l0Y2ggUHJveHknLA0KICAgICAgICAzMDcgPT4gJ1RlbXBvcmFyeSBSZWRpcmVjdCcsDQoNCiAgICAgICAgLy8gQ2xpZW50IEVycm9yIDR4eA0KICAgICAgICA0MDAgPT4gJ0JhZCBSZXF1ZXN0JywNCiAgICAgICAgNDAxID0+ICdVbmF1dGhvcml6ZWQnLA0KICAgICAgICA0MDIgPT4gJ1BheW1lbnQgUmVxdWlyZWQnLA0KICAgICAgICA0MDMgPT4gJ0ZvcmJpZGRlbicsDQogICAgICAgIDQwNCA9PiAnTm90IEZvdW5kJywNCiAgICAgICAgNDA1ID0+ICdNZXRob2QgTm90IEFsbG93ZWQnLA0KICAgICAgICA0MDYgPT4gJ05vdCBBY2NlcHRhYmxlJywNCiAgICAgICAgNDA3ID0+ICdQcm94eSBBdXRoZW50aWNhdGlvbiBSZXF1aXJlZCcsDQogICAgICAgIDQwOCA9PiAnUmVxdWVzdCBUaW1lb3V0JywNCiAgICAgICAgNDA5ID0+ICdDb25mbGljdCcsDQogICAgICAgIDQxMCA9PiAnR29uZScsDQogICAgICAgIDQxMSA9PiAnTGVuZ3RoIFJlcXVpcmVkJywNCiAgICAgICAgNDEyID0+ICdQcmVjb25kaXRpb24gRmFpbGVkJywNCiAgICAgICAgNDEzID0+ICdSZXF1ZXN0IEVudGl0eSBUb28gTGFyZ2UnLA0KICAgICAgICA0MTQgPT4gJ1JlcXVlc3QtVVJJIFRvbyBMb25nJywNCiAgICAgICAgNDE1ID0+ICdVbnN1cHBvcnRlZCBNZWRpYSBUeXBlJywNCiAgICAgICAgNDE2ID0+ICdSZXF1ZXN0ZWQgUmFuZ2UgTm90IFNhdGlzZmlhYmxlJywNCiAgICAgICAgNDE3ID0+ICdFeHBlY3RhdGlvbiBGYWlsZWQnLA0KICAgICAgICA0NTEgPT4gJ1VuYXZhaWxhYmxlIEZvciBMZWdhbCBSZWFzb25zJywNCg0KICAgICAgICAvLyBTZXJ2ZXIgRXJyb3IgNXh4DQogICAgICAgIDUwMCA9PiAnSW50ZXJuYWwgU2VydmVyIEVycm9yJywNCiAgICAgICAgNTAxID0+ICdOb3QgSW1wbGVtZW50ZWQnLA0KICAgICAgICA1MDIgPT4gJ0JhZCBHYXRld2F5JywNCiAgICAgICAgNTAzID0+ICdTZXJ2aWNlIFVuYXZhaWxhYmxlJywNCiAgICAgICAgNTA0ID0+ICdHYXRld2F5IFRpbWVvdXQnLA0KICAgICAgICA1MDUgPT4gJ0hUVFAgVmVyc2lvbiBOb3QgU3VwcG9ydGVkJywNCiAgICAgICAgNTA2ID0+ICdWYXJpYW50IEFsc28gTmVnb3RpYXRlcycsDQogICAgICAgIDUwNyA9PiAnSW5zdWZmaWNpZW50IFN0b3JhZ2UnLA0KICAgICAgICA1MDggPT4gJ0xvb3AgRGV0ZWN0ZWQnLA0KICAgICAgICA1MDkgPT4gJ0JhbmR3aWR0aCBMaW1pdCBFeGNlZWRlZCcsDQogICAgICAgIDUxMCA9PiAnTm90IEV4dGVuZGVkJywNCiAgICApOw0KDQogICAgaWYgKGlzc2V0KCRjb2Rlc1skbnVtYmVyXSkpIHsNCiAgICAgICAgaGVhZGVyKCdIVFRQLzEuMSAnIC4gJG51bWJlciAuICcgJyAuICRjb2Rlc1skbnVtYmVyXSk7DQogICAgICAgICRzdGF0dXMgPSAkbnVtYmVyOw0KDQogICAgICAgIHJldHVybiB0cnVlOw0KICAgIH0NCg0KICAgIHJldHVybiBmYWxzZTsNCn0NCg0KLyoqDQogKiDnlKhzY3JpcHTmoIfnrb7ov5vooYzot7PovawuDQogKg0KICogQHBhcmFtIHN0cmluZyAkdXJsIOi3s+i9rOmTvuaOpQ0KICovDQpmdW5jdGlvbiBSZWRpcmVjdEJ5U2NyaXB0KCR1cmwpDQp7DQogICAgZWNobyAnPHNjcmlwdD5sb2NhdGlvbi5ocmVmID0gZGVjb2RlVVJJQ29tcG9uZW50KCInIC4gdXJsZW5jb2RlKCR1cmwpIC4gJyIpOzwvc2NyaXB0Pic7DQogICAgZGllKCk7DQp9DQoNCi8qKg0KICogMzAy6Lez6L2sLg0KICoNCiAqIEBwYXJhbSBzdHJpbmcgJHVybCDot7Povazpk77mjqUNCiAqLw0KZnVuY3Rpb24gUmVkaXJlY3QoJHVybCkNCnsNCiAgICBTZXRIdHRwU3RhdHVzQ29kZSgzMDIpOw0KICAgIGhlYWRlcignTG9jYXRpb246ICcgLiAkdXJsKTsNCiAgICBkaWUoKTsNCn0NCg0KLyoqDQogKiAzMDHot7PovawuDQogKg0KICogQHBhcmFtIHN0cmluZyAkdXJsIOi3s+i9rOmTvuaOpQ0KICovDQpmdW5jdGlvbiBSZWRpcmVjdDMwMSgkdXJsKQ0Kew0KICAgIFNldEh0dHBTdGF0dXNDb2RlKDMwMSk7DQogICAgaGVhZGVyKCdMb2NhdGlvbjogJyAuICR1cmwpOw0KICAgIGRpZSgpOw0KfQ0KDQovKioNCiAqIEh0dHA0MDQNCiAqLw0KZnVuY3Rpb24gSHR0cDQwNCgpDQp7DQogICAgU2V0SHR0cFN0YXR1c0NvZGUoNDA0KTsNCiAgICBoZWFkZXIoIlN0YXR1czogNDA0IE5vdCBGb3VuZCIpOw0KfQ0KDQovKioNCiAqIEh0dHA1MDANCiAqLw0KZnVuY3Rpb24gSHR0cDUwMCgpDQp7DQogICAgU2V0SHR0cFN0YXR1c0NvZGUoNTAwKTsNCn0NCg0KLyoqDQogKiBIdHRwNTAzDQogKi8NCmZ1bmN0aW9uIEh0dHA1MDMoKQ0Kew0KICAgIFNldEh0dHBTdGF0dXNDb2RlKDUwMyk7DQp9DQoNCi8qKg0KICog6K6+572uMzA057yT5a2Y5aS0Lg0KICoNCiAqIEBwYXJhbSBzdHJpbmcgJGZpbGVuYW1lIOaWh+S7tuWQjQ0KICogQHBhcmFtIHN0cmluZyAkdGltZSAgICAg57yT5a2Y5pe26Ze0DQogKi8NCmZ1bmN0aW9uIEh0dHAzMDQoJGZpbGVuYW1lLCAkdGltZSkNCnsNCiAgICAkdXJsID0gJGZpbGVuYW1lOw0KICAgICRtZDUgPSBtZDUoJHVybCAuICR0aW1lKTsNCiAgICAkZXRhZyA9ICciJyAuICRtZDUgLiAnIic7DQogICAgaGVhZGVyKCdMYXN0LU1vZGlmaWVkOiAnIC4gZ21kYXRlKCdELCBkIE0gWSBIOmk6cycsICR0aW1lKSAuICcgR01UJyk7DQogICAgaGVhZGVyKCJFVGFnOiAkZXRhZyIpOw0KICAgIGlmICgoaXNzZXQoJF9TRVJWRVJbJ0hUVFBfSUZfTk9ORV9NQVRDSCddKSAmJiAkX1NFUlZFUlsnSFRUUF9JRl9OT05FX01BVENIJ10gPT0gJGV0YWcpKSB7DQogICAgICAgIFNldEh0dHBTdGF0dXNDb2RlKDMwNCk7DQogICAgICAgIGRpZSgpOw0KICAgIH0NCn0NCg0KLyoqDQogKiDojrflj5blrqLmiLfnq69JUC4NCiAqDQogKiBAcmV0dXJuIHN0cmluZyDov5Tlm55JUOWcsOWdgA0KICovDQpmdW5jdGlvbiBHZXRHdWVzdElQKCkNCnsNCiAgICBnbG9iYWwgJHpicDsNCiAgICBpZiAoaXNzZXQoJHpicC0+b3B0aW9uWydaQ19VU0lOR19DRE5fR1VFU1RJUF9UWVBFJ10pICYmICR6YnAtPm9wdGlvblsnWkNfVVNJTkdfQ0ROX0dVRVNUSVBfVFlQRSddICE9ICcnKSB7DQogICAgICAgICR1c2VyX2lwID0gR2V0VmFycygkemJwLT5vcHRpb25bJ1pDX1VTSU5HX0NETl9HVUVTVElQX1RZUEUnXSwgIlNFUlZFUiIpOw0KICAgIH0gZWxzZSB7DQogICAgICAgICR1c2VyX2lwID0gR2V0VmFycygiUkVNT1RFX0FERFIiLCAiU0VSVkVSIik7DQogICAgfQ0KDQogICAgcmV0dXJuICR1c2VyX2lwOw0KfQ0KDQovKioNCiAqIOiOt+WPluWuouaIt+err0FnZW50Lg0KICoNCiAqIEByZXR1cm4gc3RyaW5nIOi/lOWbnkFnZW50DQogKi8NCmZ1bmN0aW9uIEdldEd1ZXN0QWdlbnQoKQ0Kew0KICAgIHJldHVybiBHZXRWYXJzKCJIVFRQX1VTRVJfQUdFTlQiLCAiU0VSVkVSIik7DQp9DQoNCi8qKg0KICog6I635Y+W6K+35rGC5p2l5rqQVVJMLg0KICoNCiAqIEByZXR1cm4gc3RyaW5nIOi/lOWbnlVSTA0KICovDQpmdW5jdGlvbiBHZXRSZXF1ZXN0VXJpKCkNCnsNCiAgICBpZiAoaXNzZXQoJF9TRVJWRVJbJ0hUVFBfWF9PUklHSU5BTF9VUkwnXSkpIHsNCiAgICAgICAgJHVybCA9ICRfU0VSVkVSWydIVFRQX1hfT1JJR0lOQUxfVVJMJ107DQogICAgfSBlbHNlaWYgKGlzc2V0KCRfU0VSVkVSWydIVFRQX1hfUkVXUklURV9VUkwnXSkpIHsNCiAgICAgICAgJHVybCA9ICRfU0VSVkVSWydIVFRQX1hfUkVXUklURV9VUkwnXTsNCiAgICAgICAgaWYgKHN0cnBvcygkdXJsLCAnPycpICE9PSBmYWxzZSkgew0KICAgICAgICAgICAgJHF1ZXJpZXMgPSBHZXRWYWx1ZUluQXJyYXkoZXhwbG9kZSgnPycsICR1cmwpLCAnMScpOw0KICAgICAgICAgICAgZm9yZWFjaCAoZXhwbG9kZSgnJicsICRxdWVyaWVzKSBhcyAkcXVlcnkpIHsNCiAgICAgICAgICAgICAgICAkbmFtZSA9IEdldFZhbHVlSW5BcnJheShleHBsb2RlKCc9JywgJHF1ZXJ5KSwgJzAnKTsNCiAgICAgICAgICAgICAgICAkdmFsdWUgPSBHZXRWYWx1ZUluQXJyYXkoZXhwbG9kZSgnPScsICRxdWVyeSksICcxJyk7DQogICAgICAgICAgICAgICAgJG5hbWUgPSB1cmxkZWNvZGUoJG5hbWUpOw0KICAgICAgICAgICAgICAgICR2YWx1ZSA9IHVybGRlY29kZSgkdmFsdWUpOw0KICAgICAgICAgICAgICAgIGlmICghaXNzZXQoJF9HRVRbJG5hbWVdKSkgew0KICAgICAgICAgICAgICAgICAgICAkX0dFVFskbmFtZV0gPSAkdmFsdWU7DQogICAgICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICAgICAgaWYgKCFpc3NldCgkX0dFVFskbmFtZV0pKSB7DQogICAgICAgICAgICAgICAgICAgICRfUkVRVUVTVFskbmFtZV0gPSAkdmFsdWU7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgfSBlbHNlaWYgKGlzc2V0KCRfU0VSVkVSWydSRVFVRVNUX1VSSSddKSkgew0KICAgICAgICAkdXJsID0gJF9TRVJWRVJbJ1JFUVVFU1RfVVJJJ107DQogICAgfSBlbHNlaWYgKGlzc2V0KCRfU0VSVkVSWydSRURJUkVDVF9VUkwnXSkpIHsNCiAgICAgICAgJHVybCA9ICRfU0VSVkVSWydSRURJUkVDVF9VUkwnXTsNCiAgICAgICAgaWYgKGlzc2V0KCRfU0VSVkVSWydSRURJUkVDVF9RVUVSWV9TVFJJTiddKSkgew0KICAgICAgICAgICAgJHVybCAuPSAnPycgLiAkX1NFUlZFUlsnUkVESVJFQ1RfUVVFUllfU1RSSU4nXTsNCiAgICAgICAgfQ0KICAgIH0gZWxzZSB7DQogICAgICAgICR1cmwgPSAkX1NFUlZFUlsnUEhQX1NFTEYnXSAuICgkX1NFUlZFUlsnUVVFUllfU1RSSU5HJ10gPyAnPycgLiAkX1NFUlZFUlsnUVVFUllfU1RSSU5HJ10gOiAnJyk7DQogICAgfQ0KDQogICAgcmV0dXJuICR1cmw7DQp9DQoNCi8qKg0KICog6I635Y+W5paH5Lu25ZCO57yA5ZCNLg0KICoNCiAqIEBwYXJhbSBzdHJpbmcgJGYg5paH5Lu25ZCNDQogKg0KICogQHJldHVybiBzdHJpbmcg6L+U5Zue5bCP5YaZ55qE5ZCO57yA5ZCNDQogKi8NCmZ1bmN0aW9uIEdldEZpbGVFeHQoJGYpDQp7DQogICAgaWYgKHN0cnBvcygkZiwgJy4nKSA9PT0gZmFsc2UpIHsNCiAgICAgICAgcmV0dXJuICcnOw0KICAgIH0NCg0KICAgICRhID0gZXhwbG9kZSgnLicsICRmKTsNCg0KICAgIHJldHVybiBzdHJ0b2xvd2VyKGVuZCgkYSkpOw0KfQ0KDQovKioNCiAqIOiOt+WPluaWh+S7tuadg+mZkC4NCiAqDQogKiBAcGFyYW0gc3RyaW5nICRmIOaWh+S7tuWQjQ0KICoNCiAqIEByZXR1cm4gc3RyaW5nfG51bGwg6L+U5Zue5paH5Lu25p2D6ZmQ77yM5pWw5YC85qC85byP77yM5aaCMDY0NA0KICovDQpmdW5jdGlvbiBHZXRGaWxlUGVybXNPY3QoJGYpDQp7DQogICAgaWYgKCFmaWxlX2V4aXN0cygkZikpIHsNCiAgICAgICAgcmV0dXJuOw0KICAgIH0NCg0KICAgIHJldHVybiBzdWJzdHIoc3ByaW50ZignJW8nLCBmaWxlcGVybXMoJGYpKSwgLTQpOw0KfQ0KDQovKioNCiAqIOiOt+WPluaWh+S7tuadg+mZkC4NCiAqDQogKiBAcGFyYW0gc3RyaW5nICRmIOaWh+S7tuWQjQ0KICoNCiAqIEByZXR1cm4gc3RyaW5nfG51bGwg6L+U5Zue5paH5Lu25p2D6ZmQ77yM5a2X56ym6KGo6L6+5qC85byP77yM5aaCLXJ3LXItLXItLQ0KICovDQpmdW5jdGlvbiBHZXRGaWxlUGVybXMoJGYpDQp7DQogICAgaWYgKCFmaWxlX2V4aXN0cygkZikpIHsNCiAgICAgICAgcmV0dXJuOw0KICAgIH0NCg0KICAgICRwZXJtcyA9IGZpbGVwZXJtcygkZik7DQogICAgc3dpdGNoICgkcGVybXMgJiAweEYwMDApIHsNCiAgICAgICAgY2FzZSAweEMwMDA6IC8vIHNvY2tldA0KICAgICAgICAgICAgJGluZm8gPSAncyc7DQogICAgICAgICAgICBicmVhazsNCiAgICAgICAgY2FzZSAweEEwMDA6IC8vIHN5bWJvbGljIGxpbmsNCiAgICAgICAgICAgICRpbmZvID0gJ2wnOw0KICAgICAgICAgICAgYnJlYWs7DQogICAgICAgIGNhc2UgMHg4MDAwOiAvLyByZWd1bGFyDQogICAgICAgICAgICAkaW5mbyA9ICctJzsNCiAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICBjYXNlIDB4NjAwMDogLy8gYmxvY2sgc3BlY2lhbA0KICAgICAgICAgICAgJGluZm8gPSAnYic7DQogICAgICAgICAgICBicmVhazsNCiAgICAgICAgY2FzZSAweDQwMDA6IC8vIGRpcmVjdG9yeQ0KICAgICAgICAgICAgJGluZm8gPSAnZCc7DQogICAgICAgICAgICBicmVhazsNCiAgICAgICAgY2FzZSAweDIwMDA6IC8vIGNoYXJhY3RlciBzcGVjaWFsDQogICAgICAgICAgICAkaW5mbyA9ICdjJzsNCiAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICBjYXNlIDB4MTAwMDogLy8gRklGTyBwaXBlDQogICAgICAgICAgICAkaW5mbyA9ICdwJzsNCiAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICBkZWZhdWx0OiAvLyB1bmtub3duDQogICAgICAgICAgICAkaW5mbyA9ICd1JzsNCiAgICB9DQoNCiAgICAvLyBPd25lcg0KICAgICRpbmZvIC49ICgoJHBlcm1zICYgMHgwMTAwKSA/ICdyJyA6ICctJyk7DQogICAgJGluZm8gLj0gKCgkcGVybXMgJiAweDAwODApID8gJ3cnIDogJy0nKTsNCiAgICAkaW5mbyAuPSAoKCRwZXJtcyAmIDB4MDA0MCkgPyAoKCRwZXJtcyAmIDB4MDgwMCkgPyAncycgOiAneCcpIDogKCgkcGVybXMgJiAweDA4MDApID8gJ1MnIDogJy0nKSk7DQoNCiAgICAvLyBHcm91cA0KICAgICRpbmZvIC49ICgoJHBlcm1zICYgMHgwMDIwKSA/ICdyJyA6ICctJyk7DQogICAgJGluZm8gLj0gKCgkcGVybXMgJiAweDAwMTApID8gJ3cnIDogJy0nKTsNCiAgICAkaW5mbyAuPSAoKCRwZXJtcyAmIDB4MDAwOCkgPyAoKCRwZXJtcyAmIDB4MDQwMCkgPyAncycgOiAneCcpIDogKCgkcGVybXMgJiAweDA0MDApID8gJ1MnIDogJy0nKSk7DQoNCiAgICAvLyBPdGhlcg0KICAgICRpbmZvIC49ICgoJHBlcm1zICYgMHgwMDA0KSA/ICdyJyA6ICctJyk7DQogICAgJGluZm8gLj0gKCgkcGVybXMgJiAweDAwMDIpID8gJ3cnIDogJy0nKTsNCiAgICAkaW5mbyAuPSAoKCRwZXJtcyAmIDB4MDAwMSkgPyAoKCRwZXJtcyAmIDB4MDIwMCkgPyAndCcgOiAneCcpIDogKCgkcGVybXMgJiAweDAyMDApID8gJ1QnIDogJy0nKSk7DQoNCiAgICByZXR1cm4gJGluZm87DQp9DQoNCi8qKg0KICog5ZCR5a2X56ym5Liy5Z6L55qE5Y+C5pWw6KGo5Yqg5YWl5LiA5Liq5paw5Y+C5pWwLg0KICoNCiAqIEBwYXJhbSBzdHJpbmcgJHMgICAg5a2X56ym5Liy5Z6L55qE5Y+C5pWw6KGo77yM5LulfOespuWPt+WIhumalA0KICogQHBhcmFtIHN0cmluZyAkbmFtZSDlj4LmlbDlkI0NCiAqDQogKiBAcmV0dXJuIHN0cmluZyDov5Tlm57mlrDlrZfnrKbkuLLvvIzku6V856ym5Y+35YiG6ZqUDQogKi8NCmZ1bmN0aW9uIEFkZE5hbWVJblN0cmluZygkcywgJG5hbWUpDQp7DQogICAgJHBsID0gJHM7DQogICAgJG5hbWUgPSAoc3RyaW5nKSAkbmFtZTsNCiAgICAkYXBsID0gZXhwbG9kZSgnfCcsICRwbCk7DQogICAgaWYgKGluX2FycmF5KCRuYW1lLCAkYXBsKSA9PSBmYWxzZSkgew0KICAgICAgICAkYXBsW10gPSAkbmFtZTsNCiAgICB9DQogICAgJHBsID0gdHJpbShpbXBsb2RlKCd8JywgJGFwbCksICd8Jyk7DQoNCiAgICByZXR1cm4gJHBsOw0KfQ0KDQovKioNCiAqIOS7juWtl+espuS4suWei+eahOWPguaVsOihqOS4reWIoOmZpOS4gOS4quWPguaVsC4NCiAqDQogKiBAcGFyYW0gc3RyaW5nICRzICAgIOWtl+espuS4suWei+eahOWPguaVsOihqO+8jOS7pXznrKblj7fliIbpmpQNCiAqIEBwYXJhbSBzdHJpbmcgJG5hbWUg5Y+C5pWw5ZCNDQogKg0KICogQHJldHVybiBzdHJpbmcg6L+U5Zue5paw5a2X56ym5Liy77yM5LulfOespuWPt+WIhumalA0KICovDQpmdW5jdGlvbiBEZWxOYW1lSW5TdHJpbmcoJHMsICRuYW1lKQ0Kew0KICAgICRwbCA9ICRzOw0KICAgICRuYW1lID0gKHN0cmluZykgJG5hbWU7DQogICAgJGFwbCA9IGV4cGxvZGUoJ3wnLCAkcGwpOw0KICAgICRjb3VudCA9IGNvdW50KCRhcGwpOw0KICAgIGZvciAoJGkgPSAwOyAkaSA8ICRjb3VudDsgJGkrKykgew0KICAgICAgICBpZiAoJGFwbFskaV0gPT0gJG5hbWUpIHsNCiAgICAgICAgICAgIHVuc2V0KCRhcGxbJGldKTsNCiAgICAgICAgfQ0KICAgIH0NCiAgICAkcGwgPSB0cmltKGltcGxvZGUoJ3wnLCAkYXBsKSwgJ3wnKTsNCg0KICAgIHJldHVybiAkcGw7DQp9DQoNCi8qKg0KICog5Zyo5a2X56ym5Liy5Y+C5pWw5YC85p+l5om+5Y+C5pWwLg0KICoNCiAqIEBwYXJhbSBzdHJpbmcgJHMgICAg5a2X56ym5Liy5Z6L55qE5Y+C5pWw6KGo77yM5LulfOespuWPt+WIhumalA0KICogQHBhcmFtIHN0cmluZyAkbmFtZSDlj4LmlbDlkI0NCiAqDQogKiBAcmV0dXJuIGJvb2wNCiAqLw0KZnVuY3Rpb24gSGFzTmFtZUluU3RyaW5nKCRzLCAkbmFtZSkNCnsNCiAgICAkcGwgPSAkczsNCiAgICAkbmFtZSA9IChzdHJpbmcpICRuYW1lOw0KICAgICRhcGwgPSBleHBsb2RlKCd8JywgJHBsKTsNCg0KICAgIHJldHVybiBpbl9hcnJheSgkbmFtZSwgJGFwbCk7DQp9DQoNCi8qKg0KICog5LulSlNPTuW9ouW8j+i+k+WHuumUmeivr+S/oeaBr++8iOeUqOS6jlNob3dFcnJvcuaOpeWPo++8iS4NCiAqDQogKiBAcGFyYW0gJGVycm9yQ29kZQ0KICogQHBhcmFtICRlcnJvclN0cmluZw0KICogQHBhcmFtICRmaWxlDQogKiBAcGFyYW0gJGxpbmUNCiAqLw0KZnVuY3Rpb24gSnNvbkVycm9yNFNob3dFcnJvckhvb2soJGVycm9yQ29kZSwgJGVycm9yU3RyaW5nLCAkZmlsZSwgJGxpbmUpDQp7DQogICAgaWYgKCRlcnJvckNvZGUgPT09IDApIHsNCiAgICAgICAgJGVycm9yQ29kZSA9IDE7DQogICAgfQ0KICAgIEpzb25FcnJvcigkZXJyb3JDb2RlLCAkZXJyb3JTdHJpbmcsIG51bGwpOw0KfQ0KDQovKioNCiAqIOS7pUpTT07lvaLlvI/ovpPlh7rplJnor6/kv6Hmga8uKGVyciBjb2Rl5Li6KGludCkw6K6k5Li65piv5rKh5pyJ6ZSZ6K+v77yM5omA5Lul5oqKMOi9rOS4ujEpDQogKg0KICogQHBhcmFtIHN0cmluZyAkZXJyb3JDb2RlICAg6ZSZ6K+v57yW5Y+3DQogKiBAcGFyYW0gc3RyaW5nICRlcnJvclN0cmluZyDplJnor6/lhoXlrrkNCiAqIEBwYXJhbSBvYmplY3QgJGRhdGEg5YW35L2T5YaF5a65DQogKi8NCmZ1bmN0aW9uIEpzb25FcnJvcigkZXJyb3JDb2RlLCAkZXJyb3JTdHJpbmcsICRkYXRhKQ0Kew0KICAgICRleGl0ID0gdHJ1ZTsNCiAgICBpZiAoJGVycm9yQ29kZSA9PT0gMCkgew0KICAgICAgICAkZXhpdCA9IGZhbHNlOw0KICAgIH0NCiAgICAkcmVzdWx0ID0gYXJyYXkoDQogICAgICAgICdkYXRhJyA9PiAkZGF0YSwNCiAgICAgICAgJ2VycicgID0+IGFycmF5KA0KICAgICAgICAgICAgJ2NvZGUnID0+ICRlcnJvckNvZGUsDQogICAgICAgICAgICAnbXNnJyAgPT4gJGVycm9yU3RyaW5nLA0KICAgICAgICAgICAgLy8ncnVudGltZScgPT4gUnVuVGltZSgpLA0KICAgICAgICAgICAgJ3RpbWVzdGFtcCcgPT4gdGltZSgpLA0KICAgICAgICApLA0KICAgICk7DQogICAgQG9iX2NsZWFuKCk7DQogICAgZWNobyBqc29uX2VuY29kZSgkcmVzdWx0KTsNCiAgICBpZiAoJGV4aXQpIHsNCiAgICAgICAgZXhpdDsNCiAgICB9DQp9DQoNCi8qKg0KICog5b2T5Luj56CB5q2j5bi46L+Q6KGM5pe277yM5LulSlNPTuW9ouW8j+i+k+WHuuS/oeaBry4NCiAqDQogKiBAcGFyYW0gb2JqZWN0IOW+hei/lOWbnuWGheWuuQ0KICovDQpmdW5jdGlvbiBKc29uUmV0dXJuKCRkYXRhKQ0Kew0KICAgIEpzb25FcnJvcigwLCAnJywgJGRhdGEpOw0KfQ0KDQovKioNCiAqIFhNTC1SUEPlupTnrZTplJnor6/pobXpnaIuDQogKg0KICogQHBhcmFtICRlcnJvckNvZGUNCiAqIEBwYXJhbSAkZXJyb3JTdHJpbmcNCiAqIEBwYXJhbSAkZmlsZQ0KICogQHBhcmFtICRsaW5lDQogKg0KICogQHJldHVybiB2b2lkDQogKi8NCmZ1bmN0aW9uIFJlc3BvbmRFcnJvcigkZXJyb3JDb2RlLCAkZXJyb3JTdHJpbmcgPSAnJywgJGZpbGUgPSAnJywgJGxpbmUgPSAnJykNCnsNCiAgICAkc3RyWE1MID0gJzw/eG1sIHZlcnNpb249IjEuMCIgZW5jb2Rpbmc9IlVURi04Ij8+PG1ldGhvZFJlc3BvbnNlPjxmYXVsdD48dmFsdWU+PHN0cnVjdD48bWVtYmVyPjxuYW1lPmZhdWx0Q29kZTwvbmFtZT48dmFsdWU+PGludD4kMTwvaW50PjwvdmFsdWU+PC9tZW1iZXI+PG1lbWJlcj48bmFtZT5mYXVsdFN0cmluZzwvbmFtZT48dmFsdWU+PHN0cmluZz4kMjwvc3RyaW5nPjwvdmFsdWU+PC9tZW1iZXI+PC9zdHJ1Y3Q+PC92YWx1ZT48L2ZhdWx0PjwvbWV0aG9kUmVzcG9uc2U+JzsNCiAgICAkc3RyRXJyb3IgPSAkc3RyWE1MOw0KICAgICRzdHJFcnJvciA9IHN0cl9yZXBsYWNlKCIkMSIsIEZvcm1hdFN0cmluZygkZXJyb3JDb2RlLCAiW2h0bWwtZm9ybWF0XSIpLCAkc3RyRXJyb3IpOw0KICAgICRzdHJFcnJvciA9IHN0cl9yZXBsYWNlKCIkMiIsIEZvcm1hdFN0cmluZygkZXJyb3JTdHJpbmcsICJbaHRtbC1mb3JtYXRdIiksICRzdHJFcnJvcik7DQoNCiAgICBvYl9jbGVhbigpOw0KICAgIGVjaG8gJHN0ckVycm9yOw0KICAgIGV4aXQ7DQp9DQoNCi8qKg0KICogWE1MLVJQQ+iEmuacrOmUmeivr+mhtemdoi4NCiAqDQogKiBAcGFyYW0gc3RyaW5nICRlcnJvckNvZGUg6ZSZ6K+v5o+Q56S65a2X56ym5LiyDQogKiBAcGFyYW0gc3RyaW5nICRlcnJvclRleHQNCiAqIEBwYXJhbSBzdHJpbmcgJGZpbGUNCiAqIEBwYXJhbSBzdHJpbmcgJGxpbmUNCiAqDQogKiBAcmV0dXJuIHZvaWQNCiAqLw0KZnVuY3Rpb24gU2NyaXB0RXJyb3IoJGVycm9yQ29kZSwgJGVycm9yVGV4dCA9ICcnLCAkZmlsZSA9ICcnLCAkbGluZSA9ICcnKQ0Kew0KICAgIGhlYWRlcignQ29udGVudC10eXBlOiBhcHBsaWNhdGlvbi94LWphdmFzY3JpcHQ7IENoYXJzZXQ9dXRmLTgnKTsNCiAgICBvYl9jbGVhbigpOw0KICAgIGVjaG8gJ2FsZXJ0KCInIC4gc3RyX3JlcGxhY2UoJyInLCAnXCInLCAkZXJyb3JDb2RlIC4gJzonIC4gJGVycm9yVGV4dCkgLiAnIiknOw0KICAgIGRpZSgpOw0KfQ0KDQovKioNCiAqICDpqozor4HlrZfnrKbkuLLmmK/lkKbnrKblkIjmraPliJnooajovr7lvI8uDQogKg0KICogQHBhcmFtIHN0cmluZyAkc291cmNlIOWtl+espuS4sg0KICogQHBhcmFtIHN0cmluZyAkcGFyYSAgIOato+WImeihqOi+vuW8j++8jOWPr+eUqFt1c2VybmFtZV18W3Bhc3N3b3JkXXxbZW1haWxdfFtob21lcGFnZV3miJboh6rlrprkuYnooajovr7lvI8NCiAqDQogKiBAcmV0dXJuIGJvb2wNCiAqLw0KZnVuY3Rpb24gQ2hlY2tSZWdFeHAoJHNvdXJjZSwgJHBhcmEpDQp7DQogICAgaWYgKHN0cnBvcygkcGFyYSwgJ1t1c2VybmFtZV0nKSAhPT0gZmFsc2UpIHsNCiAgICAgICAgJHBhcmEgPSAiL15bXC5cX0EtWmEtejAtOcK3QFx4ezRlMDB9LVx4ezlmYTV9XSskL3UiOw0KICAgIH0gZWxzZWlmIChzdHJwb3MoJHBhcmEsICdbbmlja25hbWVdJykgIT09IGZhbHNlKSB7DQogICAgICAgICRwYXJhID0gJy8oW15ceHswMX0tXHh7MUZ9XHh7ODB9LVx4e0ZGfVwvOlxcfiYlO0BcJyI/PD58IyRcKn17LFwrPVxbXF1cKFwpXHtcfVx0XHJcblxwe0N9XSkvdSc7DQogICAgfSBlbHNlaWYgKHN0cnBvcygkcGFyYSwgJ1twYXNzd29yZF0nKSAhPT0gZmFsc2UpIHsNCiAgICAgICAgJHBhcmEgPSAiL15bQS1aYS16MC05YH4hQCNcJCVcXiZcKlwtX1w/XSskL3UiOw0KICAgIH0gZWxzZWlmIChzdHJwb3MoJHBhcmEsICdbZW1haWxdJykgIT09IGZhbHNlKSB7DQogICAgICAgICRwYXJhID0gIi9eKFswLTlhLXpBLVpdKFstLlx3XSpbMC05YS16QS1aXSkqQChbMC05YS16QS1aXVstXHddKlwuKStbYS16QS1aXSopJC91IjsNCiAgICB9IGVsc2VpZiAoc3RycG9zKCRwYXJhLCAnW2hvbWVwYWdlXScpICE9PSBmYWxzZSkgew0KICAgICAgICAkcGFyYSA9ICIvXlthLXpBLVpdKzpcL1wvW2EtekEtWjAtOVxfXC1cLlwmXD9cLzo9I1x4ezRlMDB9LVx4ezlmYTV9XSskL3UiOw0KICAgIH0gZWxzZWlmICghJHBhcmEpIHsNCiAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgIH0NCg0KICAgIHJldHVybiAoYm9vbCkgcHJlZ19tYXRjaCgkcGFyYSwgJHNvdXJjZSk7DQp9DQoNCi8qKg0KICogIOagvOW8j+WMluWtl+espuS4si4NCiAqDQogKiBAcGFyYW0gc3RyaW5nICRzb3VyY2Ug5a2X56ym5LiyDQogKiBAcGFyYW0gc3RyaW5nICRwYXJhICAg5q2j5YiZ6KGo6L6+5byP77yM5Y+v55SoW2h0bWwtZm9ybWF0XXxbbm9odG1sXXxbbm9zY3JpcHRdfFtlbnRlcl18W25vZW50ZXJdfFtmaWxlbmFtZV18W25vcm1hbG5hbWVd5oiW6Ieq5a6a5LmJ6KGo6L6+5byPDQogKg0KICogQHJldHVybiBzdHJpbmcNCiAqLw0KZnVuY3Rpb24gRm9ybWF0U3RyaW5nKCRzb3VyY2UsICRwYXJhKQ0Kew0KICAgIGlmIChzdHJwb3MoJHBhcmEsICdbaHRtbC1mb3JtYXRdJykgIT09IGZhbHNlKSB7DQogICAgICAgICRzb3VyY2UgPSBodG1sc3BlY2lhbGNoYXJzKCRzb3VyY2UpOw0KICAgIH0NCg0KICAgIGlmIChzdHJwb3MoJHBhcmEsICdbbm9odG1sXScpICE9PSBmYWxzZSkgew0KICAgICAgICAkc291cmNlID0gcHJlZ19yZXBsYWNlKCIvPChbXjw+XSopPi9zaSIsICIiLCAkc291cmNlKTsNCiAgICAgICAgJHNvdXJjZSA9IHN0cl9yZXBsYWNlKCI8IiwgIsuCIiwgJHNvdXJjZSk7DQogICAgICAgICRzb3VyY2UgPSBzdHJfcmVwbGFjZSgiPiIsICLLgyIsICRzb3VyY2UpOw0KICAgIH0NCg0KICAgIGlmIChzdHJwb3MoJHBhcmEsICdbbm9zY3JpcHRdJykgIT09IGZhbHNlKSB7DQogICAgICAgICRjbGFzcyAgPSBuZXcgWHNzSHRtbCgkc291cmNlKTsNCiAgICAgICAgJHNvdXJjZSA9IHRyaW0oJGNsYXNzLT5nZXRIdG1sKCkpOw0KICAgIH0NCiAgICBpZiAoc3RycG9zKCRwYXJhLCAnW2VudGVyXScpICE9PSBmYWxzZSkgew0KICAgICAgICAkc291cmNlID0gc3RyX3JlcGxhY2UoIlxyXG4iLCAiPGJyLz4iLCAkc291cmNlKTsNCiAgICAgICAgJHNvdXJjZSA9IHN0cl9yZXBsYWNlKCJcbiIsICI8YnIvPiIsICRzb3VyY2UpOw0KICAgICAgICAkc291cmNlID0gc3RyX3JlcGxhY2UoIlxyIiwgIjxici8+IiwgJHNvdXJjZSk7DQogICAgICAgICRzb3VyY2UgPSBwcmVnX3JlcGxhY2UoIi8oPGJyXC8+KSsvIiwgIjxici8+IiwgJHNvdXJjZSk7DQogICAgfQ0KICAgIGlmIChzdHJwb3MoJHBhcmEsICdbbm9lbnRlcl0nKSAhPT0gZmFsc2UpIHsNCiAgICAgICAgJHNvdXJjZSA9IHN0cl9yZXBsYWNlKCJcclxuIiwgIiIsICRzb3VyY2UpOw0KICAgICAgICAkc291cmNlID0gc3RyX3JlcGxhY2UoIlxuIiwgIiIsICRzb3VyY2UpOw0KICAgICAgICAkc291cmNlID0gc3RyX3JlcGxhY2UoIlxyIiwgIiIsICRzb3VyY2UpOw0KICAgIH0NCiAgICBpZiAoc3RycG9zKCRwYXJhLCAnW2ZpbGVuYW1lXScpICE9PSBmYWxzZSkgew0KICAgICAgICAkc291cmNlID0gc3RyX3JlcGxhY2UoYXJyYXkoIi8iLCAiIyIsICIkIiwgIlxcIiwgIjoiLCAiPyIsICIqIiwgIlwiIiwgIjwiLCAiPiIsICJ8IiwgIiAiKSwgYXJyYXkoIiIpLCAkc291cmNlKTsNCiAgICB9DQogICAgaWYgKHN0cnBvcygkcGFyYSwgJ1tub3JtYWxuYW1lXScpICE9PSBmYWxzZSkgew0KICAgICAgICAkc291cmNlID0gc3RyX3JlcGxhY2UoYXJyYXkoIiMiLCAiJCIsICIoIiwgIikiLCAiKiIsICIrIiwgIlsiLCAiXSIsICJ7IiwgIn0iLCAiPyIsICJcXCIsICJeIiwgInwiLCAiOiIsICInIiwgIlwiIiwgIjsiLCAiQCIsICJ+IiwgIj0iLCAiJSIsICImIiksIGFycmF5KCIiKSwgJHNvdXJjZSk7DQogICAgfQ0KDQogICAgcmV0dXJuICRzb3VyY2U7DQp9DQoNCi8qKg0KICog5qC85byP5YyW5a2X56ym5LiyDQogKg0KICogQHBhcmFtIHN0cmluZyAkc291cmNlDQogKiBAcGFyYW0gc3RyaW5nICRwYXJhbQ0KICoNCiAqIEBEZXByZWNhdGVkDQogKiovDQpmdW5jdGlvbiBUcmFuc2ZlckhUTUwoJHNvdXJjZSwgJHBhcmFtKQ0Kew0KICAgIHJldHVybiBGb3JtYXRTdHJpbmcoJHNvdXJjZSwgJHBhcmFtKTsNCn0NCg0KLyoqDQogKiAg5bCB6KOFSFRNTOagh+etvi4NCiAqDQogKiBAcGFyYW0gc3RyaW5nICRodG1sIGh0bWzmupDnoIENCiAqDQogKiBAcmV0dXJuIHN0cmluZw0KICovDQpmdW5jdGlvbiBDbG9zZVRhZ3MoJGh0bWwpDQp7DQogICAgcHJlZ19tYXRjaF9hbGwoJyM8KD8hbWV0YXxpbWd8YnJ8aHJ8aW5wdXRcYilcYihbYS16XSspKD86IC4qKT8oPzwhWy98LyBdKT4jaVUnLCAkaHRtbCwgJHJlc3VsdCk7DQogICAgJG9wZW5lZHRhZ3MgPSAkcmVzdWx0WzFdOw0KICAgIHByZWdfbWF0Y2hfYWxsKCcjPC8oW2Etel0rKT4jaVUnLCAkaHRtbCwgJHJlc3VsdCk7DQogICAgJGNsb3NlZHRhZ3MgPSAkcmVzdWx0WzFdOw0KICAgICRsZW5fb3BlbmVkID0gY291bnQoJG9wZW5lZHRhZ3MpOw0KICAgIGlmIChjb3VudCgkY2xvc2VkdGFncykgPT0gJGxlbl9vcGVuZWQpIHsNCiAgICAgICAgcmV0dXJuICRodG1sOw0KICAgIH0NCiAgICAkb3BlbmVkdGFncyA9IGFycmF5X3JldmVyc2UoJG9wZW5lZHRhZ3MpOw0KICAgIGZvciAoJGkgPSAwOyAkaSA8ICRsZW5fb3BlbmVkOyAkaSsrKSB7DQogICAgICAgIGlmICghaW5fYXJyYXkoJG9wZW5lZHRhZ3NbJGldLCAkY2xvc2VkdGFncykpIHsNCiAgICAgICAgICAgICRodG1sIC49ICc8LycgLiAkb3BlbmVkdGFnc1skaV0gLiAnPic7DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICB1bnNldCgkY2xvc2VkdGFnc1thcnJheV9zZWFyY2goJG9wZW5lZHRhZ3NbJGldLCAkY2xvc2VkdGFncyldKTsNCiAgICAgICAgfQ0KICAgIH0NCiAgICByZXR1cm4gJGh0bWw7DQp9DQoNCi8qKg0KICog6I635Y+WVVRGOOagvOW8j+eahOWtl+espuS4sueahOWtkOS4si4NCiAqDQogKiBAcGFyYW0gc3RyaW5nICRzb3VyY2VzdHIg5rqQ5a2X56ym5LiyDQogKiBAcGFyYW0gaW50ICAgICRzdGFydCAgICAg6LW35aeL5L2N572uDQogKg0KICogQHJldHVybiBzdHJpbmcNCiAqLw0KZnVuY3Rpb24gU3ViU3RyVVRGOF9TdGFydCgkc291cmNlc3RyLCAkc3RhcnQpDQp7DQogICAgJGFyZ3MgPSBmdW5jX2dldF9hcmdzKCk7DQogICAgaWYgKGZ1bmN0aW9uX2V4aXN0cygnbWJfc3Vic3RyJykgJiYgZnVuY3Rpb25fZXhpc3RzKCdtYl9pbnRlcm5hbF9lbmNvZGluZycpKSB7DQogICAgICAgIG1iX2ludGVybmFsX2VuY29kaW5nKCdVVEYtOCcpOw0KICAgICAgICByZXR1cm4gY2FsbF91c2VyX2Z1bmNfYXJyYXkoJ21iX3N1YnN0cicsICRhcmdzKTsNCiAgICB9DQoNCiAgICBpZiAoZnVuY3Rpb25fZXhpc3RzKCdpY29udl9zdWJzdHInKSAmJiBmdW5jdGlvbl9leGlzdHMoJ2ljb252X3NldF9lbmNvZGluZycpKSB7DQogICAgICAgIGNhbGxfdXNlcl9mdW5jKCdpY29udl9zZXRfZW5jb2RpbmcnLCAnaW50ZXJuYWxfZW5jb2RpbmcnLCAiVVRGLTgiKTsNCiAgICAgICAgY2FsbF91c2VyX2Z1bmMoJ2ljb252X3NldF9lbmNvZGluZycsICdvdXRwdXRfZW5jb2RpbmcnLCAiVVRGLTgiKTsNCg0KICAgICAgICByZXR1cm4gY2FsbF91c2VyX2Z1bmNfYXJyYXkoJ2ljb252X3N1YnN0cicsICRhcmdzKTsNCiAgICB9DQoNCiAgICByZXR1cm4gY2FsbF91c2VyX2Z1bmNfYXJyYXkoJ3N1YnN0cicsICRhcmdzKTsNCn0NCg0KLyoqDQogKiAg6I635Y+WVVRGOOagvOW8j+eahOWtl+espuS4sueahOWtkOS4si4NCiAqDQogKiBAcGFyYW0gc3RyaW5nICRzb3VyY2VzdHIg5rqQ5a2X56ym5LiyDQogKiBAcGFyYW0gaW50ICAgICRjdXRsZW5ndGgg5a2Q5Liy6ZW/5bqmDQogKg0KICogQHJldHVybiBzdHJpbmcNCiAqLw0KZnVuY3Rpb24gU3ViU3RyVVRGOCgkc291cmNlc3RyLCAkY3V0bGVuZ3RoKQ0Kew0KICAgIGlmIChmdW5jdGlvbl9leGlzdHMoJ21iX3N1YnN0cicpICYmIGZ1bmN0aW9uX2V4aXN0cygnbWJfaW50ZXJuYWxfZW5jb2RpbmcnKSkgew0KICAgICAgICBtYl9pbnRlcm5hbF9lbmNvZGluZygnVVRGLTgnKTsNCg0KICAgICAgICByZXR1cm4gbWJfc3Vic3RyKCRzb3VyY2VzdHIsIDAsICRjdXRsZW5ndGgpOw0KICAgIH0NCg0KICAgIGlmIChmdW5jdGlvbl9leGlzdHMoJ2ljb252X3N1YnN0cicpICYmIGZ1bmN0aW9uX2V4aXN0cygnaWNvbnZfc2V0X2VuY29kaW5nJykpIHsNCiAgICAgICAgY2FsbF91c2VyX2Z1bmMoJ2ljb252X3NldF9lbmNvZGluZycsICdpbnRlcm5hbF9lbmNvZGluZycsICJVVEYtOCIpOw0KICAgICAgICBjYWxsX3VzZXJfZnVuYygnaWNvbnZfc2V0X2VuY29kaW5nJywgJ291dHB1dF9lbmNvZGluZycsICJVVEYtOCIpOw0KDQogICAgICAgIHJldHVybiBpY29udl9zdWJzdHIoJHNvdXJjZXN0ciwgMCwgJGN1dGxlbmd0aCk7DQogICAgfQ0KDQogICAgJHJldCA9ICcnOw0KICAgICRpID0gMDsNCiAgICAkbiA9IDA7DQoNCiAgICAkc3RyX2xlbmd0aCA9IHN0cmxlbigkc291cmNlc3RyKTsgLy/lrZfnrKbkuLLnmoTlrZfoioLmlbANCg0KICAgIHdoaWxlICgoJG4gPCAkY3V0bGVuZ3RoKSAmJiAoJGkgPD0gJHN0cl9sZW5ndGgpKSB7DQogICAgICAgICR0ZW1wX3N0ciA9IHN1YnN0cigkc291cmNlc3RyLCAkaSwgMSk7DQogICAgICAgICRhc2NudW0gPSBvcmQoJHRlbXBfc3RyKTsgLy/lvpfliLDlrZfnrKbkuLLkuK3nrKwkaeS9jeWtl+espueahGFzY2lp56CBDQogICAgICAgIGlmICgkYXNjbnVtID49IDIyNCkgeyAvL+WmguaenEFTQ0lJ5L2N6auY5LiOMjI077yMDQogICAgICAgICAgICAkcmV0ID0gJHJldCAuIHN1YnN0cigkc291cmNlc3RyLCAkaSwgMyk7IC8v5qC55o2uVVRGLTjnvJbnoIHop4TojIPvvIzlsIYz5Liq6L+e57ut55qE5a2X56ym6K6h5Li65Y2V5Liq5a2X56ymDQogICAgICAgICAgICAkaSA9ICgkaSArIDMpOyAvL+WunumZhUJ5dGXorqHkuLozDQogICAgICAgICAgICAkbisrOyAvL+Wtl+S4sumVv+W6puiuoTENCiAgICAgICAgfSBlbHNlaWYgKCRhc2NudW0gPj0gMTkyKSB7IC8v5aaC5p6cQVNDSUnkvY3pq5jkuI4xOTLvvIwNCiAgICAgICAgICAgICRyZXQgPSAkcmV0IC4gc3Vic3RyKCRzb3VyY2VzdHIsICRpLCAyKTsgLy/moLnmja5VVEYtOOe8lueggeinhOiMg++8jOWwhjLkuKrov57nu63nmoTlrZfnrKborqHkuLrljZXkuKrlrZfnrKYNCiAgICAgICAgICAgICRpID0gKCRpICsgMik7IC8v5a6e6ZmFQnl0ZeiuoeS4ujINCiAgICAgICAgICAgICRuKys7IC8v5a2X5Liy6ZW/5bqm6K6hMQ0KICAgICAgICB9IGVsc2VpZiAoJGFzY251bSA+PSA2NSAmJiAkYXNjbnVtIDw9IDkwKSB7IC8v5aaC5p6c5piv5aSn5YaZ5a2X5q+N77yMDQogICAgICAgICAgICAkcmV0ID0gJHJldCAuIHN1YnN0cigkc291cmNlc3RyLCAkaSwgMSk7DQogICAgICAgICAgICAkaSA9ICgkaSArIDEpOyAvL+WunumZheeahEJ5dGXmlbDku43orqEx5LiqDQogICAgICAgICAgICAkbisrOyAvL+S9huiAg+iZkeaVtOS9k+e+juingu+8jOWkp+WGmeWtl+avjeiuoeaIkOS4gOS4qumrmOS9jeWtl+espg0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgLy/lhbbku5bmg4XlhrXkuIvvvIzljIXmi6zlsI/lhpnlrZfmr43lkozljYrop5LmoIfngrnnrKblj7fvvIwNCg0KICAgICAgICAgICAgJHJldCA9ICRyZXQgLiBzdWJzdHIoJHNvdXJjZXN0ciwgJGksIDEpOw0KICAgICAgICAgICAgJGkgPSAoJGkgKyAxKTsgLy/lrp7pmYXnmoRCeXRl5pWw6K6hMeS4qg0KICAgICAgICAgICAgJG4gPSAoJG4gKyAwLjUpOyAvL+Wwj+WGmeWtl+avjeWSjOWNiuinkuagh+eCueetieS4juWNiuS4qumrmOS9jeWtl+espuWuvS4uLg0KICAgICAgICB9DQogICAgICAgIC8qDQogICAgICAgIGlmICgkc3RyX2xlbmd0aCA+ICRjdXRsZW5ndGgpIHsNCiAgICAgICAgICAgICRyZXQgPSAkcmV0Ow0KICAgICAgICB9DQogICAgICAgICovDQogICAgfQ0KDQogICAgcmV0dXJuICRyZXQ7DQp9DQoNCi8qKg0KICogIFpCUOeJiOiOt+WPllVURjjmoLzlvI/nmoTlrZfnrKbkuLLnmoTlrZDkuLIuDQogKg0KICogQHBhcmFtIHN0cmluZyAkc291cmNlc3RyDQogKiBAcGFyYW0gaW50ICAgICRzdGFydA0KICoNCiAqIEByZXR1cm4gc3RyaW5nDQogKi8NCmZ1bmN0aW9uIFpicF9TdWJTdHIoJHNvdXJjZXN0ciwgJHN0YXJ0KQ0Kew0KICAgICRhcmdzID0gZnVuY19nZXRfYXJncygpOw0KICAgIHJldHVybiBjYWxsX3VzZXJfZnVuY19hcnJheSgnU3ViU3RyVVRGOF9TdGFydCcsICRhcmdzKTsNCn0NCg0KLyoqDQogKiAgWkJQ54mIU3RyTGVuLg0KICoNCiAqIEBwYXJhbSBzdHJpbmcgJHN0cmluZw0KICoNCiAqIEByZXR1cm4gc3RyaW5nDQogKi8NCmZ1bmN0aW9uIFpicF9TdHJMZW4oJHN0cmluZykNCnsNCiAgICBpZiAoZnVuY3Rpb25fZXhpc3RzKCdncmFwaGVtZV9zdHJsZW4nKSkgew0KICAgICAgICByZXR1cm4gZ3JhcGhlbWVfc3RybGVuKCRzdHJpbmcpOw0KICAgIH0NCiAgICBpZiAoZnVuY3Rpb25fZXhpc3RzKCdtYl9zdHJsZW4nKSAmJiBmdW5jdGlvbl9leGlzdHMoJ21iX2ludGVybmFsX2VuY29kaW5nJykpIHsNCiAgICAgICAgbWJfaW50ZXJuYWxfZW5jb2RpbmcoJ1VURi04Jyk7DQogICAgICAgIHJldHVybiBtYl9zdHJsZW4oJHN0cmluZyk7DQogICAgfQ0KICAgIGlmIChmdW5jdGlvbl9leGlzdHMoJ2ljb252X3N0cmxlbicpICYmIGZ1bmN0aW9uX2V4aXN0cygnaWNvbnZfc2V0X2VuY29kaW5nJykpIHsNCiAgICAgICAgY2FsbF91c2VyX2Z1bmMoJ2ljb252X3NldF9lbmNvZGluZycsICdpbnRlcm5hbF9lbmNvZGluZycsICJVVEYtOCIpOw0KICAgICAgICBjYWxsX3VzZXJfZnVuYygnaWNvbnZfc2V0X2VuY29kaW5nJywgJ291dHB1dF9lbmNvZGluZycsICJVVEYtOCIpOw0KICAgICAgICByZXR1cm4gaWNvbnZfc3RybGVuKCRzdHJpbmcpOw0KICAgIH0NCiAgICByZXR1cm4gc3RybGVuKCRzdHJpbmcpOw0KfQ0KDQovKioNCiAqICBaQlDniYhTdHJwb3MNCiAqDQogKiBAcGFyYW0gc3RyaW5nICRoYXlzdGFjaw0KICogQHBhcmFtIHN0cmluZyAkbmVlZGxlDQogKiBAcGFyYW0gaW50ICRvZmZzZXQNCiAqDQogKiBAcmV0dXJuIHN0cmluZw0KICovDQpmdW5jdGlvbiBaYnBfU3RycG9zKCRoYXlzdGFjaywgJG5lZWRsZSwgJG9mZnNldCA9IDApDQp7DQogICAgaWYgKGZ1bmN0aW9uX2V4aXN0cygnbWJfc3RycG9zJykgJiYgZnVuY3Rpb25fZXhpc3RzKCdtYl9pbnRlcm5hbF9lbmNvZGluZycpKSB7DQogICAgICAgIG1iX2ludGVybmFsX2VuY29kaW5nKCdVVEYtOCcpOw0KICAgICAgICByZXR1cm4gbWJfc3RycG9zKCRoYXlzdGFjaywgJG5lZWRsZSwgJG9mZnNldCk7DQogICAgfQ0KICAgIGlmIChmdW5jdGlvbl9leGlzdHMoJ2ljb252X3N0cnBvcycpICYmIGZ1bmN0aW9uX2V4aXN0cygnaWNvbnZfc2V0X2VuY29kaW5nJykpIHsNCiAgICAgICAgY2FsbF91c2VyX2Z1bmMoJ2ljb252X3NldF9lbmNvZGluZycsICdpbnRlcm5hbF9lbmNvZGluZycsICJVVEYtOCIpOw0KICAgICAgICBjYWxsX3VzZXJfZnVuYygnaWNvbnZfc2V0X2VuY29kaW5nJywgJ291dHB1dF9lbmNvZGluZycsICJVVEYtOCIpOw0KICAgICAgICByZXR1cm4gaWNvbnZfc3RycG9zKCRoYXlzdGFjaywgJG5lZWRsZSwgJG9mZnNldCk7DQogICAgfQ0KICAgIHJldHVybiBzdHJwb3MoJGhheXN0YWNrLCAkbmVlZGxlLCAkb2Zmc2V0KTsNCn0NCg0KLyoqDQogKiAgWkJQ54mIU3RyaXBvcw0KICoNCiAqIEBwYXJhbSBzdHJpbmcgJGhheXN0YWNrDQogKiBAcGFyYW0gc3RyaW5nICRuZWVkbGUNCiAqIEBwYXJhbSBpbnQgJG9mZnNldA0KICoNCiAqIEByZXR1cm4gc3RyaW5nDQogKi8NCmZ1bmN0aW9uIFpicF9TdHJpcG9zKCRoYXlzdGFjaywgJG5lZWRsZSwgJG9mZnNldCA9IDApDQp7DQogICAgaWYgKGZ1bmN0aW9uX2V4aXN0cygnbWJfc3RycG9zJykgJiYgZnVuY3Rpb25fZXhpc3RzKCdtYl9pbnRlcm5hbF9lbmNvZGluZycpKSB7DQogICAgICAgIG1iX2ludGVybmFsX2VuY29kaW5nKCdVVEYtOCcpOw0KICAgICAgICByZXR1cm4gbWJfc3RyaXBvcygkaGF5c3RhY2ssICRuZWVkbGUsICRvZmZzZXQpOw0KICAgIH0NCiAgICBpZiAoZnVuY3Rpb25fZXhpc3RzKCdpY29udl9zdHJwb3MnKSAmJiBmdW5jdGlvbl9leGlzdHMoJ2ljb252X3NldF9lbmNvZGluZycpKSB7DQogICAgICAgIGNhbGxfdXNlcl9mdW5jKCdpY29udl9zZXRfZW5jb2RpbmcnLCAnaW50ZXJuYWxfZW5jb2RpbmcnLCAiVVRGLTgiKTsNCiAgICAgICAgY2FsbF91c2VyX2Z1bmMoJ2ljb252X3NldF9lbmNvZGluZycsICdvdXRwdXRfZW5jb2RpbmcnLCAiVVRGLTgiKTsNCiAgICAgICAgJGhheXN0YWNrID0gc3RydG9sb3dlcigkaGF5c3RhY2spOw0KICAgICAgICAkbmVlZGxlID0gc3RydG9sb3dlcigkbmVlZGxlKTsNCiAgICAgICAgcmV0dXJuIGljb252X3N0cnBvcygkaGF5c3RhY2ssICRuZWVkbGUsICRvZmZzZXQpOw0KICAgIH0NCiAgICByZXR1cm4gc3RyaXBvcygkaGF5c3RhY2ssICRuZWVkbGUsICRvZmZzZXQpOw0KfQ0KDQovKioNCiAqIOaIquWPlkhUTUzmoLzlvI/nmoRVVEY45qC85byP55qE5a2X56ym5Liy55qE5a2Q5LiyLg0KICoNCiAqIEBwYXJhbSBzdHJpbmcgJHNvdXJjZSDmupDlrZfnrKbkuLINCiAqIEBwYXJhbSBpbnQgICAgJGxlbmd0aCDlrZDkuLLplb/luqYNCiAqDQogKiBAcmV0dXJuIHN0cmluZw0KICovDQpmdW5jdGlvbiBTdWJTdHJVVEY4X0h0bWwoJHNvdXJjZSwgJGxlbmd0aCkNCnsNCiAgICBpZiAoZnVuY3Rpb25fZXhpc3RzKCdtYl9zdWJzdHInKSAmJiBmdW5jdGlvbl9leGlzdHMoJ21iX2ludGVybmFsX2VuY29kaW5nJykpIHsNCiAgICAgICAgbWJfaW50ZXJuYWxfZW5jb2RpbmcoJ1VURi04Jyk7DQogICAgICAgICRqID0gbWJfc3RybGVuKCRzb3VyY2UpOw0KICAgICAgICAkcyA9IG1iX3N1YnN0cigkc291cmNlLCAwLCAkbGVuZ3RoKTsNCiAgICAgICAgJGwgPSBtYl9zdWJzdHJfY291bnQoJHMsICc8Jyk7DQogICAgICAgICRyID0gbWJfc3Vic3RyX2NvdW50KCRzLCAnPicpOw0KICAgICAgICBpZiAoJGwgPiAwICYmICRsID4gJHIpIHsNCiAgICAgICAgICAgIGZvciAoJGkgPSAkbGVuZ3RoOyAkaSA8ICRqOyAkaSsrKSB7DQogICAgICAgICAgICAgICAgJHMgLj0gbWJfc3Vic3RyKCRzb3VyY2UsICRpLCAxKTsNCiAgICAgICAgICAgICAgICBpZiAobWJfc3Vic3RyKCRzb3VyY2UsICRpLCAxKSA9PSAnPicpIHsNCiAgICAgICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgcmV0dXJuICRzOw0KICAgIH0NCg0KICAgIGlmIChmdW5jdGlvbl9leGlzdHMoJ2ljb252X3N1YnN0cicpICYmIGZ1bmN0aW9uX2V4aXN0cygnaWNvbnZfc2V0X2VuY29kaW5nJykpIHsNCiAgICAgICAgY2FsbF91c2VyX2Z1bmMoJ2ljb252X3NldF9lbmNvZGluZycsICdpbnRlcm5hbF9lbmNvZGluZycsICJVVEYtOCIpOw0KICAgICAgICBjYWxsX3VzZXJfZnVuYygnaWNvbnZfc2V0X2VuY29kaW5nJywgJ291dHB1dF9lbmNvZGluZycsICJVVEYtOCIpOw0KICAgICAgICAkaiA9IGljb252X3N0cmxlbigkc291cmNlKTsNCiAgICAgICAgJHMgPSBpY29udl9zdWJzdHIoJHNvdXJjZSwgMCwgJGxlbmd0aCk7DQogICAgICAgICRsID0gc3Vic3RyX2NvdW50KCRzLCAnPCcpOw0KICAgICAgICAkciA9IHN1YnN0cl9jb3VudCgkcywgJz4nKTsNCiAgICAgICAgaWYgKCRsID4gMCAmJiAkbCA+ICRyKSB7DQogICAgICAgICAgICBmb3IgKCRpID0gJGxlbmd0aDsgJGkgPCAkajsgJGkrKykgew0KICAgICAgICAgICAgICAgICRzIC49IGljb252X3N1YnN0cigkc291cmNlLCAkaSwgMSk7DQogICAgICAgICAgICAgICAgaWYgKGljb252X3N1YnN0cigkc291cmNlLCAkaSwgMSkgPT0gJz4nKSB7DQogICAgICAgICAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIHJldHVybiAkczsNCiAgICB9DQoNCiAgICAkaiA9IHN0cmxlbigkc291cmNlKTsNCiAgICAkcyA9IHN1YnN0cigkc291cmNlLCAwLCAkbGVuZ3RoKTsNCiAgICAkbCA9IHN1YnN0cl9jb3VudCgkcywgJzwnKTsNCiAgICAkciA9IHN1YnN0cl9jb3VudCgkcywgJz4nKTsNCiAgICBpZiAoJGwgPiAwICYmICRsID4gJHIpIHsNCiAgICAgICAgZm9yICgkaSA9ICRsZW5ndGg7ICRpIDwgJGo7ICRpKyspIHsNCiAgICAgICAgICAgICRzIC49IHN1YnN0cigkc291cmNlLCAkaSwgMSk7DQogICAgICAgICAgICBpZiAoc3Vic3RyKCRzb3VyY2UsICRpLCAxKSA9PSAnPicpIHsNCiAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIHJldHVybiAkczsNCn0NCg0KLyoqDQogKiDliKDpmaTmlofku7ZCT03lpLQuDQogKg0KICogQHBhcmFtIHN0cmluZyAkcyDmlofku7blhoXlrrkNCiAqDQogKiBAcmV0dXJuIHN0cmluZw0KICovDQpmdW5jdGlvbiBSZW1vdmVCT00oJHMpDQp7DQogICAgJGNoYXJzZXQgPSBhcnJheSgpOw0KICAgICRjaGFyc2V0WzFdID0gc3Vic3RyKCRzLCAwLCAxKTsNCiAgICAkY2hhcnNldFsyXSA9IHN1YnN0cigkcywgMSwgMSk7DQogICAgJGNoYXJzZXRbM10gPSBzdWJzdHIoJHMsIDIsIDEpOw0KICAgIGlmIChvcmQoJGNoYXJzZXRbMV0pID09IDIzOSAmJiBvcmQoJGNoYXJzZXRbMl0pID09IDE4NyAmJiBvcmQoJGNoYXJzZXRbM10pID09IDE5MSkgew0KICAgICAgICAkcyA9IHN1YnN0cigkcywgMyk7DQogICAgfQ0KDQogICAgcmV0dXJuICRzOw0KfQ0KDQovKioNCiAqIOiOt+WPluaMh+WumuaXtuWMuuWQjS4NCiAqDQogKiBAcGFyYW0gaW50ICR6IOaXtuWMuuWPtw0KICoNCiAqIEByZXR1cm4gc3RyaW5nIOaXtuWMuuWQjQ0KICoNCiAqIEBzaW5jZSAxLjMuMTQwNjE0DQogKi8NCmZ1bmN0aW9uIEdldFRpbWVab25lQnlHTVQoJHopDQp7DQogICAgJHRpbWV6b25lcyA9IGFycmF5KA0KICAgICAgICAtMTIgPT4gJ0V0Yy9HTVQrMTInLA0KICAgICAgICAtMTEgPT4gJ1BhY2lmaWMvTWlkd2F5JywNCiAgICAgICAgLTEwID0+ICdQYWNpZmljL0hvbm9sdWx1JywNCiAgICAgICAgLTkgID0+ICdBbWVyaWNhL0FuY2hvcmFnZScsDQogICAgICAgIC04ICA9PiAnQW1lcmljYS9Mb3NfQW5nZWxlcycsDQogICAgICAgIC03ICA9PiAnQW1lcmljYS9EZW52ZXInLA0KICAgICAgICAtNiAgPT4gJ0FtZXJpY2EvVGVndWNpZ2FscGEnLA0KICAgICAgICAtNSAgPT4gJ0FtZXJpY2EvTmV3X1lvcmsnLA0KICAgICAgICAtNCAgPT4gJ0FtZXJpY2EvSGFsaWZheCcsDQogICAgICAgIC0zICA9PiAnQW1lcmljYS9BcmdlbnRpbmEvQnVlbm9zX0FpcmVzJywNCiAgICAgICAgLTIgID0+ICdBdGxhbnRpYy9Tb3V0aF9HZW9yZ2lhJywNCiAgICAgICAgLTEgID0+ICdBdGxhbnRpYy9Bem9yZXMnLA0KICAgICAgICAwICAgPT4gJ1VUQycsDQogICAgICAgIDEgICA9PiAnRXVyb3BlL0JlcmxpbicsDQogICAgICAgIDIgICA9PiAnRXVyb3BlL1NvZmlhJywNCiAgICAgICAgMyAgID0+ICdBZnJpY2EvTmFpcm9iaScsDQogICAgICAgIDQgICA9PiAnRXVyb3BlL01vc2NvdycsDQogICAgICAgIDUgICA9PiAnQXNpYS9LYXJhY2hpJywNCiAgICAgICAgNiAgID0+ICdBc2lhL0RoYWthJywNCiAgICAgICAgNyAgID0+ICdBc2lhL0Jhbmdrb2snLA0KICAgICAgICA4ICAgPT4gJ0FzaWEvU2hhbmdoYWknLA0KICAgICAgICA5ICAgPT4gJ0FzaWEvVG9reW8nLA0KICAgICAgICAxMCAgPT4gJ1BhY2lmaWMvR3VhbScsDQogICAgICAgIDExICA9PiAnQXVzdHJhbGlhL1N5ZG5leScsDQogICAgICAgIDEyICA9PiAnUGFjaWZpYy9GaWppJywNCiAgICAgICAgMTMgID0+ICdQYWNpZmljL1RvbmdhdGFwdScsDQogICAgKTsNCiAgICBpZiAoIWlzc2V0KCR0aW1lem9uZXNbJHpdKSkgew0KICAgICAgICByZXR1cm4gJ1VUQyc7DQogICAgfQ0KDQogICAgcmV0dXJuICR0aW1lem9uZXNbJHpdOw0KfQ0KDQovKioNCiAqIOWvueaVsOe7hOWGheeahOWtl+espuS4sui/m+ihjGh0bWxzcGVjaWFsY2hhcnMuDQogKg0KICogQHBhcmFtIGFycmF5ICRhcnJheSDlvoXov4fmu6TlrZfnrKbkuLINCiAqDQogKiBAcmV0dXJuIGFycmF5DQogKg0KICogQHNpbmNlIDEuNA0KICovDQpmdW5jdGlvbiBodG1sc3BlY2lhbGNoYXJzX2FycmF5KCRhcnJheSkNCnsNCiAgICAkbmV3QXJyYXkgPSBhcnJheSgpOw0KICAgIGZvcmVhY2ggKCRhcnJheSBhcyAka2V5ID0+ICR2YWx1ZSkgew0KICAgICAgICAkbmV3S2V5ID0gaHRtbHNwZWNpYWxjaGFycygka2V5KTsNCiAgICAgICAgaWYgKGlzX2FycmF5KCR2YWx1ZSkpIHsNCiAgICAgICAgICAgICRuZXdBcnJheVskbmV3S2V5XSA9IGh0bWxzcGVjaWFsY2hhcnNfYXJyYXkoJHZhbHVlKTsNCiAgICAgICAgfSBlbHNlaWYgKGlzX3N0cmluZygkdmFsdWUpKSB7DQogICAgICAgICAgICAkbmV3QXJyYXlbJG5ld0tleV0gPSBodG1sc3BlY2lhbGNoYXJzKCR2YWx1ZSk7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICByZXR1cm4gJG5ld0FycmF5Ow0KfQ0KDQovKioNCiAqIOiOt+W+l+S4gOS4quWPquWQq+aVsOWtl+Wtl+avjeWSjC3nur/nmoRzdHJpbmcuDQogKg0KICogQHBhcmFtIHN0cmluZyAkcyDlvoXov4fmu6TlrZfnrKbkuLINCiAqDQogKiBAcmV0dXJuIHN0cmluZ3xzdHJpbmdbXQ0KICoNCiAqIEBzaW5jZSAxLjQNCiAqLw0KZnVuY3Rpb24gRmlsdGVyQ29ycmVjdE5hbWUoJHMpDQp7DQogICAgcmV0dXJuIHByZWdfcmVwbGFjZSgnfFteMC05YS16QS1aXy8tXXwnLCAnJywgJHMpOw0KfQ0KDQovKioNCiAqIOehruiupOS4gOS4quWvueixoeaYr+WQpuWPr+iiq+i9rOaNouS4unN0cmluZy4NCiAqDQogKiBAcGFyYW0gb2JqZWN0ICRvYmoNCiAqDQogKiBAcmV0dXJuIGJvb2wNCiAqDQogKiBAc2luY2UgMS40DQogKi8NCmZ1bmN0aW9uIENoZWNrQ2FuQmVTdHJpbmcoJG9iaikNCnsNCiAgICAvLyBGdWNrIFBIUCA1LjIhISEhDQogICAgLy8gcmV0dXJuICRvYmogPT09IG51bGwgfHwgaXNfc2NhbGFyKCRvYmopIHx8IGlzX2NhbGxhYmxlKFskb2JqLCAnX190b1N0cmluZyddKTsNCiAgICBpZiAoaXNfb2JqZWN0KCRvYmopICYmIG1ldGhvZF9leGlzdHMoJG9iaiwgJ19fdG9TdHJpbmcnKSkgew0KICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICB9DQoNCiAgICBpZiAoJG9iaiA9PT0gbnVsbCkgew0KICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICB9DQoNCiAgICByZXR1cm4gaXNfc2NhbGFyKCRvYmopOw0KfQ0KDQovKioNCiAqIOaehOmAoOW4plRva2Vu55qE5a6J5YWoVVJMLg0KICoNCiAqIEBwYXJhbSBzdHJpbmcgJHVybA0KICogQHBhcmFtIHN0cmluZyAkYXBwSWQg5bqU55SoSUTvvIzlj6/ku6XnlJ/miJDkuIDkuKrlupTnlKjkuJPlsZ7nmoRUb2tlbg0KICoNCiAqIEByZXR1cm4gc3RyaW5nDQogKg0KICogQHNpbmNlIDEuNS4yDQogKi8NCmZ1bmN0aW9uIEJ1aWxkU2FmZVVSTCgkdXJsLCAkYXBwSWQgPSAnJykNCnsNCiAgICBnbG9iYWwgJHpicDsNCiAgICBpZiAoc3RycG9zKCR1cmwsICc/JykgIT09IGZhbHNlKSB7DQogICAgICAgICR1cmwgLj0gJyZjc3JmVG9rZW49JzsNCiAgICB9IGVsc2Ugew0KICAgICAgICAkdXJsIC49ICc/Y3NyZlRva2VuPSc7DQogICAgfQ0KICAgIGlmIChzdWJzdHIoJHVybCwgMCwgMSkgPT09ICcvJykgew0KICAgICAgICAkdXJsID0gJHpicC0+aG9zdCAuIHN1YnN0cigkdXJsLCAxKTsNCiAgICB9DQogICAgJHVybCA9ICR1cmwgLiAkemJwLT5HZXRDU1JGVG9rZW4oJGFwcElkKTsNCg0KICAgIHJldHVybiAkdXJsOw0KfQ0KDQovKioNCiAqIOaehOmAoGNtZC5waHDnmoTorr/pl67pk77mjqUuDQogKg0KICogQHBhcmFtIHN0cmluZyAkcGFyYW10ZXJzIGNtZC5waHDlj4LmlbANCiAqDQogKiBAcmV0dXJuIGJvb2wNCiAqDQogKiBAc2luY2UgMS41LjINCiAqLw0KZnVuY3Rpb24gQnVpbGRTYWZlQ21kVVJMKCRwYXJhbXRlcnMpDQp7DQogICAgcmV0dXJuIEJ1aWxkU2FmZVVSTCgnL3piX3N5c3RlbS9jbWQucGhwPycgLiAkcGFyYW10ZXJzKTsNCn0NCg0KLyoqDQogKiDlrp7njrB1dGY4NG1iNOeahOi/h+a7pA0KICoNCiAqIEBwYXJhbSBzdHJpbmcgJHNxbA0KICoNCiAqIEByZXR1cm4gc3RyaW5nDQogKi8NCmZ1bmN0aW9uIHV0Zjg0bWJfZmlsdGVyKCYkc3FsKQ0Kew0KICAgICRzcWwgPSBwcmVnX3JlcGxhY2VfY2FsbGJhY2soIi9bXHh7MTAwMDB9LVx4ezEwRkZGRn1dL3UiLCAndXRmODRtYl9jb252ZXJ0VG9VQ1M0JywgJHNxbCk7DQp9DQoNCi8qKg0KICog5a6e546wdXRmODRtYueahGZpeEh0bWxTcGVjaWFsQ2hhcnMNCiAqDQogKiBAcmV0dXJuIHN0cmluZw0KICovDQpmdW5jdGlvbiB1dGY4NG1iX2ZpeEh0bWxTcGVjaWFsQ2hhcnMoKQ0Kew0KICAgIGdsb2JhbCAkYXJ0aWNsZTsNCiAgICAkYXJ0aWNsZS0+Q29udGVudCA9IHByZWdfcmVwbGFjZV9jYWxsYmFjaygiL1wmXCN4KFswLTlBLVpdezIsNn0pXDsvdSIsICd1dGY4NG1iX2NvbnZlcnRUb1VURjgnLCAkYXJ0aWNsZS0+Q29udGVudCk7DQogICAgJGFydGljbGUtPkludHJvID0gcHJlZ19yZXBsYWNlX2NhbGxiYWNrKCIvXCZcI3goWzAtOUEtWl17Miw2fSlcOy91IiwgJ3V0Zjg0bWJfY29udmVydFRvVVRGOCcsICRhcnRpY2xlLT5JbnRybyk7DQp9DQoNCi8qKg0KICog5a6e546wdXRmODRtYueahGNvbnZlcnRUb1VDUzQNCiAqDQogKiBAcGFyYW0gc3RyaW5nICRtYXRjaGVzDQogKg0KICogQHJldHVybiBzdHJpbmcNCiAqLw0KZnVuY3Rpb24gdXRmODRtYl9jb252ZXJ0VG9VQ1M0KCRtYXRjaGVzKQ0Kew0KICAgIHJldHVybiBzcHJpbnRmKCImI3glczsiLCBsdHJpbShzdHJ0b3VwcGVyKGJpbjJoZXgoaWNvbnYoJ1VURi04JywgJ1VDUy00JywgJG1hdGNoZXNbMF0pKSksICIwIikpOw0KfQ0KDQovKioNCiAqIOWunueOsHV0Zjg0bWLnmoRjb252ZXJ0VG9VVEY4DQogKg0KICogQHBhcmFtIHN0cmluZyAkbWF0Y2hlcw0KICoNCiAqIEByZXR1cm4gc3RyaW5nDQogKi8NCmZ1bmN0aW9uIHV0Zjg0bWJfY29udmVydFRvVVRGOCgkbWF0Y2hlcykNCnsNCiAgICByZXR1cm4gaWNvbnYoJ1VDUy00JywgJ1VURi04JywgaGV4MmJpbihzdHJfcGFkKCRtYXRjaGVzWzFdLCA4LCAiMCIsIFNUUl9QQURfTEVGVCkpKTsNCn0NCg0KLyoqDQogKiDpqozor4FXZWIgVG9rZW7mmK/lkKblkIjms5UuDQogKg0KICogQHBhcmFtICR3ZWJUb2tlblN0cmluZw0KICogQHBhcmFtICR3ZWJUb2tlbklkDQogKiBAcGFyYW0gc3RyaW5nICRrZXkNCiAqDQogKiBAcmV0dXJuIGJvb2wNCiAqLw0KZnVuY3Rpb24gVmVyaWZ5V2ViVG9rZW4oJHdlYlRva2VuU3RyaW5nLCAkd2ViVG9rZW5JZCwgJGtleSA9ICcnKQ0Kew0KICAgIGdsb2JhbCAkemJwOw0KICAgICRhcmdzID0gYXJyYXkoKTsNCiAgICBmb3IgKCRpID0gMzsgJGkgPCBmdW5jX251bV9hcmdzKCk7ICRpKyspIHsNCiAgICAgICAgJGFyZ3NbXSA9IGZ1bmNfZ2V0X2FyZygkaSk7DQogICAgfQ0KICAgICR0aW1lID0gc3Vic3RyKCR3ZWJUb2tlblN0cmluZywgNjQpOw0KICAgICR3dCA9IHN1YnN0cigkd2ViVG9rZW5TdHJpbmcsIDAsIDY0KTsNCiAgICBpZiAoJGtleSA9PSAnJykgew0KICAgICAgICAka2V5ID0gJHpicC0+Z3VpZDsNCiAgICB9DQogICAgJHNoYSA9IGhhc2hfaG1hYygnc2hhMjU2JywgJHRpbWUgLiAkd2ViVG9rZW5JZCAuIGltcGxvZGUoJGFyZ3MpLCAka2V5KTsNCiAgICBpZiAoJHd0ID09PSAkc2hhKSB7DQogICAgICAgIGlmICgkdGltZSA+IHRpbWUoKSkgew0KICAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICByZXR1cm4gZmFsc2U7DQp9DQoNCi8qKg0KICog5Yib5bu6V2ViIFRva2VuLg0KICoNCiAqIEBwYXJhbSAkd2ViVG9rZW5JZA0KICogQHBhcmFtICR0aW1lDQogKiBAcGFyYW0gc3RyaW5nICRrZXkNCiAqDQogKiBAcmV0dXJuIHN0cmluZw0KICovDQpmdW5jdGlvbiBDcmVhdGVXZWJUb2tlbigkd2ViVG9rZW5JZCwgJHRpbWUsICRrZXkgPSAnJykNCnsNCiAgICBnbG9iYWwgJHpicDsNCiAgICAkYXJncyA9IGFycmF5KCk7DQogICAgZm9yICgkaSA9IDM7ICRpIDwgZnVuY19udW1fYXJncygpOyAkaSsrKSB7DQogICAgICAgICRhcmdzW10gPSBmdW5jX2dldF9hcmcoJGkpOw0KICAgIH0NCiAgICBpZiAoJGtleSA9PSAnJykgew0KICAgICAgICAka2V5ID0gJHpicC0+Z3VpZDsNCiAgICB9DQogICAgJHRpbWUgPSAoaW50KSAkdGltZTsNCiAgICByZXR1cm4gaGFzaF9obWFjKCdzaGEyNTYnLCAkdGltZSAuICR3ZWJUb2tlbklkIC4gaW1wbG9kZSgkYXJncyksICRrZXkpIC4gJHRpbWU7DQp9DQoNCi8qKg0KICog5qOA5rWL5p2l5rqQ5piv5ZCm5ZCI5rOV77yM6L+Z5YyF5ousQ1NSRuajgOa1i++8jOWcqOW8gOWQr+WinuW8uuWuieWFqOaooeW8j+aXtuWKoOWFpeadpea6kOajgOa1iy4NCiAqDQogKiBAdGhyb3dzIEV4Y2VwdGlvbg0KICovDQpmdW5jdGlvbiBDaGVja0lzUmVmZXJlclZhbGlkKCkNCnsNCiAgICBnbG9iYWwgJHpicDsNCiAgICAkZmxhZyA9IENoZWNrQ1NSRlRva2VuVmFsaWQoKTsNCiAgICBpZiAoJGZsYWcgJiYgJHpicC0+b3B0aW9uWydaQ19BRERJVElPTkFMX1NFQ1VSSVRZJ10pIHsNCiAgICAgICAgJGZsYWcgPSBDaGVja0hUVFBSZWZlcmVyVmFsaWQoKTsNCiAgICB9DQoNCiAgICBpZiAoISRmbGFnKSB7DQogICAgICAgICR6YnAtPlNob3dFcnJvcig1LCBfX0ZJTEVfXywgX19MSU5FX18pOw0KICAgICAgICBleGl0Ow0KICAgIH0NCn0NCg0KLyoqDQogKiDpqozor4FDU1JGIFRva2Vu5piv5ZCm5ZCI5rOVLg0KICoNCiAqIEBwYXJhbSBzdHJpbmcgJGZpZWxkTmFtZQ0KICogQHBhcmFtIGFycmF5ICAkbWV0aG9kcw0KICoNCiAqIEByZXR1cm4gYm9vbA0KICovDQpmdW5jdGlvbiBDaGVja0NTUkZUb2tlblZhbGlkKCRmaWVsZE5hbWUgPSAnY3NyZlRva2VuJywgJG1ldGhvZHMgPSBhcnJheSgnZ2V0JywgJ3Bvc3QnKSkNCnsNCiAgICBnbG9iYWwgJHpicDsNCiAgICAkZmxhZyA9IGZhbHNlOw0KICAgIGlmIChpc19zdHJpbmcoJG1ldGhvZHMpKSB7DQogICAgICAgICRtZXRob2RzID0gYXJyYXkoJG1ldGhvZHMpOw0KICAgIH0NCiAgICBmb3JlYWNoICgkbWV0aG9kcyBhcyAkbWV0aG9kKSB7DQogICAgICAgIGlmICgkemJwLT5WZXJpZnlDU1JGVG9rZW4oR2V0VmFycygkZmllbGROYW1lLCAkbWV0aG9kKSkpIHsNCiAgICAgICAgICAgICRmbGFnID0gdHJ1ZTsNCiAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgcmV0dXJuICRmbGFnOw0KfQ0KDQovKioNCiAqIOajgOa1i0hUVFAgUmVmZXJlcuaYr+WQpuWQiOazlS4NCiAqDQogKiBAcmV0dXJuIGJvb2wNCiAqLw0KZnVuY3Rpb24gQ2hlY2tIVFRQUmVmZXJlclZhbGlkKCkNCnsNCiAgICBnbG9iYWwgJGJsb2dob3N0Ow0KICAgICRyZWZlcmVyID0gR2V0VmFycygnSFRUUF9SRUZFUkVSJywgJ1NFUlZFUicpOw0KICAgIGlmICh0cmltKCRyZWZlcmVyKSA9PT0gJycpIHsNCiAgICAgICAgcmV0dXJuIHRydWU7DQogICAgfQ0KICAgICRzID0gJGJsb2dob3N0Ow0KICAgICRzID0gc3RyX3JlcGxhY2UoJzo4MC8nLCAnLycsICRzKTsNCiAgICAkcyA9IHN0cl9yZXBsYWNlKCc6NDQzLycsICcvJywgJHMpOw0KICAgIGlmIChzdHJpcG9zKCRyZWZlcmVyLCAkcykgPT09IGZhbHNlKSB7DQogICAgICAgIHJldHVybiBmYWxzZTsNCiAgICB9DQoNCiAgICByZXR1cm4gdHJ1ZTsNCn0NCg0KLyoqDQogKiDmuIXpmaTkuIDkuLLku6PnoIHlhoXmiYDmnInnmoRQSFDku6PnoIENCiAqDQogKiBAcGFyYW0gc3RyaW5nICRjb2RlDQogKg0KICogQHJldHVybiBzdHJpbmcNCiAqLw0KZnVuY3Rpb24gUmVtb3ZlUEhQQ29kZSgkY29kZSkNCnsNCiAgICAvLyBQSFAgU3RhcnQgdGFnczogPD9waHAgPD8gPD89DQogICAgLy8gUEhQIDUgc3VwcG9ydHM6IDwlIDxzY3JpcHQgbGFuZ3VhZ2U9InBocCI+DQogICAgLy8gRGVwZW5kcyBvbiBQSFANCiAgICAkY29udGludWUgPSB0cnVlOw0KICAgIHdoaWxlICgkY29udGludWUpIHsNCiAgICAgICAgJHRva2VucyA9IHRva2VuX2dldF9hbGwoJGNvZGUpOw0KICAgICAgICAkY29udGludWUgPSBmYWxzZTsNCiAgICAgICAgZm9yZWFjaCAoJHRva2VucyBhcyAkdHQpIHsNCiAgICAgICAgICAgICRuYW1lID0gaXNfbnVtZXJpYygkdHRbMF0pID8gdG9rZW5fbmFtZSgkdHRbMF0pIDogJyc7DQogICAgICAgICAgICBpZiAoJG5hbWUgPT09ICdUX09QRU5fVEFHJyB8fCAkbmFtZSA9PT0gJ1RfT1BFTl9UQUdfV0lUSF9FQ0hPJyB8fCAkbmFtZSA9PT0gJ1RfQ0xPU0VfVEFHJykgew0KICAgICAgICAgICAgICAgICRjb2RlID0gc3RyX3JlcGxhY2UoJHR0WzFdLCAiIiwgJGNvZGUpOw0KICAgICAgICAgICAgICAgICRjb250aW51ZSA9IHRydWU7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICB9DQoNCiAgICByZXR1cm4gJGNvZGU7DQp9DQoNCi8qKg0KICog5ou/5YiwSUTmlbDnu4RieUxpc3TliJfooagNCiAqDQogKiBAcGFyYW0gYXJyYXkgJGFycmF5DQogKiBAcGFyYW0gc3RyaW5nICRrZXluYW1lDQogKg0KICogQHJldHVybiBhcnJheQ0KICovDQpmdW5jdGlvbiBHZXRJREFycmF5QnlMaXN0KCRhcnJheSwgJGtleW5hbWUgPSBudWxsKQ0Kew0KICAgICRpZHMgPSBhcnJheSgpOw0KICAgIGZvcmVhY2ggKCRhcnJheSBhcyAka2V5ID0+ICR2YWx1ZSkgew0KICAgICAgICBpZiAoJGtleW5hbWUgPT0gbnVsbCkgew0KICAgICAgICAgICAgJGlkc1tdID0gcmVzZXQoJHZhbHVlLT5HZXREYXRhKCkpOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgJGEgPSAkdmFsdWUtPkdldERhdGEoKTsNCiAgICAgICAgICAgICRpZHNbXSA9ICRhWyRrZXluYW1lXTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIHJldHVybiAkaWRzOw0KfQ0KDQovKioNCiAqIOaLv+WIsOWQjuWPsOeahENTUCBIZWFlZGVyDQogKg0KICogQHJldHVybiBzdHJpbmcNCiAqLw0KZnVuY3Rpb24gR2V0QmFja2VuZENTUEhlYWRlcigpDQp7DQogICAgJGRlZmF1bHRDU1AgPSBhcnJheSgNCiAgICAgICAgJ2RlZmF1bHQtc3JjJyA9PiAiJ3NlbGYnIGRhdGE6IGJsb2I6IiwNCiAgICAgICAgJ2ltZy1zcmMnICAgICA9PiAiKiBkYXRhOiBibG9iOiIsDQogICAgICAgICdtZWRpYS1zcmMnICAgPT4gIiogZGF0YTogYmxvYjoiLA0KICAgICAgICAnc2NyaXB0LXNyYycgID0+ICInc2VsZicgJ3Vuc2FmZS1pbmxpbmUnICd1bnNhZmUtZXZhbCciLA0KICAgICAgICAnc3R5bGUtc3JjJyAgID0+ICInc2VsZicgJ3Vuc2FmZS1pbmxpbmUnIiwNCiAgICApOw0KICAgIGZvcmVhY2ggKCRHTE9CQUxTWydob29rcyddWydGaWx0ZXJfUGx1Z2luX0NTUF9CYWNrZW5kJ10gYXMgJGZwbmFtZSA9PiAmJGZwc2lnbmFsKSB7DQogICAgICAgICRmcHJldHVybiA9ICRmcG5hbWUoJGRlZmF1bHRDU1ApOw0KICAgIH0NCiAgICAkcmV0ID0gYXJyYXkoKTsNCiAgICBmb3JlYWNoICgkZGVmYXVsdENTUCBhcyAka2V5ID0+ICR2YWx1ZSkgew0KICAgICAgICAkcmV0W10gPSAka2V5IC4gJyAnIC4gJHZhbHVlOw0KICAgIH0NCg0KICAgIHJldHVybiBpbXBsb2RlKCc7ICcsICRyZXQpOw0KfQ0KDQovKioNCiAqIOajgOafpemHjeWkjeWKoOi9veeahC4NCiAqDQogKiBAcGFyYW0gc3RyaW5nICRmaWxlDQogKg0KICogQHJldHVybiBib29sZWFuDQogKi8NCmZ1bmN0aW9uIENoZWNrSW5jbHVkZWRGaWxlcygkZmlsZSkNCnsNCiAgICAkYSA9IGdldF9pbmNsdWRlZF9maWxlcygpOw0KICAgICRmaWxlID0gc3RyX3JlcGxhY2UoJ1xcJywgJy8nLCAkZmlsZSk7DQogICAgZm9yZWFjaCAoJGEgYXMgJGtleSA9PiAkdmFsdWUpIHsNCiAgICAgICAgJGFbJGtleV0gPSB0cmltKHN0cl9yZXBsYWNlKCdcXCcsICcvJywgJHZhbHVlKSk7DQogICAgfQ0KDQogICAgcmV0dXJuIGluX2FycmF5KHRyaW0oJGZpbGUpLCAkYSk7DQp9DQoNCi8qKg0KICogTG9nc+aMh+WumueahOWPmOmHj+eahOWAvA0KICovDQpmdW5jdGlvbiBMb2dzX0R1bXAoKQ0Kew0KICAgICRhID0gZnVuY19nZXRfYXJncygpOw0KICAgIGZvcmVhY2ggKCRhIGFzICRrZXkgPT4gJHZhbHVlKSB7DQogICAgICAgICRzID0gdmFyX2V4cG9ydCgkdmFsdWUsIHRydWUpOw0KICAgICAgICBMb2dzKCRzKTsNCiAgICB9DQp9DQoNCi8qKg0KICog5Lit5paH5LiO54m55q6K5a2X56ym5Y+L5aW955qEIEpTT04g57yW56CBLg0KICoNCiAqIEBwYXJhbSBhcnJheSAkYXJyDQogKg0KICogQHJldHVybiBzdHJpbmcNCiAqLw0KZnVuY3Rpb24gSnNvbkVuY29kZSgkYXJyKQ0Kew0KICAgIFJlY0h0bWxTcGVjaWFsQ2hhcnMoJGFycik7DQoNCiAgICBpZiAodmVyc2lvbl9jb21wYXJlKFBIUF9WRVJTSU9OLCAnNS40LjAnLCAnPCcpKSB7DQogICAgICAgIHJldHVybiBzdHJfaXJlcGxhY2UoDQogICAgICAgICAgICAnXFwvJywNCiAgICAgICAgICAgICcvJywNCiAgICAgICAgICAgIHByZWdfcmVwbGFjZV9jYWxsYmFjaygNCiAgICAgICAgICAgICAgICAnI1xcXHUoWzAtOWEtZl17NH0pI2knLA0KICAgICAgICAgICAgICAgICdVY3MyVXRmOCcsDQogICAgICAgICAgICAgICAganNvbl9lbmNvZGUoJGFycikNCiAgICAgICAgICAgICkNCiAgICAgICAgKTsNCiAgICB9IGVsc2Ugew0KICAgICAgICByZXR1cm4gY2FsbF91c2VyX2Z1bmMoJ2pzb25fZW5jb2RlJywgJGFyciwgKEpTT05fVU5FU0NBUEVEX1VOSUNPREUgfCBKU09OX1VORVNDQVBFRF9TTEFTSEVTKSk7DQogICAgfQ0KfQ0KDQovKioNCiAqIFVDUy0yQkUg6L2sIFVURi0477yM6Kej5YazIEpTT04g5Lit5paH6L2s56CB6Zeu6aKYLg0KICoNCiAqIEBwYXJhbSAkbWF0Y2hzDQogKg0KICogQHJldHVybiBmYWxzZXxzdHJpbmcNCiAqLw0KZnVuY3Rpb24gVWNzMlV0ZjgoJG1hdGNocykNCnsNCiAgICByZXR1cm4gaWNvbnYoJ1VDUy0yQkUnLCAnVVRGLTgnLCBwYWNrKCdINCcsICRtYXRjaHNbMV0pKTsNCn0NCg0KLyoqDQogKiDpgJLlvZLovazkuYkgSFRNTCDlrp7kvZMuDQogKg0KICogQHBhcmFtIGFycmF5ICRhcnINCiAqLw0KZnVuY3Rpb24gUmVjSHRtbFNwZWNpYWxDaGFycygmJGFycikNCnsNCiAgICBpZiAoaXNfYXJyYXkoJGFycikpIHsNCiAgICAgICAgZm9yZWFjaCAoJGFyciBhcyAmJHZhbHVlKSB7DQogICAgICAgICAgICBpZiAoaXNfYXJyYXkoJHZhbHVlKSkgew0KICAgICAgICAgICAgICAgIFJlY0h0bWxTcGVjaWFsQ2hhcnMoJHZhbHVlKTsNCiAgICAgICAgICAgIH0gZWxzZWlmIChpc19zdHJpbmcoJHZhbHVlKSkgew0KICAgICAgICAgICAgICAgICR2YWx1ZSA9IGh0bWxzcGVjaWFsY2hhcnMoJHZhbHVlKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgIH0NCn0NCg0KLyoqDQogKiDliKTmlq3mlbDnu4TmmK/lkKblt7Lnu4/mnIkka2V55LqG77yM5aaC5p6c5rKh5pyJ5bCxc2V05LiA5qyhJGRlZmF1bHQNCiAqLw0KZnVuY3Rpb24gQXJyYXlfSXNzZXQoJiRhcnJheSwgJGtleSwgJGRlZmF1bHQpDQp7DQogICAgaWYgKCFhcnJheV9rZXlfZXhpc3RzKCRrZXksICRhcnJheSkpIHsNCiAgICAgICAgJGFycmF5WyRrZXldID0gJGRlZmF1bHQ7DQogICAgfQ0KICAgIHJldHVybiB0cnVlOw0KfQ0KDQovKioNCiAqIOS7jiBIVE1MIOS4reiOt+WPluaJgOacieWbvueJhy4NCiAqDQogKiBAcGFyYW0gIHN0cmluZyAkaHRtbA0KICogQHJldHVybiBhcnJheQ0KICovDQpmdW5jdGlvbiBHZXRJbWFnZXNGcm9tSHRtbCgkaHRtbCkNCnsNCiAgICAkcGF0dGVybiA9ICIvPGltZy4qP3NyYz1bXFwnfFwiXSguKj8pW1xcJ3xcIl0uKj9bXFwvXT8+LyI7DQogICAgcHJlZ19tYXRjaF9hbGwoJHBhdHRlcm4sIGh0bWxzcGVjaWFsY2hhcnNfZGVjb2RlKCRodG1sKSwgJG1hdGNoZXMpOw0KICAgIHJldHVybiBpc19hcnJheSgkbWF0Y2hlc1sxXSkgPyBhcnJheV91bmlxdWUoJG1hdGNoZXNbMV0pIDogYXJyYXkoKTsNCn0NCg0KLyoqDQogKiDliKTmlq0gVVJMIOaYr+WQpuS4uuacrOWcsC4NCiAqDQogKiBAcmV0dXJuIGFycmF5DQogKi8NCmZ1bmN0aW9uIENoZWNrVXJsSXNMb2NhbCgkdXJsKQ0Kew0KICAgIGdsb2JhbCAkemJwOw0KDQogICAgcmV0dXJuIHN1YnN0cigkdXJsLCAwLCBzdHJsZW4oJHpicC0+aG9zdCkpID09PSAkemJwLT5ob3N0Ow0KfQ0KDQovKioNCiAqIOaKiiBVUkwg5Lit55qEIEhvc3Qg6L2s5o2i5Li65pys5Zyw6Lev5b6ELg0KICoNCiAqIEBwYXJhbSBzdHJpbmcgJHVybA0KICogQHJldHVybiBzdHJpbmcNCiAqLw0KZnVuY3Rpb24gVXJsSG9zdFRvUGF0aCgkdXJsKQ0Kew0KICAgIGdsb2JhbCAkemJwOw0KDQogICAgaWYgKCEgQ2hlY2tVcmxJc0xvY2FsKCR1cmwpKSB7DQogICAgICAgIHJldHVybiAkdXJsOw0KICAgIH0NCg0KICAgIHJldHVybiBaQlBfUEFUSCAuIHN1YnN0cigkdXJsLCBzdHJsZW4oJHpicC0+aG9zdCkpOw0KfQ0K</file>
	<file name='zb_system\function\c_system_base.php' crc32='42BCAE9E'  dt:dt='bin.base64'>PD9waHANCg0KLyoqDQogKiDns7vnu5/liJ3lp4vljJbnrYnnm7jlhbPmk43kvZwuDQogKi8NCg0KLyoqDQogKiBaQkxPR1BIUA0KICoNCiAqIEB2YXIgWkJsb2dQSFA7DQogKi8NCiR6YnAgPSBudWxsOw0KDQplcnJvcl9yZXBvcnRpbmcoRV9BTEwpOw0Kb2Jfc3RhcnQoKTsNCg0KZGVmaW5lZCgnWkJQX1BBVEgnKSB8fCBkZWZpbmUoJ1pCUF9QQVRIJywgcnRyaW0oc3RyX3JlcGxhY2UoJ1xcJywgJy8nLCByZWFscGF0aChkaXJuYW1lKF9fRklMRV9fKSAuICcvLi4vLi4vJykpLCAnLycpIC4gJy8nKTsNCmRlZmluZWQoJ1pCUF9IT09LRVJST1InKSB8fCBkZWZpbmUoJ1pCUF9IT09LRVJST1InLCB0cnVlKTsNCmRlZmluZWQoJ1pCUF9TQUZFTU9ERScpIHx8IGRlZmluZSgnWkJQX1NBRkVNT0RFJywgZmFsc2UpOw0KDQovKioNCiAqIOWKoOi9veezu+e7n+WfuuehgOWHveaVsC4NCiAqLw0KcmVxdWlyZSBaQlBfUEFUSCAuICd6Yl9zeXN0ZW0vZnVuY3Rpb24vY19zeXN0ZW1fdmVyc2lvbi5waHAnOw0KcmVxdWlyZSBaQlBfUEFUSCAuICd6Yl9zeXN0ZW0vZnVuY3Rpb24vY19zeXN0ZW1fY29tcGF0LnBocCc7DQpyZXF1aXJlIFpCUF9QQVRIIC4gJ3piX3N5c3RlbS9mdW5jdGlvbi9jX3N5c3RlbV9wbHVnaW4ucGhwJzsNCnJlcXVpcmUgWkJQX1BBVEggLiAnemJfc3lzdGVtL2Z1bmN0aW9uL2Nfc3lzdGVtX2RlYnVnLnBocCc7DQpyZXF1aXJlIFpCUF9QQVRIIC4gJ3piX3N5c3RlbS9mdW5jdGlvbi9jX3N5c3RlbV9jb21tb24ucGhwJzsNCnJlcXVpcmUgWkJQX1BBVEggLiAnemJfc3lzdGVtL2Z1bmN0aW9uL2Nfc3lzdGVtX2Z1bmN0aW9uLnBocCc7DQpyZXF1aXJlIFpCUF9QQVRIIC4gJ3piX3N5c3RlbS9mdW5jdGlvbi9jX3N5c3RlbV9yb3V0ZS5waHAnOw0KcmVxdWlyZSBaQlBfUEFUSCAuICd6Yl9zeXN0ZW0vZnVuY3Rpb24vY19zeXN0ZW1fZXZlbnQucGhwJzsNCnJlcXVpcmUgWkJQX1BBVEggLiAnemJfc3lzdGVtL2Z1bmN0aW9uL2Nfc3lzdGVtX2FwaS5waHAnOw0KDQpzcGxfYXV0b2xvYWRfcmVnaXN0ZXIoJ0F1dG9sb2FkQ2xhc3MnKTsNCg0KLyoNCiAqIOWumuS5ieezu+e7n+WPmOmHjw0KICovDQovKg0KICog5pON5L2c57O757ufDQogKi8NCmRlZmluZSgnU1lTVEVNX1VOS05PV04nLCAwKTsNCmRlZmluZSgnU1lTVEVNX1dJTkRPV1MnLCAxKTsNCmRlZmluZSgnU1lTVEVNX1VOSVgnLCAyKTsNCmRlZmluZSgnU1lTVEVNX0xJTlVYJywgMyk7DQpkZWZpbmUoJ1NZU1RFTV9EQVJXSU4nLCA0KTsNCmRlZmluZSgnU1lTVEVNX0NZR1dJTicsIDUpOw0KZGVmaW5lKCdTWVNURU1fQlNEJywgNik7DQovKg0KICog572R56uZ5pyN5Yqh5ZmoDQogKi8NCmRlZmluZSgnU0VSVkVSX1VOS05PV04nLCAwKTsNCmRlZmluZSgnU0VSVkVSX0FQQUNIRScsIDEpOw0KZGVmaW5lKCdTRVJWRVJfSUlTJywgMik7DQpkZWZpbmUoJ1NFUlZFUl9OR0lOWCcsIDMpOw0KZGVmaW5lKCdTRVJWRVJfTElHSFRUUEQnLCA0KTsNCmRlZmluZSgnU0VSVkVSX0tBTkdMRScsIDUpOw0KZGVmaW5lKCdTRVJWRVJfQ0FERFknLCA2KTsNCmRlZmluZSgnU0VSVkVSX0JVSUxUSU4nLCA3KTsNCi8qDQogKiBQSFDlvJXmk44NCiAqLw0KZGVmaW5lKCdFTkdJTkVfUEhQJywgMSk7DQpkZWZpbmUoJ0VOR0lORV9ISFZNJywgMik7DQpkZWZpbmUoJ1BIUF9TWVNURU0nLCBHZXRTeXN0ZW0oKSk7DQpkZWZpbmUoJ1BIUF9TRVJWRVInLCBHZXRXZWJTZXJ2ZXIoKSk7DQpkZWZpbmUoJ1BIUF9FTkdJTkUnLCBFTkdJTkVfUEhQKTsNCmRlZmluZSgnSVNfWDY0JywgKFBIUF9JTlRfU0laRSA9PT0gOCkpOw0KLyoNCiAqIOWmguaenOaDs+iOt+WPluWHhuehrueahOWAvO+8jOivt3picC0+TG9hZOWQjuS9v+eUqCR6YnAtPmlzSHR0cHMNCiAqIOatpOWkhOS7heS4uuW9k+WJjeezu+e7n+eOr+Wig+ajgOa1iw0KICovDQpkZWZpbmUoJ0hUVFBfU0NIRU1FJywgR2V0U2NoZW1lKCRfU0VSVkVSKSk7DQovKg0KICog5YW85a655oCn562W55WlDQogKi8NCmRlZmluZSgnSVNfV0lORE9XUycsIFBIUF9TWVNURU0gPT09IFNZU1RFTV9XSU5ET1dTKTsNCmRlZmluZSgnSVNfVU5JWCcsIFBIUF9TWVNURU0gPT09IFNZU1RFTV9VTklYKTsNCmRlZmluZSgnSVNfTElOVVgnLCBQSFBfU1lTVEVNID09PSBTWVNURU1fTElOVVgpOw0KZGVmaW5lKCdJU19EQVJXSU4nLCBQSFBfU1lTVEVNID09PSBTWVNURU1fREFSV0lOKTsNCmRlZmluZSgnSVNfQ1lHV0lOJywgUEhQX1NZU1RFTSA9PT0gU1lTVEVNX0NZR1dJTik7DQpkZWZpbmUoJ0lTX0JTRCcsIFBIUF9TWVNURU0gPT09IFNZU1RFTV9CU0QpOw0KZGVmaW5lKCdJU19BUEFDSEUnLCBQSFBfU0VSVkVSID09PSBTRVJWRVJfQVBBQ0hFKTsNCmRlZmluZSgnSVNfSUlTJywgUEhQX1NFUlZFUiA9PT0gU0VSVkVSX0lJUyk7DQpkZWZpbmUoJ0lTX05HSU5YJywgUEhQX1NFUlZFUiA9PT0gU0VSVkVSX05HSU5YKTsNCmRlZmluZSgnSVNfTElHSFRUUEQnLCBQSFBfU0VSVkVSID09PSBTRVJWRVJfTElHSFRUUEQpOw0KZGVmaW5lKCdJU19LQU5HTEUnLCBQSFBfU0VSVkVSID09PSBTRVJWRVJfS0FOR0xFKTsNCmRlZmluZSgnSVNfQ0FERFknLCBQSFBfU0VSVkVSID09PSBTRVJWRVJfQ0FERFkpOw0KZGVmaW5lKCdJU19CVUlMVElOJywgUEhQX1NFUlZFUiA9PT0gU0VSVkVSX0JVSUxUSU4pOw0KZGVmaW5lKCdJU19ISFZNJywgUEhQX0VOR0lORSA9PT0gRU5HSU5FX0hIVk0pOw0KDQpkZWZpbmUoJ0lTX0NMSScsIHBocF9zYXBpX25hbWUoKSA9PT0gJ2NsaScpOw0KLyoNCiAqIOWumuS5ieaWh+eroOexu+Weiw0KICovDQpkZWZpbmUoJ1pDX1BPU1RfVFlQRV9BUlRJQ0xFJywgMCk7IC8vIOaWh+eroA0KZGVmaW5lKCdaQ19QT1NUX1RZUEVfUEFHRScsIDEpOyAvLyDpobXpnaINCmRlZmluZSgnWkNfUE9TVF9UWVBFX1RXRUVUJywgMik7IC8vIOS4gOWPpeivnQ0KZGVmaW5lKCdaQ19QT1NUX1RZUEVfRElTQ1VTU0lPTicsIDMpOyAvLyDorqjorroNCmRlZmluZSgnWkNfUE9TVF9UWVBFX0xJTksnLCA0KTsgLy8g6ZO+5o6lDQpkZWZpbmUoJ1pDX1BPU1RfVFlQRV9NVVNJQycsIDUpOyAvLyDpn7PkuZANCmRlZmluZSgnWkNfUE9TVF9UWVBFX1ZJREVPJywgNik7IC8vIOinhumikQ0KZGVmaW5lKCdaQ19QT1NUX1RZUEVfUEhPVE8nLCA3KTsgLy8g54Wn54mHDQpkZWZpbmUoJ1pDX1BPU1RfVFlQRV9BTEJVTScsIDgpOyAvLyDnm7jlhowNCg0KLyoNCiAqIOWumuS5ieexu+Wei+W6j+WIlw0KICogQHBhcmFtICBpZD0+e25hbWUsdXJsLHRlbXBsYXRlLGNsYXNzbmFtZX0NCiAqLw0KJEdMT0JBTFNbJ3Bvc3R0eXBlJ10gPSBhcnJheSgNCiAgICBhcnJheSgnbmFtZScgPT4gJ2FydGljbGUnLCAnc2luZ2xlX3VybHJ1bGUnID0+ICcnLCAndGVtcGxhdGUnID0+ICcnLCAnY2xhc3NuYW1lJyA9PiAnUG9zdCcsICdhY3Rpb25zJyA9PiBhcnJheSgpLCAncm91dGVzJyA9PiBhcnJheSgpKSwgLy8wDQogICAgYXJyYXkoJ25hbWUnID0+ICdwYWdlJywgJ3NpbmdsZV91cmxydWxlJyA9PiAnJywgJ3RlbXBsYXRlJyA9PiAnJywgJ2NsYXNzbmFtZScgPT4gJ1Bvc3QnLCAnYWN0aW9ucycgPT4gYXJyYXkoKSwgJ3JvdXRlcycgPT4gYXJyYXkoKSksIC8vMQ0KICAgIGFycmF5KCduYW1lJyA9PiAndHdlZXQnLCAnc2luZ2xlX3VybHJ1bGUnID0+ICcnLCAndGVtcGxhdGUnID0+ICcnLCAnY2xhc3NuYW1lJyA9PiAnUG9zdCcsICdhY3Rpb25zJyA9PiBhcnJheSgpLCAncm91dGVzJyA9PiBhcnJheSgpKSwgLy8yDQogICAgYXJyYXkoJ25hbWUnID0+ICdkaXNjdXNzaW9uJywgJ3NpbmdsZV91cmxydWxlJyA9PiAnJywgJ3RlbXBsYXRlJyA9PiAnJywgJ2NsYXNzbmFtZScgPT4gJ1Bvc3QnLCAnYWN0aW9ucycgPT4gYXJyYXkoKSwgJ3JvdXRlcycgPT4gYXJyYXkoKSksIC8vMw0KICAgIGFycmF5KCduYW1lJyA9PiAnbGluaycsICdzaW5nbGVfdXJscnVsZScgPT4gJycsICd0ZW1wbGF0ZScgPT4gJycsICdjbGFzc25hbWUnID0+ICdQb3N0JywgJ2FjdGlvbnMnID0+IGFycmF5KCksICdyb3V0ZXMnID0+IGFycmF5KCkpLCAvLzQNCiAgICBhcnJheSgnbmFtZScgPT4gJ211c2ljJywgJ3NpbmdsZV91cmxydWxlJyA9PiAnJywgJ3RlbXBsYXRlJyA9PiAnJywgJ2NsYXNzbmFtZScgPT4gJ1Bvc3QnLCAnYWN0aW9ucycgPT4gYXJyYXkoKSwgJ3JvdXRlcycgPT4gYXJyYXkoKSksIC8vNQ0KICAgIGFycmF5KCduYW1lJyA9PiAndmlkZW8nLCAnc2luZ2xlX3VybHJ1bGUnID0+ICcnLCAndGVtcGxhdGUnID0+ICcnLCAnY2xhc3NuYW1lJyA9PiAnUG9zdCcsICdhY3Rpb25zJyA9PiBhcnJheSgpLCAncm91dGVzJyA9PiBhcnJheSgpKSwgLy82DQogICAgYXJyYXkoJ25hbWUnID0+ICdwaG90bycsICdzaW5nbGVfdXJscnVsZScgPT4gJycsICd0ZW1wbGF0ZScgPT4gJycsICdjbGFzc25hbWUnID0+ICdQb3N0JywgJ2FjdGlvbnMnID0+IGFycmF5KCksICdyb3V0ZXMnID0+IGFycmF5KCkpLCAvLzcNCiAgICBhcnJheSgnbmFtZScgPT4gJ2FsYnVtJywgJ3NpbmdsZV91cmxydWxlJyA9PiAnJywgJ3RlbXBsYXRlJyA9PiAnJywgJ2NsYXNzbmFtZScgPT4gJ1Bvc3QnLCAnYWN0aW9ucycgPT4gYXJyYXkoKSwgJ3JvdXRlcycgPT4gYXJyYXkoKSksIC8vOA0KKTsNCg0KLyoNCiAqIOWumuS5ieaWh+eroOeKtuaAgQ0KICovDQovKg0KICog5paH56ug54q25oCB77ya5YWs5byA5Y+R5biDDQogKi8NCmRlZmluZSgnWkNfUE9TVF9TVEFUVVNfUFVCTElDJywgMCk7DQovKg0KICog5paH56ug54q25oCB77ya6I2J56i/DQogKi8NCmRlZmluZSgnWkNfUE9TVF9TVEFUVVNfRFJBRlQnLCAxKTsNCi8qDQogKiDmlofnq6DnirbmgIHvvJrlrqHmoLgNCiAqLw0KZGVmaW5lKCdaQ19QT1NUX1NUQVRVU19BVURJVElORycsIDIpOw0KLyoNCiAqIOeUqOaIt+eKtuaAge+8muato+W4uA0KICovDQpkZWZpbmUoJ1pDX01FTUJFUl9TVEFUVVNfTk9STUFMJywgMCk7DQovKg0KICog55So5oi354q25oCB77ya5a6h5qC45LitDQogKi8NCmRlZmluZSgnWkNfTUVNQkVSX1NUQVRVU19BVURJVElORycsIDEpOw0KLyoNCiAqIOeUqOaIt+eKtuaAge+8muW3sumUgeWumg0KICovDQpkZWZpbmUoJ1pDX01FTUJFUl9TVEFUVVNfTE9DS0VEJywgMik7DQovKg0KICog5paH56ug54q25oCB77ya56eB5Lq6DQogKi8NCmRlZmluZSgnWkNfUE9TVF9TVEFUVVNfUFJJVkFURScsIDQpOw0KLyoNCiAqIOaWh+eroOeKtuaAge+8muWKoOWvhg0KICovDQpkZWZpbmUoJ1pDX1BPU1RfU1RBVFVTX1BBU1NXT1JEJywgOCk7DQoNCg0KLyoNCiAq5a6a5LmJ5ZG95LukDQogKi8NCiRHTE9CQUxTWydhY3Rpb25zJ10gPSBhcnJheSgNCiAgICAnbG9naW4nICA9PiA2LA0KICAgICdsb2dvdXQnID0+IDYsDQogICAgJ3ZlcmlmeScgPT4gNiwNCiAgICAnYWRtaW4nICA9PiA1LA0KICAgICdzZWFyY2gnID0+IDYsDQogICAgJ21pc2MnICAgPT4gNiwNCiAgICAnZmVlZCcgICA9PiA2LA0KICAgICdjbXQnICAgID0+IDYsDQogICAgJ2dldGNtdCcgPT4gNiwNCiAgICAnYWpheCcgICA9PiA2LA0KICAgICd2aWV3JyAgID0+IDYsDQogICAgJ2FwaScgICAgPT4gNiwNCg0KICAgICdBcnRpY2xlTmV3JyA9PiA0LA0KICAgICdBcnRpY2xlRWR0JyA9PiA0LA0KICAgICdBcnRpY2xlUHN0JyA9PiA0LA0KICAgICdBcnRpY2xlRGVsJyA9PiA0LA0KICAgICdBcnRpY2xlUHViJyA9PiAzLA0KDQogICAgJ1BhZ2VOZXcnID0+IDIsDQogICAgJ1BhZ2VFZHQnID0+IDIsDQogICAgJ1BhZ2VQc3QnID0+IDIsDQogICAgJ1BhZ2VEZWwnID0+IDIsDQogICAgJ1BhZ2VQdWInID0+IDIsDQoNCiAgICAnQ2F0ZWdvcnlOZXcnID0+IDIsDQogICAgJ0NhdGVnb3J5RWR0JyA9PiAyLA0KICAgICdDYXRlZ29yeVBzdCcgPT4gMiwNCiAgICAnQ2F0ZWdvcnlEZWwnID0+IDIsDQoNCiAgICAnQ29tbWVudEVkdCcgPT4gNSwNCiAgICAnQ29tbWVudFNhdicgPT4gNSwNCiAgICAnQ29tbWVudERlbCcgPT4gNSwNCiAgICAnQ29tbWVudENoaycgPT4gNSwNCiAgICAnQ29tbWVudEJhdCcgPT4gNSwNCg0KICAgICdNZW1iZXJOZXcnID0+IDEsDQogICAgJ01lbWJlckVkdCcgPT4gNSwNCiAgICAnTWVtYmVyUHN0JyA9PiA1LA0KICAgICdNZW1iZXJEZWwnID0+IDEsDQoNCiAgICAnVGFnTmV3JyA9PiAyLA0KICAgICdUYWdFZHQnID0+IDIsDQogICAgJ1RhZ1BzdCcgPT4gMiwNCiAgICAnVGFnRGVsJyA9PiAyLA0KDQogICAgJ1BsdWdpbkVuYicgPT4gMSwNCiAgICAnUGx1Z2luRGlzJyA9PiAxLA0KDQogICAgJ1VwbG9hZFBzdCcgPT4gMywNCiAgICAnVXBsb2FkRGVsJyA9PiAzLA0KDQogICAgJ01vZHVsZUVkdCcgPT4gMSwNCiAgICAnTW9kdWxlUHN0JyA9PiAxLA0KICAgICdNb2R1bGVEZWwnID0+IDEsDQoNCiAgICAnVGhlbWVTZXQnICAgPT4gMSwNCiAgICAnU2lkZWJhclNldCcgPT4gMSwNCg0KICAgICdTZXR0aW5nU2F2JyA9PiAxLA0KDQogICAgJ0FydGljbGVNbmcnICA9PiA0LA0KICAgICdQYWdlTW5nJyAgICAgPT4gMiwNCiAgICAnQ2F0ZWdvcnlNbmcnID0+IDIsDQogICAgJ1NldHRpbmdNbmcnICA9PiAxLA0KICAgICdUYWdNbmcnICAgICAgPT4gMiwNCiAgICAnQ29tbWVudE1uZycgID0+IDUsDQogICAgJ1VwbG9hZE1uZycgICA9PiAzLA0KICAgICdNZW1iZXJNbmcnICAgPT4gNSwNCiAgICAnVGhlbWVNbmcnICAgID0+IDEsDQogICAgJ1BsdWdpbk1uZycgICA9PiAxLA0KICAgICdNb2R1bGVNbmcnICAgPT4gMSwNCg0KICAgICdQb3N0QmF0JyAgICAgPT4gMiwNCiAgICAnQXJ0aWNsZUFsbCcgID0+IDIsDQogICAgJ1BhZ2VBbGwnICAgICA9PiAyLA0KICAgICdDYXRlZ29yeUFsbCcgPT4gMiwNCiAgICAnQ29tbWVudEFsbCcgID0+IDIsDQogICAgJ01lbWJlckFsbCcgICA9PiAxLA0KICAgICdUYWdBbGwnICAgICAgPT4gMiwNCiAgICAnVXBsb2FkQWxsJyAgID0+IDIsDQoNCiAgICAnTm9WYWxpZENvZGUnID0+IDUsDQoNCiAgICAncm9vdCcgPT4gMSwNCik7DQoNCi8qDQogKuWumuS5ieaVsOaNruihqA0KICovDQokR0xPQkFMU1sndGFibGUnXSA9IGFycmF5KA0KDQogICAgJ1Bvc3QnICAgICA9PiAnJXByZSVwb3N0JywNCiAgICAnQ2F0ZWdvcnknID0+ICclcHJlJWNhdGVnb3J5JywNCiAgICAnQ29tbWVudCcgID0+ICclcHJlJWNvbW1lbnQnLA0KICAgICdUYWcnICAgICAgPT4gJyVwcmUldGFnJywNCiAgICAnVXBsb2FkJyAgID0+ICclcHJlJXVwbG9hZCcsDQogICAgJ01vZHVsZScgICA9PiAnJXByZSVtb2R1bGUnLA0KICAgICdNZW1iZXInICAgPT4gJyVwcmUlbWVtYmVyJywNCiAgICAnQ29uZmlnJyAgID0+ICclcHJlJWNvbmZpZycsDQopOw0KDQovKg0KICrlrprkuYnmlbDmja7nu5PmnoQNCiAqLw0KJEdMT0JBTFNbJ2RhdGFpbmZvJ10gPSBhcnJheSgNCiAgICAnQ29uZmlnJyA9PiBhcnJheSgNCiAgICAgICAgJ0lEJyAgICA9PiBhcnJheSgnY29uZl9JRCcsICdpbnRlZ2VyJywgJycsIDApLA0KICAgICAgICAnTmFtZScgID0+IGFycmF5KCdjb25mX05hbWUnLCAnc3RyaW5nJywgMjUwLCAnJyksDQogICAgICAgICdLZXknICAgPT4gYXJyYXkoJ2NvbmZfS2V5JywgJ3N0cmluZycsIDI1MCwgJycpLA0KICAgICAgICAnVmFsdWUnID0+IGFycmF5KCdjb25mX1ZhbHVlJywgJ3N0cmluZycsICcnLCAnJyksDQogICAgKSwNCiAgICAnUG9zdCcgPT4gYXJyYXkoDQogICAgICAgICdJRCcgICAgICAgICA9PiBhcnJheSgnbG9nX0lEJywgJ2ludGVnZXInLCAnJywgMCksDQogICAgICAgICdDYXRlSUQnICAgICA9PiBhcnJheSgnbG9nX0NhdGVJRCcsICdpbnRlZ2VyJywgJycsIDApLA0KICAgICAgICAnQXV0aG9ySUQnICAgPT4gYXJyYXkoJ2xvZ19BdXRob3JJRCcsICdpbnRlZ2VyJywgJycsIDApLA0KICAgICAgICAnVGFnJyAgICAgICAgPT4gYXJyYXkoJ2xvZ19UYWcnLCAnc3RyaW5nJywgMjUwLCAnJyksDQogICAgICAgICdTdGF0dXMnICAgICA9PiBhcnJheSgnbG9nX1N0YXR1cycsICdpbnRlZ2VyJywgJycsIDApLA0KICAgICAgICAnVHlwZScgICAgICAgPT4gYXJyYXkoJ2xvZ19UeXBlJywgJ2ludGVnZXInLCAnJywgMCksDQogICAgICAgICdBbGlhcycgICAgICA9PiBhcnJheSgnbG9nX0FsaWFzJywgJ3N0cmluZycsIDI1MCwgJycpLA0KICAgICAgICAnSXNUb3AnICAgICAgPT4gYXJyYXkoJ2xvZ19Jc1RvcCcsICdpbnRlZ2VyJywgJycsIDApLA0KICAgICAgICAnSXNMb2NrJyAgICAgPT4gYXJyYXkoJ2xvZ19Jc0xvY2snLCAnYm9vbGVhbicsICcnLCBmYWxzZSksDQogICAgICAgICdUaXRsZScgICAgICA9PiBhcnJheSgnbG9nX1RpdGxlJywgJ3N0cmluZycsIDI1MCwgJycpLA0KICAgICAgICAnSW50cm8nICAgICAgPT4gYXJyYXkoJ2xvZ19JbnRybycsICdzdHJpbmcnLCAnJywgJycpLA0KICAgICAgICAnQ29udGVudCcgICAgPT4gYXJyYXkoJ2xvZ19Db250ZW50JywgJ3N0cmluZycsICcnLCAnJyksDQogICAgICAgICdDcmVhdGVUaW1lJyA9PiBhcnJheSgnbG9nX0NyZWF0ZVRpbWUnLCAnaW50ZWdlcicsICcnLCAwKSwNCiAgICAgICAgJ1Bvc3RUaW1lJyAgID0+IGFycmF5KCdsb2dfUG9zdFRpbWUnLCAnaW50ZWdlcicsICcnLCAwKSwNCiAgICAgICAgJ1VwZGF0ZVRpbWUnID0+IGFycmF5KCdsb2dfVXBkYXRlVGltZScsICdpbnRlZ2VyJywgJycsIDApLA0KICAgICAgICAnQ29tbU51bXMnICAgPT4gYXJyYXkoJ2xvZ19Db21tTnVtcycsICdpbnRlZ2VyJywgJycsIDApLA0KICAgICAgICAnVmlld051bXMnICAgPT4gYXJyYXkoJ2xvZ19WaWV3TnVtcycsICdpbnRlZ2VyJywgJycsIDApLA0KICAgICAgICAnVGVtcGxhdGUnICAgPT4gYXJyYXkoJ2xvZ19UZW1wbGF0ZScsICdzdHJpbmcnLCAyNTAsICcnKSwNCiAgICAgICAgJ01ldGEnICAgICAgID0+IGFycmF5KCdsb2dfTWV0YScsICdzdHJpbmcnLCAnJywgJycpLA0KICAgICksDQogICAgJ0NhdGVnb3J5JyA9PiBhcnJheSgNCiAgICAgICAgJ0lEJyAgICAgICAgICA9PiBhcnJheSgnY2F0ZV9JRCcsICdpbnRlZ2VyJywgJycsIDApLA0KICAgICAgICAnTmFtZScgICAgICAgID0+IGFycmF5KCdjYXRlX05hbWUnLCAnc3RyaW5nJywgMjUwLCAnJyksDQogICAgICAgICdPcmRlcicgICAgICAgPT4gYXJyYXkoJ2NhdGVfT3JkZXInLCAnaW50ZWdlcicsICcnLCAwKSwNCiAgICAgICAgJ1R5cGUnICAgICAgICA9PiBhcnJheSgnY2F0ZV9UeXBlJywgJ2ludGVnZXInLCAnJywgMCksDQogICAgICAgICdDb3VudCcgICAgICAgPT4gYXJyYXkoJ2NhdGVfQ291bnQnLCAnaW50ZWdlcicsICcnLCAwKSwNCiAgICAgICAgJ0FsaWFzJyAgICAgICA9PiBhcnJheSgnY2F0ZV9BbGlhcycsICdzdHJpbmcnLCAyNTAsICcnKSwNCiAgICAgICAgJ0dyb3VwJyAgICAgICA9PiBhcnJheSgnY2F0ZV9Hcm91cCcsICdzdHJpbmcnLCAyNTAsICcnKSwNCiAgICAgICAgJ0ludHJvJyAgICAgICA9PiBhcnJheSgnY2F0ZV9JbnRybycsICdzdHJpbmcnLCAnJywgJycpLA0KICAgICAgICAnUm9vdElEJyAgICAgID0+IGFycmF5KCdjYXRlX1Jvb3RJRCcsICdpbnRlZ2VyJywgJycsIDApLA0KICAgICAgICAnUGFyZW50SUQnICAgID0+IGFycmF5KCdjYXRlX1BhcmVudElEJywgJ2ludGVnZXInLCAnJywgMCksDQogICAgICAgICdUZW1wbGF0ZScgICAgPT4gYXJyYXkoJ2NhdGVfVGVtcGxhdGUnLCAnc3RyaW5nJywgMjUwLCAnJyksDQogICAgICAgICdMb2dUZW1wbGF0ZScgPT4gYXJyYXkoJ2NhdGVfTG9nVGVtcGxhdGUnLCAnc3RyaW5nJywgMjUwLCAnJyksDQogICAgICAgICdNZXRhJyAgICAgICAgPT4gYXJyYXkoJ2NhdGVfTWV0YScsICdzdHJpbmcnLCAnJywgJycpLA0KICAgICksDQogICAgJ0NvbW1lbnQnID0+IGFycmF5KA0KICAgICAgICAnSUQnICAgICAgICAgPT4gYXJyYXkoJ2NvbW1fSUQnLCAnaW50ZWdlcicsICcnLCAwKSwNCiAgICAgICAgJ0xvZ0lEJyAgICAgID0+IGFycmF5KCdjb21tX0xvZ0lEJywgJ2ludGVnZXInLCAnJywgMCksDQogICAgICAgICdJc0NoZWNraW5nJyA9PiBhcnJheSgnY29tbV9Jc0NoZWNraW5nJywgJ2Jvb2xlYW4nLCAnJywgZmFsc2UpLA0KICAgICAgICAnUm9vdElEJyAgICAgPT4gYXJyYXkoJ2NvbW1fUm9vdElEJywgJ2ludGVnZXInLCAnJywgMCksDQogICAgICAgICdQYXJlbnRJRCcgICA9PiBhcnJheSgnY29tbV9QYXJlbnRJRCcsICdpbnRlZ2VyJywgJycsIDApLA0KICAgICAgICAnQXV0aG9ySUQnICAgPT4gYXJyYXkoJ2NvbW1fQXV0aG9ySUQnLCAnaW50ZWdlcicsICcnLCAwKSwNCiAgICAgICAgJ05hbWUnICAgICAgID0+IGFycmF5KCdjb21tX05hbWUnLCAnc3RyaW5nJywgMjUwLCAnJyksDQogICAgICAgICdDb250ZW50JyAgICA9PiBhcnJheSgnY29tbV9Db250ZW50JywgJ3N0cmluZycsICcnLCAnJyksDQogICAgICAgICdFbWFpbCcgICAgICA9PiBhcnJheSgnY29tbV9FbWFpbCcsICdzdHJpbmcnLCAyNTAsICcnKSwNCiAgICAgICAgJ0hvbWVQYWdlJyAgID0+IGFycmF5KCdjb21tX0hvbWVQYWdlJywgJ3N0cmluZycsIDI1MCwgJycpLA0KICAgICAgICAnUG9zdFRpbWUnICAgPT4gYXJyYXkoJ2NvbW1fUG9zdFRpbWUnLCAnaW50ZWdlcicsICcnLCAwKSwNCiAgICAgICAgJ0lQJyAgICAgICAgID0+IGFycmF5KCdjb21tX0lQJywgJ3N0cmluZycsIDI1MCwgJycpLA0KICAgICAgICAnQWdlbnQnICAgICAgPT4gYXJyYXkoJ2NvbW1fQWdlbnQnLCAnc3RyaW5nJywgJycsICcnKSwNCiAgICAgICAgJ01ldGEnICAgICAgID0+IGFycmF5KCdjb21tX01ldGEnLCAnc3RyaW5nJywgJycsICcnKSwNCiAgICApLA0KICAgICdNb2R1bGUnID0+IGFycmF5KA0KICAgICAgICAnSUQnICAgICAgICAgID0+IGFycmF5KCdtb2RfSUQnLCAnaW50ZWdlcicsICcnLCAwKSwNCiAgICAgICAgJ05hbWUnICAgICAgICA9PiBhcnJheSgnbW9kX05hbWUnLCAnc3RyaW5nJywgMjUwLCAnJyksDQogICAgICAgICdGaWxlTmFtZScgICAgPT4gYXJyYXkoJ21vZF9GaWxlTmFtZScsICdzdHJpbmcnLCAyNTAsICcnKSwNCiAgICAgICAgJ0NvbnRlbnQnICAgICA9PiBhcnJheSgnbW9kX0NvbnRlbnQnLCAnc3RyaW5nJywgJycsICcnKSwNCiAgICAgICAgJ0h0bWxJRCcgICAgICA9PiBhcnJheSgnbW9kX0h0bWxJRCcsICdzdHJpbmcnLCAyNTAsICcnKSwNCiAgICAgICAgJ1R5cGUnICAgICAgICA9PiBhcnJheSgnbW9kX1R5cGUnLCAnc3RyaW5nJywgNSwgJ2RpdicpLA0KICAgICAgICAnTWF4TGknICAgICAgID0+IGFycmF5KCdtb2RfTWF4TGknLCAnaW50ZWdlcicsICcnLCAwKSwNCiAgICAgICAgJ1NvdXJjZScgICAgICA9PiBhcnJheSgnbW9kX1NvdXJjZScsICdzdHJpbmcnLCAyNTAsICd1c2VyJyksDQogICAgICAgICdJc0hpZGVUaXRsZScgPT4gYXJyYXkoJ21vZF9Jc0hpZGVUaXRsZScsICdib29sZWFuJywgJycsIGZhbHNlKSwNCiAgICAgICAgJ01ldGEnICAgICAgICA9PiBhcnJheSgnbW9kX01ldGEnLCAnc3RyaW5nJywgJycsICcnKSwNCiAgICApLA0KICAgICdNZW1iZXInID0+IGFycmF5KA0KICAgICAgICAnSUQnICAgICAgICAgPT4gYXJyYXkoJ21lbV9JRCcsICdpbnRlZ2VyJywgJycsIDApLA0KICAgICAgICAnR3VpZCcgICAgICAgPT4gYXJyYXkoJ21lbV9HdWlkJywgJ3N0cmluZycsIDM2LCAnJyksDQogICAgICAgICdMZXZlbCcgICAgICA9PiBhcnJheSgnbWVtX0xldmVsJywgJ2ludGVnZXInLCAnJywgNiksDQogICAgICAgICdTdGF0dXMnICAgICA9PiBhcnJheSgnbWVtX1N0YXR1cycsICdpbnRlZ2VyJywgJycsIDApLA0KICAgICAgICAnTmFtZScgICAgICAgPT4gYXJyYXkoJ21lbV9OYW1lJywgJ3N0cmluZycsIDI1MCwgJycpLA0KICAgICAgICAnUGFzc3dvcmQnICAgPT4gYXJyYXkoJ21lbV9QYXNzd29yZCcsICdzdHJpbmcnLCAyNTAsICcnKSwNCiAgICAgICAgJ0VtYWlsJyAgICAgID0+IGFycmF5KCdtZW1fRW1haWwnLCAnc3RyaW5nJywgMjUwLCAnJyksDQogICAgICAgICdIb21lUGFnZScgICA9PiBhcnJheSgnbWVtX0hvbWVQYWdlJywgJ3N0cmluZycsIDI1MCwgJycpLA0KICAgICAgICAnSVAnICAgICAgICAgPT4gYXJyYXkoJ21lbV9JUCcsICdzdHJpbmcnLCAyNTAsICcnKSwNCiAgICAgICAgJ0NyZWF0ZVRpbWUnID0+IGFycmF5KCdtZW1fQ3JlYXRlVGltZScsICdpbnRlZ2VyJywgJycsIDApLA0KICAgICAgICAnUG9zdFRpbWUnICAgPT4gYXJyYXkoJ21lbV9Qb3N0VGltZScsICdpbnRlZ2VyJywgJycsIDApLA0KICAgICAgICAnVXBkYXRlVGltZScgPT4gYXJyYXkoJ21lbV9VcGRhdGVUaW1lJywgJ2ludGVnZXInLCAnJywgMCksDQogICAgICAgICdBbGlhcycgICAgICA9PiBhcnJheSgnbWVtX0FsaWFzJywgJ3N0cmluZycsIDI1MCwgJycpLA0KICAgICAgICAnSW50cm8nICAgICAgPT4gYXJyYXkoJ21lbV9JbnRybycsICdzdHJpbmcnLCAnJywgJycpLA0KICAgICAgICAnQXJ0aWNsZXMnICAgPT4gYXJyYXkoJ21lbV9BcnRpY2xlcycsICdpbnRlZ2VyJywgJycsIDApLA0KICAgICAgICAnUGFnZXMnICAgICAgPT4gYXJyYXkoJ21lbV9QYWdlcycsICdpbnRlZ2VyJywgJycsIDApLA0KICAgICAgICAnQ29tbWVudHMnICAgPT4gYXJyYXkoJ21lbV9Db21tZW50cycsICdpbnRlZ2VyJywgJycsIDApLA0KICAgICAgICAnVXBsb2FkcycgICAgPT4gYXJyYXkoJ21lbV9VcGxvYWRzJywgJ2ludGVnZXInLCAnJywgMCksDQogICAgICAgICdUZW1wbGF0ZScgICA9PiBhcnJheSgnbWVtX1RlbXBsYXRlJywgJ3N0cmluZycsIDI1MCwgJycpLA0KICAgICAgICAnTWV0YScgICAgICAgPT4gYXJyYXkoJ21lbV9NZXRhJywgJ3N0cmluZycsICcnLCAnJyksDQogICAgKSwNCiAgICAnVGFnJyA9PiBhcnJheSgNCiAgICAgICAgJ0lEJyAgICAgICA9PiBhcnJheSgndGFnX0lEJywgJ2ludGVnZXInLCAnJywgMCksDQogICAgICAgICdOYW1lJyAgICAgPT4gYXJyYXkoJ3RhZ19OYW1lJywgJ3N0cmluZycsIDI1MCwgJycpLA0KICAgICAgICAnT3JkZXInICAgID0+IGFycmF5KCd0YWdfT3JkZXInLCAnaW50ZWdlcicsICcnLCAwKSwNCiAgICAgICAgJ1R5cGUnICAgICA9PiBhcnJheSgndGFnX1R5cGUnLCAnaW50ZWdlcicsICcnLCAwKSwNCiAgICAgICAgJ0NvdW50JyAgICA9PiBhcnJheSgndGFnX0NvdW50JywgJ2ludGVnZXInLCAnJywgMCksDQogICAgICAgICdBbGlhcycgICAgPT4gYXJyYXkoJ3RhZ19BbGlhcycsICdzdHJpbmcnLCAyNTAsICcnKSwNCiAgICAgICAgJ0dyb3VwJyAgICA9PiBhcnJheSgndGFnX0dyb3VwJywgJ3N0cmluZycsIDI1MCwgJycpLA0KICAgICAgICAnSW50cm8nICAgID0+IGFycmF5KCd0YWdfSW50cm8nLCAnc3RyaW5nJywgJycsICcnKSwNCiAgICAgICAgJ1RlbXBsYXRlJyA9PiBhcnJheSgndGFnX1RlbXBsYXRlJywgJ3N0cmluZycsIDI1MCwgJycpLA0KICAgICAgICAnTWV0YScgICAgID0+IGFycmF5KCd0YWdfTWV0YScsICdzdHJpbmcnLCAnJywgJycpLA0KICAgICksDQogICAgJ1VwbG9hZCcgPT4gYXJyYXkoDQogICAgICAgICdJRCcgICAgICAgICA9PiBhcnJheSgndWxfSUQnLCAnaW50ZWdlcicsICcnLCAwKSwNCiAgICAgICAgJ0F1dGhvcklEJyAgID0+IGFycmF5KCd1bF9BdXRob3JJRCcsICdpbnRlZ2VyJywgJycsIDApLA0KICAgICAgICAnU2l6ZScgICAgICAgPT4gYXJyYXkoJ3VsX1NpemUnLCAnaW50ZWdlcicsICcnLCAwKSwNCiAgICAgICAgJ05hbWUnICAgICAgID0+IGFycmF5KCd1bF9OYW1lJywgJ3N0cmluZycsIDI1MCwgJycpLA0KICAgICAgICAnU291cmNlTmFtZScgPT4gYXJyYXkoJ3VsX1NvdXJjZU5hbWUnLCAnc3RyaW5nJywgMjUwLCAnJyksDQogICAgICAgICdNaW1lVHlwZScgICA9PiBhcnJheSgndWxfTWltZVR5cGUnLCAnc3RyaW5nJywgMjUwLCAnJyksDQogICAgICAgICdQb3N0VGltZScgICA9PiBhcnJheSgndWxfUG9zdFRpbWUnLCAnaW50ZWdlcicsICcnLCAwKSwNCiAgICAgICAgJ0Rvd25OdW1zJyAgID0+IGFycmF5KCd1bF9Eb3duTnVtcycsICdpbnRlZ2VyJywgJycsIDApLA0KICAgICAgICAnTG9nSUQnICAgICAgPT4gYXJyYXkoJ3VsX0xvZ0lEJywgJ2ludGVnZXInLCAnJywgMCksDQogICAgICAgICdJbnRybycgICAgICA9PiBhcnJheSgndWxfSW50cm8nLCAnc3RyaW5nJywgJycsICcnKSwNCiAgICAgICAgJ01ldGEnICAgICAgID0+IGFycmF5KCd1bF9NZXRhJywgJ3N0cmluZycsICcnLCAnJyksDQogICAgKSwNCik7DQoNCi8qDQogKiDpu5jorqTot6/nlLF1cmzmlbDnu4QNCiAqLw0KJEdMT0JBTFNbJ3JvdXRlcyddID0gYXJyYXkoKTsNCg0KLyoNCiAqIOWIneWni+WMlue7n+iuoeS/oeaBrw0KICovDQokX1NFUlZFUlsnX3N0YXJ0X3RpbWUnXSA9IG1pY3JvdGltZSh0cnVlKTsgLy9SdW5UaW1lDQokX1NFUlZFUlsnX3F1ZXJ5X2NvdW50J10gPSAwOw0KJF9TRVJWRVJbJ19tZW1vcnlfdXNhZ2UnXSA9IDA7DQokX1NFUlZFUlsnX2Vycm9yX2NvdW50J10gPSAwOw0KaWYgKGZ1bmN0aW9uX2V4aXN0cygnbWVtb3J5X2dldF91c2FnZScpKSB7DQogICAgJF9TRVJWRVJbJ19tZW1vcnlfdXNhZ2UnXSA9IG1lbW9yeV9nZXRfdXNhZ2UodHJ1ZSk7DQp9DQoNCi8qDQogKiDniYjmnKzlhbzlrrnlpITnkIYNCiAqIFBIUCA3LjTnp7vpmaTkuoZnZXRfbWFnaWNfcXVvdGVzX2dwYw0KICogaHR0cHM6Ly9naXRodWIuY29tL3BocC9waHAtc3JjL2NvbW1pdC9iMmVhNTA3YmVhYjg2MmEwMTY3YWY2Yjk5ZjQ0ZmU5YzY5NWNhNGYwDQogKi8NCmlmIChmdW5jdGlvbl9leGlzdHMoJ2dldF9tYWdpY19xdW90ZXNfZ3BjJykgJiYgUEhQX1ZFUlNJT05fSUQgPCA3MDQwMCAmJiBjYWxsX3VzZXJfZnVuYygnZ2V0X21hZ2ljX3F1b3Rlc19ncGMnKSkgew0KDQogICAgZnVuY3Rpb24gX3N0cmlwc2xhc2hlcygmJHZhcikNCiAgICB7DQogICAgICAgIGlmIChpc19hcnJheSgkdmFyKSkgew0KICAgICAgICAgICAgZm9yZWFjaCAoJHZhciBhcyAkayA9PiAmJHYpIHsNCiAgICAgICAgICAgICAgICBfc3RyaXBzbGFzaGVzKCR2KTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICR2YXIgPSBzdHJpcHNsYXNoZXMoJHZhcik7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICBfc3RyaXBzbGFzaGVzKCRfR0VUKTsNCiAgICBfc3RyaXBzbGFzaGVzKCRfUE9TVCk7DQogICAgX3N0cmlwc2xhc2hlcygkX0NPT0tJRSk7DQogICAgX3N0cmlwc2xhc2hlcygkX1JFUVVFU1QpOw0KfQ0KDQovKg0KICogQ0xJIE1vY2sg5aSE55CGDQogKi8NCmlmIChJU19DTEkpIHsNCiAgICBpZiAoaXNzZXQoJEdMT0JBTFNbJ2FyZ3YnXSkpIHsNCiAgICAgICAgJF9TRVJWRVJbIlFVRVJZX1NUUklORyJdID0gaW1wbG9kZSgnJicsIGFycmF5X3NsaWNlKCRHTE9CQUxTWydhcmd2J10sIDEpKTsNCiAgICB9IGVsc2Ugew0KICAgICAgICAkX1NFUlZFUlsiUVVFUllfU1RSSU5HIl0gPSAnJzsNCiAgICB9DQoNCiAgICAkX1NFUlZFUlsiSFRUUF9IT1NUIl0gPSAibG9jYWxob3N0IjsNCiAgICAkX1NFUlZFUlsnU0VSVkVSX1NPRlRXQVJFJ10gPSAiQ0xJIjsNCiAgICAkX0dFVCA9IGFycmF5KCk7DQogICAgcGFyc2Vfc3RyKCRfU0VSVkVSWyJRVUVSWV9TVFJJTkciXSwgJF9HRVQpOw0KICAgIC8vICRfUE9TVCA9IGpzb25fZGVjb2RlKGZpbGVfZ2V0X2NvbnRlbnRzKCdwaHA6Ly9zdGRpbicpLCB0cnVlKTsNCn0NCg0KLyoNCiAqIOWumuS5ieezu+e7n+WFqOWxgOWPmOmHjw0KICovDQovKg0KICog5b2T5YmN5Yqo5L2c5ZG95LukDQogKi8NCiRHTE9CQUxTWydhY3Rpb24nXSA9ICcnOw0KLyoNCiAqIOW9k+WJjeivt+axgui3r+W+hA0KICovDQokR0xPQkFMU1snY3VycmVudHVybCddID0gR2V0UmVxdWVzdFVyaSgpOw0KJEdMT0JBTFNbJ2Z1bGxjdXJyZW50dXJsJ10gPSAnJzsNCi8qDQogKiDor63oqIDljIUNCiAqLw0KJEdMT0JBTFNbJ2xhbmcnXSA9IGFycmF5KCk7DQokR0xPQkFMU1snbGFuZ3MnXSA9IGFycmF5KCk7DQovKg0KICog57O757uf5qC56Lev5b6EDQogKi8NCiRHTE9CQUxTWydibG9ncGF0aCddID0gWkJQX1BBVEg7DQovKg0KICog55So5oi36Lev5b6EDQogKi8NCiRHTE9CQUxTWyd1c2Vyc2RpciddID0gWkJQX1BBVEggLiAnemJfdXNlcnMvJzsNCi8qDQogKiBTeXN0ZW3ot6/lvoQNCiAqLw0KJEdMT0JBTFNbJ3N5c3RlbWRpciddID0gWkJQX1BBVEggLiAnemJfc3lzdGVtLyc7DQovKg0KICogQWRtaW7ot6/lvoQNCiAqLw0KJEdMT0JBTFNbJ2FkbWluZGlyJ10gPSAkR0xPQkFMU1snc3lzdGVtZGlyJ10gLiAnYWRtaW4vJzsNCi8qDQogKiBDQUNIRei3r+W+hA0KICovDQokR0xPQkFMU1snY2FjaGVkaXInXSA9ICRHTE9CQUxTWyd1c2Vyc2RpciddIC4gJ2NhY2hlLyc7DQovKg0KICogTE9HU+i3r+W+hA0KICovDQokR0xPQkFMU1snbG9nc2RpciddID0gJEdMT0JBTFNbJ3VzZXJzZGlyJ10gLiAnbG9ncy8nOw0KLyoNCiAqIERBVEHot6/lvoQNCiAqLw0KJEdMT0JBTFNbJ2RhdGFkaXInXSA9ICRHTE9CQUxTWyd1c2Vyc2RpciddIC4gJ2RhdGEvJzsNCg0KLyoNCiAqIOW3sua/gOa0u+aPkuS7tuWIl+ihqA0KICovDQokR0xPQkFMU1snYWN0aXZlZGFwcHMnXSA9IGFycmF5KCk7DQovL+S/neeVmWFjdGl2ZWFwcHPvvIzlhbzlrrnku6XliY3niYjmnKwNCiRHTE9CQUxTWydhY3RpdmVhcHBzJ10gPSAmJEdMT0JBTFNbJ2FjdGl2ZWRhcHBzJ107DQoNCi8qDQogKiDliqDovb3orr7nva4NCiAqLw0KJEdMT0JBTFNbJ29wdGlvbiddID0gaW5jbHVkZSBaQlBfUEFUSCAuICd6Yl9zeXN0ZW0vZGVmZW5kL29wdGlvbi5waHAnOw0KJG9wX3VzZXJzID0gbnVsbDsNCmlmICghWkJQX0hPT0tFUlJPUiAmJiBpc3NldCgkX0VOVlsnWkJQX1VTRVJfT1BUSU9OJ10pICYmIGlzX3JlYWRhYmxlKCRmaWxlX2Jhc2UgPSAkX0VOVlsnWkJQX1VTRVJfT1BUSU9OJ10pKSB7DQogICAgJG9wX3VzZXJzID0gaW5jbHVkZSAkZmlsZV9iYXNlOw0KICAgICRHTE9CQUxTWydvcHRpb24nXSA9IGFycmF5X21lcmdlKCRHTE9CQUxTWydvcHRpb24nXSwgJG9wX3VzZXJzKTsNCn0gZWxzZWlmIChpc19yZWFkYWJsZSgkZmlsZV9iYXNlID0gJEdMT0JBTFNbJ3VzZXJzZGlyJ10gLiAnY19vcHRpb24ucGhwJykpIHsNCiAgICAkb3BfdXNlcnMgPSBpbmNsdWRlICRmaWxlX2Jhc2U7DQogICAgJEdMT0JBTFNbJ29wdGlvbiddID0gYXJyYXlfbWVyZ2UoJEdMT0JBTFNbJ29wdGlvbiddLCAkb3BfdXNlcnMpOw0KfQ0KDQokR0xPQkFMU1snYmxvZ3RpdGxlJ10gPSAkR0xPQkFMU1snb3B0aW9uJ11bJ1pDX0JMT0dfU1VCTkFNRSddOyAvLyDkuI3mmK/mvI/lhpnvvIENCiRHTE9CQUxTWydibG9nbmFtZSddID0gJiRHTE9CQUxTWydvcHRpb24nXVsnWkNfQkxPR19OQU1FJ107DQokR0xPQkFMU1snYmxvZ3N1Ym5hbWUnXSA9ICYkR0xPQkFMU1snb3B0aW9uJ11bJ1pDX0JMT0dfU1VCTkFNRSddOw0KJEdMT0JBTFNbJ2Jsb2d0aGVtZSddID0gJiRHTE9CQUxTWydvcHRpb24nXVsnWkNfQkxPR19USEVNRSddOw0KJEdMT0JBTFNbJ2Jsb2dzdHlsZSddID0gJiRHTE9CQUxTWydvcHRpb24nXVsnWkNfQkxPR19DU1MnXTsNCiRHTE9CQUxTWydjb29raWVzcGF0aCddID0gbnVsbDsNCiRHTE9CQUxTWydibG9naG9zdCddID0gR2V0Q3VycmVudEhvc3QoJEdMT0JBTFNbJ2Jsb2dwYXRoJ10sICRHTE9CQUxTWydjb29raWVzcGF0aCddKTsNCiRHTE9CQUxTWyd1c2Vyc3VybCddID0gJEdMT0JBTFNbJ2Jsb2dob3N0J10gLiAnemJfdXNlcnMvJzsNCiRHTE9CQUxTWydzeXN0ZW11cmwnXSA9ICRHTE9CQUxTWydibG9naG9zdCddIC4gJ3piX3N5c3RlbS8nOw0KJEdMT0JBTFNbJ2FkbWludXJsJ10gPSAkR0xPQkFMU1snYmxvZ2hvc3QnXSAuICd6Yl9zeXN0ZW0vYWRtaW4vJzsNCg0KLyoNCiAqIOezu+e7n+WunuS+i+WMlg0KICovDQpBdXRvbG9hZENsYXNzKCdaQmxvZ1BIUCcpOw0KQXV0b2xvYWRDbGFzcygnRGJTcWwnKTsNCkF1dG9sb2FkQ2xhc3MoJ0NvbmZpZycpOw0KDQokR0xPQkFMU1snemJwJ10gPSBaQmxvZ1BIUDo6R2V0SW5zdGFuY2UoKTsNCiRHTE9CQUxTWyd6YnAnXS0+SW5pdGlhbGl6ZSgpOw0KDQovKg0KICog5Yqg6L295Li76aKY5ZKM5o+S5Lu2QVBQDQogKi8NCmlmIChaQlBfU0FGRU1PREUgPT09IGZhbHNlKSB7DQogICAgaWYgKGlzX3JlYWRhYmxlKCRmaWxlX2Jhc2UgPSAkR0xPQkFMU1sndXNlcnNkaXInXSAuICd0aGVtZS8nIC4gJEdMT0JBTFNbJ2Jsb2d0aGVtZSddIC4gJy90aGVtZS54bWwnKSkgew0KICAgICAgICAkR0xPQkFMU1snYWN0aXZlZGFwcHMnXVtdID0gJEdMT0JBTFNbJ2Jsb2d0aGVtZSddOw0KDQogICAgICAgIC8vIOivu+S4u+mimOeJiOacrOS/oeaBrw0KICAgICAgICAkR0xPQkFMU1snemJwJ10tPnRoZW1lYXBwID0gJEdMT0JBTFNbJ3picCddLT5Mb2FkQXBwKCd0aGVtZScsICRHTE9CQUxTWydibG9ndGhlbWUnXSk7DQogICAgICAgICRHTE9CQUxTWyd6YnAnXS0+dGhlbWVpbmZvID0gJEdMT0JBTFNbJ3picCddLT50aGVtZWFwcC0+R2V0SW5mb0FycmF5KCk7DQoNCiAgICAgICAgaWYgKCRHTE9CQUxTWyd6YnAnXS0+dGhlbWVhcHAtPmlzbG9hZGVkICYmIGlzX3JlYWRhYmxlKCRmaWxlX2Jhc2UgPSAkR0xPQkFMU1sndXNlcnNkaXInXSAuICd0aGVtZS8nIC4gJEdMT0JBTFNbJ2Jsb2d0aGVtZSddIC4gJy9pbmNsdWRlLnBocCcpKSB7DQogICAgICAgICAgICBpbmNsdWRlICRmaWxlX2Jhc2U7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICAkYXBzID0gJEdMT0JBTFNbJ3picCddLT5HZXRQcmVBY3RpdmVQbHVnaW4oKTsNCiAgICBmb3JlYWNoICgkYXBzIGFzICRhcCkgew0KICAgICAgICBpZiAoaXNfcmVhZGFibGUoJGZpbGVfYmFzZSA9ICRHTE9CQUxTWyd1c2Vyc2RpciddIC4gJ3BsdWdpbi8nIC4gJGFwIC4gJy9wbHVnaW4ueG1sJykpIHsNCiAgICAgICAgICAgICRHTE9CQUxTWydhY3RpdmVkYXBwcyddW10gPSAkYXA7DQogICAgICAgIH0NCiAgICAgICAgaWYgKGlzX3JlYWRhYmxlKCRmaWxlX2Jhc2UgPSAkR0xPQkFMU1sndXNlcnNkaXInXSAuICdwbHVnaW4vJyAuICRhcCAuICcvaW5jbHVkZS5waHAnKSkgew0KICAgICAgICAgICAgaW5jbHVkZSAkZmlsZV9iYXNlOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgZm9yZWFjaCAoJEdMT0JBTFNbJ3BsdWdpbnMnXSBhcyAmJGZuKSB7DQogICAgICAgIGlmIChmdW5jdGlvbl9leGlzdHMoJGZuKSkgew0KICAgICAgICAgICAgJGZuKCk7DQogICAgICAgIH0NCiAgICB9DQp9DQoNCnVuc2V0KCRmaWxlX2Jhc2UsICRhcHMsICRmbiwgJGFwLCAkb3BfdXNlcnMsICRvcGssICRvcHYpOw0KDQovLzEuN+aWsOWKoOWFpeeahA0KJEdMT0JBTFNbJ3picCddLT5QcmVMb2FkKCk7DQo=</file>
	<file name='zb_system\function\c_system_admin.php' crc32='4C7201B8'  dt:dt='bin.base64'></file>
	<file name='zb_system\function\lib\zblogphp.php' crc32='F4FD25E5'  dt:dt='bin.base64'></file>
	<file name='zb_system\function\c_system_version.php' crc32='5DC38139'  dt:dt='bin.base64'>PD9waHANCg0KaWYgKCFkZWZpbmVkKCdaQlBfUEFUSCcpKSB7DQogICAgZXhpdCgnQWNjZXNzIGRlbmllZCcpOw0KfQ0KLyoNCiAqIOWumuS5ieeJiOacrOWPtw0KDQrov5nmmK8xLjXlj5bmtojnmoTmlbDnu4TvvIzooqvlronmjpLliLDlupTnlKjkuK3lv4PlrqLmiLfnq6/nmoRpbmNsdWRlLnBocOaWh+S7tumHjOOAgg0KI+WumuS5ieeJiOacrOWPt+WIlw0KJHpicHZlcnM9YXJyYXkoKTsNCiR6YnB2ZXJzWycxMzA3MDcnXT0nMS4wIEJldGEgQnVpbGQgMTMwNzA3JzsNCiR6YnB2ZXJzWycxMzExMTEnXT0nMS4wIEJldGEyIEJ1aWxkIDEzMTExMSc7DQokemJwdmVyc1snMTMxMjIxJ109JzEuMSBUYWljaGkgQnVpbGQgMTMxMjIxJzsNCiR6YnB2ZXJzWycxNDAyMjAnXT0nMS4yIEhpcHBvIEJ1aWxkIDE0MDIyMCc7DQokemJwdmVyc1snMTQwNjE0J109JzEuMyBXb25jZSBCdWlsZCAxNDA2MTQnOw0KJHpicHZlcnNbJzE1MDEwMSddPScxLjQgRGVlcGx1ZSBCdWlsZCAxNTAxMDEnOw0KJHpicHZlcnNbJzE1MTYyNiddPScxLjUgWmVybyBCdWlsZCAxNTE2MjYnOw0KDQogKi8NCmRlZmluZSgnWkNfVkVSU0lPTl9NQUpPUicsICcxJyk7DQpkZWZpbmUoJ1pDX1ZFUlNJT05fTUlOT1InLCAnNycpOw0KZGVmaW5lKCdaQ19WRVJTSU9OX0JVSUxEJywgJzAnKTsNCmRlZmluZSgnWkNfVkVSU0lPTl9DT01NSVQnLCAnMjgxMCcpOw0KZGVmaW5lKCdaQ19WRVJTSU9OX0NPREVOQU1FJywgJ0JldGEnKTsNCmRlZmluZSgnWkNfVkVSU0lPTicsIFpDX1ZFUlNJT05fTUFKT1IgLiAnLicgLiBaQ19WRVJTSU9OX01JTk9SIC4gJy4nIC4gWkNfVkVSU0lPTl9CVUlMRCAuICcuJyAuIFpDX1ZFUlNJT05fQ09NTUlUKTsNCmRlZmluZSgnWkNfVkVSU0lPTl9ESVNQTEFZJywgWkNfVkVSU0lPTl9NQUpPUiAuICcuJyAuIFpDX1ZFUlNJT05fTUlOT1IgLiAnLicgLiBaQ19WRVJTSU9OX0JVSUxEIC4gJyAnIC4gWkNfVkVSU0lPTl9DT0RFTkFNRSk7DQpkZWZpbmUoJ1pDX1ZFUlNJT05fRlVMTCcsIFpDX1ZFUlNJT04gLiAnICgnIC4gWkNfVkVSU0lPTl9DT0RFTkFNRSAuICcpJyk7DQpkZWZpbmUoJ1pDX0JMT0dfQ09NTUlUJywgWkNfVkVSU0lPTl9DT01NSVQpOyAvLyDkuLrlhpnlhaXns7vnu5/phY3nva7nu5/kuIDpo47moLwNCiRHTE9CQUxTWydibG9ndmVyc2lvbiddID0gWkNfVkVSU0lPTl9NQUpPUiAuIFpDX1ZFUlNJT05fTUlOT1IgLiBaQ19WRVJTSU9OX0NPTU1JVDsNCmRlZmluZSgnWkNfQkxPR19WRVJTSU9OJywgWkNfVkVSU0lPTl9ESVNQTEFZIC4gJyBCdWlsZCAnIC4gJEdMT0JBTFNbJ2Jsb2d2ZXJzaW9uJ10pOw0KZGVmaW5lKCdaQ19MQVNUX1ZFUlNJT04nLCAnMTcyMzcwJyk7IC8v5pWw5o2u5bqT6YeM5YaZ5YWl55qE5pyA5paw55qE5pWw5o2u5bqT54mI5pys5Y+377yI6Z2e57O757uf54mI5pys5Y+377yM5Y+q5pyJ5pu05pS55pWw5o2u5bqT57uT5p6E5omN5Lya5Y+Y5Yqo77yJDQo=</file>
	<file name='zb_system\function\lib\thumb.php' crc32='131AD24C'  dt:dt='bin.base64'></file>
</files>