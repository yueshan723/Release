<files codepage='65001' xmlns:dt='urn:schemas-microsoft-com:datatypes'>
	<file name='zb_system\function\c_system_debug.php' crc32='3F5E426E'  dt:dt='bin.base64'></file>
	<file name='zb_system\function\c_system_common.php' crc32='D1B39F5D'  dt:dt='bin.base64'></file>
	<file name='zb_system\function\c_system_event.php' crc32='61EF3E1F'  dt:dt='bin.base64'></file>
	<file name='zb_system\function\c_system_admin.php' crc32='E2563054'  dt:dt='bin.base64'></file>
	<file name='zb_system\function\lib\template.php' crc32='734C788F'  dt:dt='bin.base64'></file>
	<file name='zb_system\function\lib\zblogphp.php' crc32='EEA916BA'  dt:dt='bin.base64'></file>
	<file name='zb_system\admin\admin_top.php' crc32='426D372E'  dt:dt='bin.base64'>PD9waHAgaWYgKCFkZWZpbmVkKCdaQlBfUEFUSCcpKSB7DQogICAgZXhpdCgnQWNjZXNzIGRlbmllZCcpOyANCn0gPz4NCjwvaGVhZD4NCjxib2R5IGNsYXNzPSJhZG1pbiBhZG1pbi08P3BocCBlY2hvICRhY3Rpb247ID8+Ij4NCjxoZWFkZXIgY2xhc3M9ImhlYWRlciI+DQogICAgPGRpdiBjbGFzcz0ibG9nbyI+PGEgaHJlZj0iPD9waHAgZWNobyAkYmxvZ2hvc3QgPz4iIHRpdGxlPSI8P3BocCBlY2hvIGh0bWxzcGVjaWFsY2hhcnMoJGJsb2duYW1lKSA/PiIgdGFyZ2V0PSJfYmxhbmsiPjxpbWcgc3JjPSI8P3BocCBlY2hvICRibG9naG9zdCA/PnpiX3N5c3RlbS9pbWFnZS9hZG1pbi9ub25lLmdpZiIgYWx0PSJaLUJsb2ciLz48L2E+PC9kaXY+DQogICAgPGRpdiBjbGFzcz0idXNlciI+IDxhIGhyZWY9Ijw/cGhwIGVjaG8gJGJsb2dob3N0ID8+emJfc3lzdGVtL2NtZC5waHA/YWN0PU1lbWJlckVkdCZhbXA7aWQ9PD9waHAgZWNobyAkemJwLT51c2VyLT5JRCA/PiIgdGl0bGU9Ijw/cGhwIGVjaG8gJGxhbmdbJ21zZyddWydlZGl0J10gPz4iPjxpbWcgc3JjPSI8P3BocCBlY2hvICR6YnAtPnVzZXItPkF2YXRhciA/PiIgd2lkdGg9IjQwIiBoZWlnaHQ9IjQwIiBpZD0iYXZhdGFyIiBhbHQ9IkF2YXRhciIgLz48L2E+DQogICAgICA8ZGl2IGNsYXNzPSJ1c2VybmFtZSI+PD9waHAgZWNobyAkemJwLT51c2VyLT5MZXZlbE5hbWUgPz7vvJo8P3BocCBlY2hvICR6YnAtPnVzZXItPlN0YXRpY05hbWUgPz48L2Rpdj4NCiAgICAgIDxkaXYgY2xhc3M9InVzZXJidG4iPjxhIGNsYXNzPSJwcm9maWxlIiBocmVmPSI8P3BocCBlY2hvICRibG9naG9zdCA/PiIgdGl0bGU9IiIgdGFyZ2V0PSJfYmxhbmsiPjw/cGhwIGVjaG8gJGxhbmdbJ21zZyddWydyZXR1cm5fdG9fc2l0ZSddID8+PC9hPiZuYnNwOyZuYnNwOzxhIGNsYXNzPSJsb2dvdXQiIGhyZWY9Ijw/cGhwIGVjaG8gQnVpbGRTYWZlQ21kVVJMKCdhY3Q9bG9nb3V0Jyk7ID8+IiB0aXRsZT0iIj48P3BocCBlY2hvICRsYW5nWydtc2cnXVsnbG9nb3V0J10gPz48L2E+PC9kaXY+DQogICAgPC9kaXY+DQogICAgPGRpdiBjbGFzcz0ibWVudSI+DQogICAgICA8dWwgaWQ9InRvcG1lbnUiPjw/cGhwIFJlc3BvbnNlQWRtaW5fVG9wTWVudSgpOyA/Pg0KICAgICAgPC91bD4NCiAgICA8L2Rpdj4NCjwvaGVhZGVyPg0KPD9waHAgcmVxdWlyZSBaQlBfUEFUSCAuICd6Yl9zeXN0ZW0vYWRtaW4vYWRtaW5fbGVmdC5waHAnOyA/Pg0KPHNlY3Rpb24gY2xhc3M9Im1haW4iPg0KPD9waHAgJHpicC0+R2V0SGludCgpOyA/Pg0K</file>
	<file name='zb_system\defend\createtable\mysql.sql' crc32='6D1077A5'  dt:dt='bin.base64'>Q1JFQVRFIFRBQkxFIElGIE5PVCBFWElTVFMgJXByZSVwb3N0ICgNCiAgbG9nX0lEIGludCgxMSkgTk9UIE5VTEwgQVVUT19JTkNSRU1FTlQsDQogIGxvZ19DYXRlSUQgaW50KDExKSBOT1QgTlVMTCBERUZBVUxUICcwJywNCiAgbG9nX0F1dGhvcklEIGludCgxMSkgTk9UIE5VTEwgREVGQVVMVCAnMCcsDQogIGxvZ19UYWcgdmFyY2hhcigyNTUpIE5PVCBOVUxMIERFRkFVTFQgJycsDQogIGxvZ19TdGF0dXMgdGlueWludCg0KSBOT1QgTlVMTCBERUZBVUxUICcwJywNCiAgbG9nX1R5cGUgaW50KDExKSBOT1QgTlVMTCBERUZBVUxUICcwJywNCiAgbG9nX0FsaWFzIHZhcmNoYXIoMjU1KSBOT1QgTlVMTCBERUZBVUxUICcnLA0KICBsb2dfSXNUb3AgaW50KDExKSBOT1QgTlVMTCBERUZBVUxUICcwJywNCiAgbG9nX0lzTG9jayB0aW55aW50KDQpIE5PVCBOVUxMIERFRkFVTFQgJzAnLA0KICBsb2dfVGl0bGUgdmFyY2hhcigyNTUpIE5PVCBOVUxMIERFRkFVTFQgJycsDQogIGxvZ19JbnRybyB0ZXh0IE5PVCBOVUxMLA0KICBsb2dfQ29udGVudCBsb25ndGV4dCBOT1QgTlVMTCwNCiAgbG9nX1Bvc3RUaW1lIGludCgxMSkgTk9UIE5VTEwgREVGQVVMVCAnMCcsDQogIGxvZ19Db21tTnVtcyBpbnQoMTEpIE5PVCBOVUxMIERFRkFVTFQgJzAnLA0KICBsb2dfVmlld051bXMgaW50KDExKSBOT1QgTlVMTCBERUZBVUxUICcwJywNCiAgbG9nX1RlbXBsYXRlIHZhcmNoYXIoMjU1KSBOT1QgTlVMTCBERUZBVUxUICcnLA0KICBsb2dfTWV0YSBsb25ndGV4dCBOT1QgTlVMTCwNCiAgUFJJTUFSWSBLRVkgKGxvZ19JRCksDQogIEtFWSAlcHJlJWxvZ19UUElTQyAobG9nX1R5cGUsbG9nX1Bvc3RUaW1lLGxvZ19Jc1RvcCxsb2dfU3RhdHVzLGxvZ19DYXRlSUQpDQopIEVOR0lORT1NeUlTQU0gREVGQVVMVCBDSEFSU0VUPXV0ZjggQVVUT19JTkNSRU1FTlQ9MSA7DQoNCg0KQ1JFQVRFIFRBQkxFIElGIE5PVCBFWElTVFMgJXByZSVjYXRlZ29yeSAoDQogIGNhdGVfSUQgaW50KDExKSBOT1QgTlVMTCBBVVRPX0lOQ1JFTUVOVCwNCiAgY2F0ZV9OYW1lIHZhcmNoYXIoMjU1KSBOT1QgTlVMTCBERUZBVUxUICcnLA0KICBjYXRlX09yZGVyIGludCgxMSkgTk9UIE5VTEwgREVGQVVMVCAnMCcsDQogIGNhdGVfVHlwZSBpbnQoMTEpIE5PVCBOVUxMIERFRkFVTFQgJzAnLA0KICBjYXRlX0NvdW50IGludCgxMSkgTk9UIE5VTEwgREVGQVVMVCAnMCcsDQogIGNhdGVfQWxpYXMgdmFyY2hhcigyNTUpIE5PVCBOVUxMIERFRkFVTFQgJycsDQogIGNhdGVfSW50cm8gdGV4dCBOT1QgTlVMTCwNCiAgY2F0ZV9Sb290SUQgaW50KDExKSBOT1QgTlVMTCBERUZBVUxUICcwJywNCiAgY2F0ZV9QYXJlbnRJRCBpbnQoMTEpIE5PVCBOVUxMIERFRkFVTFQgJzAnLA0KICBjYXRlX1RlbXBsYXRlIHZhcmNoYXIoMjU1KSBOT1QgTlVMTCBERUZBVUxUICcnLA0KICBjYXRlX0xvZ1RlbXBsYXRlIHZhcmNoYXIoMjU1KSBOT1QgTlVMTCBERUZBVUxUICcnLA0KICBjYXRlX01ldGEgbG9uZ3RleHQgTk9UIE5VTEwsDQogIFBSSU1BUlkgS0VZIChjYXRlX0lEKSwNCiAgS0VZICVwcmUlY2F0ZV9PcmRlciAoY2F0ZV9PcmRlcikNCikgRU5HSU5FPU15SVNBTSBERUZBVUxUIENIQVJTRVQ9dXRmOCBBVVRPX0lOQ1JFTUVOVD0xIDsNCg0KDQpDUkVBVEUgVEFCTEUgSUYgTk9UIEVYSVNUUyAlcHJlJWNvbW1lbnQgKA0KICBjb21tX0lEIGludCgxMSkgTk9UIE5VTEwgQVVUT19JTkNSRU1FTlQsDQogIGNvbW1fTG9nSUQgaW50KDExKSBOT1QgTlVMTCBERUZBVUxUICcwJywNCiAgY29tbV9Jc0NoZWNraW5nIHRpbnlpbnQoNCkgTk9UIE5VTEwgREVGQVVMVCAnMCcsDQogIGNvbW1fUm9vdElEIGludCgxMSkgTk9UIE5VTEwgREVGQVVMVCAnMCcsDQogIGNvbW1fUGFyZW50SUQgaW50KDExKSBOT1QgTlVMTCBERUZBVUxUICcwJywNCiAgY29tbV9BdXRob3JJRCBpbnQoMTEpIE5PVCBOVUxMIERFRkFVTFQgJzAnLA0KICBjb21tX05hbWUgdmFyY2hhcigyNTUpIE5PVCBOVUxMIERFRkFVTFQgJycsDQogIGNvbW1fRW1haWwgdmFyY2hhcigyNTUpIE5PVCBOVUxMIERFRkFVTFQgJycsDQogIGNvbW1fSG9tZVBhZ2UgdmFyY2hhcigyNTUpIE5PVCBOVUxMIERFRkFVTFQgJycsDQogIGNvbW1fQ29udGVudCB0ZXh0IE5PVCBOVUxMLA0KICBjb21tX1Bvc3RUaW1lIGludCgxMSkgTk9UIE5VTEwgREVGQVVMVCAnMCcsDQogIGNvbW1fSVAgdmFyY2hhcigyNTUpIE5PVCBOVUxMIERFRkFVTFQgJycsDQogIGNvbW1fQWdlbnQgdGV4dCBOT1QgTlVMTCwNCiAgY29tbV9NZXRhIGxvbmd0ZXh0IE5PVCBOVUxMLA0KICBQUklNQVJZIEtFWSAoY29tbV9JRCksDQogIEtFWSAlcHJlJWNvbW1fTFJJIChjb21tX0xvZ0lELGNvbW1fUm9vdElELGNvbW1fSXNDaGVja2luZyksDQogIEtFWSAlcHJlJWNvbW1fSXNDaGVja2luZyAoY29tbV9Jc0NoZWNraW5nKQ0KKSBFTkdJTkU9TXlJU0FNIERFRkFVTFQgQ0hBUlNFVD11dGY4IEFVVE9fSU5DUkVNRU5UPTEgOw0KDQoNCkNSRUFURSBUQUJMRSBJRiBOT1QgRVhJU1RTICVwcmUlY29uZmlnICgNCiAgY29uZl9JRCBpbnQoMTEpIE5PVCBOVUxMIEFVVE9fSU5DUkVNRU5ULA0KICBjb25mX05hbWUgdmFyY2hhcigyNTUpIE5PVCBOVUxMIERFRkFVTFQgJycsDQogIGNvbmZfVmFsdWUgbG9uZ3RleHQgTk9UIE5VTEwsDQogIFBSSU1BUlkgS0VZIChjb25mX0lEKSwNCiAgS0VZICVwcmUlY29uZl9OYW1lIChjb25mX05hbWUpDQopIEVOR0lORT1NeUlTQU0gREVGQVVMVCBDSEFSU0VUPXV0Zjg7DQoNCkNSRUFURSBUQUJMRSBJRiBOT1QgRVhJU1RTICVwcmUlbWVtYmVyICgNCiAgbWVtX0lEIGludCgxMSkgTk9UIE5VTEwgQVVUT19JTkNSRU1FTlQsDQogIG1lbV9HdWlkIHZhcmNoYXIoMzYpIE5PVCBOVUxMIERFRkFVTFQgJycsDQogIG1lbV9MZXZlbCB0aW55aW50KDQpIE5PVCBOVUxMIERFRkFVTFQgJzAnLA0KICBtZW1fU3RhdHVzIHRpbnlpbnQoNCkgTk9UIE5VTEwgREVGQVVMVCAnMCcsDQogIG1lbV9OYW1lIHZhcmNoYXIoMjU1KSBOT1QgTlVMTCBERUZBVUxUICcnLA0KICBtZW1fUGFzc3dvcmQgdmFyY2hhcigyNTUpIE5PVCBOVUxMIERFRkFVTFQgJycsDQogIG1lbV9FbWFpbCB2YXJjaGFyKDI1NSkgTk9UIE5VTEwgREVGQVVMVCAnJywNCiAgbWVtX0hvbWVQYWdlIHZhcmNoYXIoMjU1KSBOT1QgTlVMTCBERUZBVUxUICcnLA0KICBtZW1fSVAgdmFyY2hhcigyNTUpIE5PVCBOVUxMIERFRkFVTFQgJycsDQogIG1lbV9Qb3N0VGltZSBpbnQoMTEpIE5PVCBOVUxMIERFRkFVTFQgJzAnLA0KICBtZW1fQWxpYXMgdmFyY2hhcigyNTUpIE5PVCBOVUxMIERFRkFVTFQgJycsDQogIG1lbV9JbnRybyB0ZXh0IE5PVCBOVUxMLA0KICBtZW1fQXJ0aWNsZXMgaW50KDExKSBOT1QgTlVMTCBERUZBVUxUICcwJywNCiAgbWVtX1BhZ2VzIGludCgxMSkgTk9UIE5VTEwgREVGQVVMVCAnMCcsDQogIG1lbV9Db21tZW50cyBpbnQoMTEpIE5PVCBOVUxMIERFRkFVTFQgJzAnLA0KICBtZW1fVXBsb2FkcyBpbnQoMTEpIE5PVCBOVUxMIERFRkFVTFQgJzAnLA0KICBtZW1fVGVtcGxhdGUgdmFyY2hhcigyNTUpIE5PVCBOVUxMIERFRkFVTFQgJycsDQogIG1lbV9NZXRhIGxvbmd0ZXh0IE5PVCBOVUxMLA0KICBQUklNQVJZIEtFWSAobWVtX0lEKSwNCiAgS0VZICVwcmUlbWVtX05hbWUgKG1lbV9OYW1lKSwNCiAgS0VZICVwcmUlbWVtX0FsaWFzIChtZW1fQWxpYXMpLA0KICBLRVkgJXByZSVtZW1fTGV2ZWwgKG1lbV9MZXZlbCkNCikgRU5HSU5FPU15SVNBTSBERUZBVUxUIENIQVJTRVQ9dXRmOCBBVVRPX0lOQ1JFTUVOVD0xIDsNCg0KDQpDUkVBVEUgVEFCTEUgSUYgTk9UIEVYSVNUUyAlcHJlJW1vZHVsZSAoDQogIG1vZF9JRCBpbnQoMTEpIE5PVCBOVUxMIEFVVE9fSU5DUkVNRU5ULA0KICBtb2RfTmFtZSB2YXJjaGFyKDI1NSkgTk9UIE5VTEwgREVGQVVMVCAnJywNCiAgbW9kX0ZpbGVOYW1lIHZhcmNoYXIoMjU1KSBOT1QgTlVMTCBERUZBVUxUICcnLA0KICBtb2RfQ29udGVudCB0ZXh0IE5PVCBOVUxMLA0KICBtb2RfU2lkZWJhcklEIGludCgxMSkgTk9UIE5VTEwgREVGQVVMVCAnMCcsDQogIG1vZF9IdG1sSUQgdmFyY2hhcigyNTUpIE5PVCBOVUxMIERFRkFVTFQgJycsDQogIG1vZF9UeXBlIHZhcmNoYXIoNSkgTk9UIE5VTEwgREVGQVVMVCAnJywNCiAgbW9kX01heExpIGludCgxMSkgTk9UIE5VTEwgREVGQVVMVCAnMCcsDQogIG1vZF9Tb3VyY2UgdmFyY2hhcigyNTUpIE5PVCBOVUxMIERFRkFVTFQgJycsDQogIG1vZF9Jc0hpZGVUaXRsZSB0aW55aW50KDQpIE5PVCBOVUxMIERFRkFVTFQgJzAnLA0KICBtb2RfTWV0YSBsb25ndGV4dCBOT1QgTlVMTCwNCiAgUFJJTUFSWSBLRVkgKG1vZF9JRCkNCikgRU5HSU5FPU15SVNBTSBERUZBVUxUIENIQVJTRVQ9dXRmOCBBVVRPX0lOQ1JFTUVOVD0xIDsNCg0KDQpDUkVBVEUgVEFCTEUgSUYgTk9UIEVYSVNUUyAlcHJlJXRhZyAoDQogIHRhZ19JRCBpbnQoMTEpIE5PVCBOVUxMIEFVVE9fSU5DUkVNRU5ULA0KICB0YWdfTmFtZSB2YXJjaGFyKDI1NSkgTk9UIE5VTEwgREVGQVVMVCAnJywNCiAgdGFnX09yZGVyIGludCgxMSkgTk9UIE5VTEwgREVGQVVMVCAnMCcsDQogIHRhZ19UeXBlIGludCgxMSkgTk9UIE5VTEwgREVGQVVMVCAnMCcsDQogIHRhZ19Db3VudCBpbnQoMTEpIE5PVCBOVUxMIERFRkFVTFQgJzAnLA0KICB0YWdfQWxpYXMgdmFyY2hhcigyNTUpIE5PVCBOVUxMIERFRkFVTFQgJycsIA0KICB0YWdfSW50cm8gdGV4dCBOT1QgTlVMTCwgIA0KICB0YWdfVGVtcGxhdGUgdmFyY2hhcigyNTUpIE5PVCBOVUxMIERFRkFVTFQgJycsDQogIHRhZ19NZXRhIGxvbmd0ZXh0IE5PVCBOVUxMLA0KICBQUklNQVJZIEtFWSAodGFnX0lEKQ0KKSBFTkdJTkU9TXlJU0FNIERFRkFVTFQgQ0hBUlNFVD11dGY4IEFVVE9fSU5DUkVNRU5UPTEgOw0KDQoNCkNSRUFURSBUQUJMRSBJRiBOT1QgRVhJU1RTICVwcmUldXBsb2FkICgNCiAgdWxfSUQgaW50KDExKSBOT1QgTlVMTCBBVVRPX0lOQ1JFTUVOVCwNCiAgdWxfQXV0aG9ySUQgaW50KDExKSBOT1QgTlVMTCBERUZBVUxUICcwJywNCiAgdWxfU2l6ZSBpbnRlZ2VyIE5PVCBOVUxMIERFRkFVTFQgMCwNCiAgdWxfTmFtZSB2YXJjaGFyKDI1NSkgTk9UIE5VTEwgREVGQVVMVCAnJywNCiAgdWxfU291cmNlTmFtZSB2YXJjaGFyKDI1NSkgTk9UIE5VTEwgREVGQVVMVCAnJywNCiAgdWxfTWltZVR5cGUgdmFyY2hhcigyNTUpIE5PVCBOVUxMIERFRkFVTFQgJycsDQogIHVsX1Bvc3RUaW1lIGludCgxMSkgTk9UIE5VTEwgREVGQVVMVCAnMCcsDQogIHVsX0Rvd25OdW1zIGludCgxMSkgTk9UIE5VTEwgREVGQVVMVCAnMCcsDQogIHVsX0xvZ0lEIGludCgxMSkgTk9UIE5VTEwgREVGQVVMVCAnMCcsICANCiAgdWxfSW50cm8gdGV4dCBOT1QgTlVMTCwNCiAgdWxfTWV0YSBsb25ndGV4dCBOT1QgTlVMTCwNCiAgUFJJTUFSWSBLRVkgKHVsX0lEKQ0KKSBFTkdJTkU9TXlJU0FNIERFRkFVTFQgQ0hBUlNFVD11dGY4IEFVVE9fSU5DUkVNRU5UPTEgOw==</file>
	<file name='zb_system\function\c_system_misc.php' crc32='FA865C0A'  dt:dt='bin.base64'></file>
	<file name='zb_system\function\c_system_version.php' crc32='9D9D4979'  dt:dt='bin.base64'>PD9waHANCg0KaWYgKCFkZWZpbmVkKCdaQlBfUEFUSCcpKSB7DQogICAgZXhpdCgnQWNjZXNzIGRlbmllZCcpOw0KfQ0KLyoNCiAqIOWumuS5ieeJiOacrOWPtw0KDQrov5nmmK8xLjXlj5bmtojnmoTmlbDnu4TvvIzooqvlronmjpLliLDlupTnlKjkuK3lv4PlrqLmiLfnq6/nmoRpbmNsdWRlLnBocOaWh+S7tumHjOOAgg0KI+WumuS5ieeJiOacrOWPt+WIlw0KJHpicHZlcnM9YXJyYXkoKTsNCiR6YnB2ZXJzWycxMzA3MDcnXT0nMS4wIEJldGEgQnVpbGQgMTMwNzA3JzsNCiR6YnB2ZXJzWycxMzExMTEnXT0nMS4wIEJldGEyIEJ1aWxkIDEzMTExMSc7DQokemJwdmVyc1snMTMxMjIxJ109JzEuMSBUYWljaGkgQnVpbGQgMTMxMjIxJzsNCiR6YnB2ZXJzWycxNDAyMjAnXT0nMS4yIEhpcHBvIEJ1aWxkIDE0MDIyMCc7DQokemJwdmVyc1snMTQwNjE0J109JzEuMyBXb25jZSBCdWlsZCAxNDA2MTQnOw0KJHpicHZlcnNbJzE1MDEwMSddPScxLjQgRGVlcGx1ZSBCdWlsZCAxNTAxMDEnOw0KJHpicHZlcnNbJzE1MTYyNiddPScxLjUgWmVybyBCdWlsZCAxNTE2MjYnOw0KDQogKi8NCmRlZmluZSgnWkNfVkVSU0lPTl9NQUpPUicsICcxJyk7DQpkZWZpbmUoJ1pDX1ZFUlNJT05fTUlOT1InLCAnNicpOw0KZGVmaW5lKCdaQ19WRVJTSU9OX0JVSUxEJywgJzAnKTsNCmRlZmluZSgnWkNfVkVSU0lPTl9DT01NSVQnLCAnMjEwNScpOw0KZGVmaW5lKCdaQ19WRVJTSU9OX0NPREVOQU1FJywgJ1ZhbHlyaWEnKTsNCmRlZmluZSgnWkNfVkVSU0lPTicsIFpDX1ZFUlNJT05fTUFKT1IgLiAnLicgLiBaQ19WRVJTSU9OX01JTk9SIC4gJy4nIC4gWkNfVkVSU0lPTl9CVUlMRCAuICcuJyAuIFpDX1ZFUlNJT05fQ09NTUlUKTsNCmRlZmluZSgnWkNfVkVSU0lPTl9ESVNQTEFZJywgWkNfVkVSU0lPTl9NQUpPUiAuICcuJyAuIFpDX1ZFUlNJT05fTUlOT1IgLiAnLicgLiBaQ19WRVJTSU9OX0JVSUxEIC4gJyAnIC4gWkNfVkVSU0lPTl9DT0RFTkFNRSk7DQpkZWZpbmUoJ1pDX1ZFUlNJT05fRlVMTCcsIFpDX1ZFUlNJT04gLiAnICgnIC4gWkNfVkVSU0lPTl9DT0RFTkFNRSAuICcpJyk7DQpkZWZpbmUoJ1pDX0JMT0dfQ09NTUlUJywgWkNfVkVSU0lPTl9DT01NSVQpOyAvLyDkuLrlhpnlhaXns7vnu5/phY3nva7nu5/kuIDpo47moLwNCiRHTE9CQUxTWydibG9ndmVyc2lvbiddID0gWkNfVkVSU0lPTl9NQUpPUiAuIFpDX1ZFUlNJT05fTUlOT1IgLiBaQ19WRVJTSU9OX0NPTU1JVDsNCmRlZmluZSgnWkNfQkxPR19WRVJTSU9OJywgWkNfVkVSU0lPTl9ESVNQTEFZIC4gJyBCdWlsZCAnIC4gJEdMT0JBTFNbJ2Jsb2d2ZXJzaW9uJ10pOw0K</file>
	<file name='zb_system\function\lib\config.php' crc32='2D5C2BEF'  dt:dt='bin.base64'></file>
	<file name='zb_system\function\lib\post.php' crc32='ECAF79E2'  dt:dt='bin.base64'></file>
	<file name='zb_system\function\lib\database\sqlite3.php' crc32='614C0EA0'  dt:dt='bin.base64'>PD9waHANCg0KaWYgKCFkZWZpbmVkKCdaQlBfUEFUSCcpKSB7DQogICAgZXhpdCgnQWNjZXNzIGRlbmllZCcpOw0KfQ0KLyoqDQogKiBTUUxpdGUz5pWw5o2u5bqT5pON5L2c57G7Lg0KICovDQpjbGFzcyBEYXRhYmFzZV9fU1FMaXRlMyBpbXBsZW1lbnRzIERhdGFiYXNlX19JbnRlcmZhY2UNCnsNCiAgICBwdWJsaWMgJHR5cGUgPSAnc3FsaXRlJzsNCiAgICBwdWJsaWMgJHZlcnNpb24gPSAnMyc7DQoNCiAgICAvKioNCiAgICAgKiBAdmFyIHN0cmluZ3xudWxsIOaVsOaNruW6k+WQjeWJjee8gA0KICAgICAqLw0KICAgIHB1YmxpYyAkZGJwcmUgPSBudWxsOw0KICAgIHByaXZhdGUgJGRiID0gbnVsbDsgLy/mlbDmja7lupPov57mjqXlrp7kvosNCiAgICAvKioNCiAgICAgKiBAdmFyIHN0cmluZ3xudWxsIOaVsOaNruW6k+WQjQ0KICAgICAqLw0KICAgIHB1YmxpYyAkZGJuYW1lID0gbnVsbDsNCiAgICAvKioNCiAgICAgKiBAdmFyIERiU3FsfG51bGwNCiAgICAgKi8NCiAgICBwdWJsaWMgJHNxbCA9IG51bGw7DQoNCiAgICAvKioNCiAgICAgKiDmnoTpgKDlh73mlbDvvIzlrp7kvovljJYkc3Fs5Y+C5pWwLg0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBfX2NvbnN0cnVjdCgpDQogICAgew0KICAgICAgICAkdGhpcy0+c3FsID0gbmV3IERiU3FsKCR0aGlzKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBAcGFyYW0gJHMNCiAgICAgKg0KICAgICAqIEByZXR1cm4gc3RyaW5nDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIEVzY2FwZVN0cmluZygkcykNCiAgICB7DQogICAgICAgIHJldHVybiBTUUxpdGUzOjplc2NhcGVTdHJpbmcoJHMpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEBwYXJhbSAkYXJyYXkNCiAgICAgKg0KICAgICAqIEByZXR1cm4gYm9vbA0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBPcGVuKCRhcnJheSkNCiAgICB7DQogICAgICAgIGlmICgkdGhpcy0+ZGIgPSBuZXcgU1FMaXRlMygkYXJyYXlbMF0pKSB7DQogICAgICAgICAgICAkdGhpcy0+ZGJwcmUgPSAkYXJyYXlbMV07DQogICAgICAgICAgICAkdGhpcy0+ZGJuYW1lID0gJGFycmF5WzBdOw0KICAgICAgICAgICAgJHRoaXMtPnZlcnNpb24gPSBzdWJzdHIoR2V0VmFsdWVJbkFycmF5KFNRTGl0ZTM6OnZlcnNpb24oKSwgJ3ZlcnNpb25TdHJpbmcnKSwgMSk7DQoNCiAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgLyoqDQogICAgICog5YWz6Zet5pWw5o2u5bqT6L+e5o6lLg0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBDbG9zZSgpDQogICAgew0KICAgICAgICAkdGhpcy0+ZGItPmNsb3NlKCk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogQHBhcmFtICRzDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIFF1ZXJ5TXVsaXQoJHMpDQogICAgew0KICAgICAgICByZXR1cm4gJHRoaXMtPlF1ZXJ5TXVsdGkoJHMpOw0KICAgIH0NCg0KICAgIC8v6ZSZ5Yir5a2X5Ye95pWw77yM5Y6G5Y+y5Y6f5Zug5L+d55WZ5LiL5p2lDQoNCiAgICBwdWJsaWMgZnVuY3Rpb24gUXVlcnlNdWx0aSgkcykNCiAgICB7DQogICAgICAgIC8vJGE9ZXhwbG9kZSgnOycsc3RyX3JlcGxhY2UoJyVwcmUlJywgJHRoaXMtPmRicHJlLCAkcykpOw0KICAgICAgICAkYSA9IGV4cGxvZGUoJzsnLCAkcyk7DQogICAgICAgIGZvcmVhY2ggKCRhIGFzICRzKSB7DQogICAgICAgICAgICAkcyA9IHRyaW0oJHMpOw0KICAgICAgICAgICAgaWYgKCRzICE9ICcnKSB7DQogICAgICAgICAgICAgICAgJHRoaXMtPmRiLT5xdWVyeSgkdGhpcy0+c3FsLT5GaWx0ZXIoJHMpKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEBwYXJhbSAkcXVlcnkNCiAgICAgKg0KICAgICAqIEByZXR1cm4gYXJyYXkNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gUXVlcnkoJHF1ZXJ5KQ0KICAgIHsNCiAgICAgICAgLy8kcXVlcnk9c3RyX3JlcGxhY2UoJyVwcmUlJywgJHRoaXMtPmRicHJlLCAkcXVlcnkpOw0KICAgICAgICAvLyDpgY3ljoblh7rmnaUNCiAgICAgICAgJHJlc3VsdHMgPSAkdGhpcy0+ZGItPnF1ZXJ5KCR0aGlzLT5zcWwtPkZpbHRlcigkcXVlcnkpKTsNCiAgICAgICAgJGRhdGEgPSBhcnJheSgpOw0KICAgICAgICBpZiAoISgkcmVzdWx0cyBpbnN0YW5jZW9mIFNxbGl0ZTNSZXN1bHQpKSB7DQogICAgICAgICAgICByZXR1cm4gYXJyYXkoJHJlc3VsdHMpOw0KICAgICAgICB9DQogICAgICAgIGlmICgkcmVzdWx0cy0+bnVtQ29sdW1ucygpID4gMCkgew0KICAgICAgICAgICAgd2hpbGUgKCRyb3cgPSAkcmVzdWx0cy0+ZmV0Y2hBcnJheSgpKSB7DQogICAgICAgICAgICAgICAgJGRhdGFbXSA9ICRyb3c7DQogICAgICAgICAgICB9DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAkZGF0YVtdID0gJHJlc3VsdHMtPm51bUNvbHVtbnMoKTsNCiAgICAgICAgfQ0KDQogICAgICAgIHJldHVybiAkZGF0YTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBAcGFyYW0gJHF1ZXJ5DQogICAgICoNCiAgICAgKiBAcmV0dXJuIG1peGVkDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIFVwZGF0ZSgkcXVlcnkpDQogICAgew0KICAgICAgICAvLyRxdWVyeT1zdHJfcmVwbGFjZSgnJXByZSUnLCAkdGhpcy0+ZGJwcmUsICRxdWVyeSk7DQogICAgICAgIHJldHVybiAkdGhpcy0+ZGItPnF1ZXJ5KCR0aGlzLT5zcWwtPkZpbHRlcigkcXVlcnkpKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBAcGFyYW0gJHF1ZXJ5DQogICAgICoNCiAgICAgKiBAcmV0dXJuIG1peGVkDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIERlbGV0ZSgkcXVlcnkpDQogICAgew0KICAgICAgICAvLyRxdWVyeT1zdHJfcmVwbGFjZSgnJXByZSUnLCAkdGhpcy0+ZGJwcmUsICRxdWVyeSk7DQogICAgICAgIHJldHVybiAkdGhpcy0+ZGItPnF1ZXJ5KCR0aGlzLT5zcWwtPkZpbHRlcigkcXVlcnkpKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBAcGFyYW0gJHF1ZXJ5DQogICAgICoNCiAgICAgKiBAcmV0dXJuIG1peGVkDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIEluc2VydCgkcXVlcnkpDQogICAgew0KICAgICAgICAvLyRxdWVyeT1zdHJfcmVwbGFjZSgnJXByZSUnLCAkdGhpcy0+ZGJwcmUsICRxdWVyeSk7DQogICAgICAgICR0aGlzLT5kYi0+cXVlcnkoJHRoaXMtPnNxbC0+RmlsdGVyKCRxdWVyeSkpOw0KDQogICAgICAgIHJldHVybiAkdGhpcy0+ZGItPmxhc3RJbnNlcnRSb3dJRCgpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEBwYXJhbSAkdGFibGUNCiAgICAgKiBAcGFyYW0gJGRhdGFpbmZvDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIENyZWF0ZVRhYmxlKCR0YWJsZSwgJGRhdGFpbmZvKQ0KICAgIHsNCiAgICAgICAgJHRoaXMtPlF1ZXJ5TXVsaXQoJHRoaXMtPnNxbC0+Q3JlYXRlVGFibGUoJHRhYmxlLCAkZGF0YWluZm8pKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBAcGFyYW0gJHRhYmxlDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIERlbFRhYmxlKCR0YWJsZSkNCiAgICB7DQogICAgICAgICR0aGlzLT5RdWVyeU11bGl0KCR0aGlzLT5zcWwtPkRlbFRhYmxlKCR0YWJsZSkpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEBwYXJhbSAkdGFibGUNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gRXhpc3RUYWJsZSgkdGFibGUpDQogICAgew0KICAgICAgICAkYSA9ICR0aGlzLT5RdWVyeSgkdGhpcy0+c3FsLT5FeGlzdFRhYmxlKCR0YWJsZSkpOw0KICAgICAgICBpZiAoIWlzX2FycmF5KCRhKSkgew0KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICB9DQoNCiAgICAgICAgJGIgPSBjdXJyZW50KCRhKTsNCiAgICAgICAgaWYgKCFpc19hcnJheSgkYikpIHsNCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgfQ0KDQogICAgICAgICRjID0gKGludCkgY3VycmVudCgkYik7DQogICAgICAgIGlmICgkYyA+IDApIHsNCiAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICB9DQogICAgfQ0KfQ0K</file>
	<file name='zb_system\function\lib\network\curl.php' crc32='9F862E48'  dt:dt='bin.base64'></file>
	<file name='zb_system\function\lib\network\filegetcontents.php' crc32='1000E616'  dt:dt='bin.base64'></file>
	<file name='zb_system\function\lib\network\fsockopen.php' crc32='FA0C09C0'  dt:dt='bin.base64'>PD9waHANCg0KaWYgKCFkZWZpbmVkKCdaQlBfUEFUSCcpKSB7DQogICAgZXhpdCgnQWNjZXNzIGRlbmllZCcpOw0KfQ0KLyoqDQogKiBzb2Nr57G7Lg0KICovDQpjbGFzcyBOZXR3b3JrX19mc29ja29wZW4gaW1wbGVtZW50cyBOZXR3b3JrX19JbnRlcmZhY2UNCnsNCg0KICAgIHByaXZhdGUgJHJlYWR5U3RhdGUgPSAwOyAvL+eKtuaAgQ0KDQogICAgcHJpdmF0ZSAkcmVzcG9uc2VCb2R5ID0gbnVsbDsgLy/ov5Tlm57nmoTkuozov5vliLYNCg0KICAgIHByaXZhdGUgJHJlc3BvbnNlU3RyZWFtID0gbnVsbDsgLy/ov5Tlm57nmoTmlbDmja7mtYENCg0KICAgIHByaXZhdGUgJHJlc3BvbnNlVGV4dCA9ICcnOyAvL+i/lOWbnueahOaVsOaNrg0KDQogICAgcHJpdmF0ZSAkcmVzcG9uc2VYTUwgPSBudWxsOyAvL+WwneivleaKinJlc3BvbnNlVGV4dOagvOW8j+WMluS4ulhNTERvbQ0KDQogICAgcHJpdmF0ZSAkc3RhdHVzID0gMDsgLy/nirbmgIHnoIENCg0KICAgIHByaXZhdGUgJHN0YXR1c1RleHQgPSAnJzsgLy/nirbmgIHnoIHmlofmnKwNCg0KICAgIHByaXZhdGUgJHJlc3BvbnNlVmVyc2lvbiA9ICcnOyAvL+i/lOWbnueahEhUVFDniYjkvZMNCg0KICAgIHByaXZhdGUgJG9wdGlvbiA9IGFycmF5KCk7DQoNCiAgICBwcml2YXRlICR1cmwgPSAnJzsNCg0KICAgIHByaXZhdGUgJHBvc3RkYXRhID0gYXJyYXkoKTsNCg0KICAgIHByaXZhdGUgJGh0dHBoZWFkZXIgPSBhcnJheSgpOw0KDQogICAgcHJpdmF0ZSAkcmVzcG9uc2VIZWFkZXIgPSBhcnJheSgpOw0KDQogICAgcHJpdmF0ZSAkcGFyc2VkX3VybCA9IGFycmF5KCk7DQoNCiAgICBwcml2YXRlICR0aW1lb3V0ID0gMzA7DQoNCiAgICBwcml2YXRlICRlcnJzdHIgPSAnJzsNCg0KICAgIHByaXZhdGUgJGVycm5vID0gMDsNCg0KICAgIHByaXZhdGUgJGlzZ3ppcCA9IGZhbHNlOw0KDQogICAgcHJpdmF0ZSAkbWF4cmVkaXJzID0gMDsNCg0KICAgIHByaXZhdGUgJGNhbnJlaW5pdCA9IHRydWU7DQoNCiAgICBwcml2YXRlICRfX2lzQmluYXJ5ID0gZmFsc2U7DQoNCiAgICBwcml2YXRlICRfX2JvdW5kYXJ5ID0gJyc7DQoNCiAgICAvKioNCiAgICAgKiBAcGFyYW0gJHByb3BlcnR5X25hbWUNCiAgICAgKiBAcGFyYW0gJHZhbHVlDQogICAgICoNCiAgICAgKiBAdGhyb3dzIEV4Y2VwdGlvbg0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBfX3NldCgkcHJvcGVydHlfbmFtZSwgJHZhbHVlKQ0KICAgIHsNCiAgICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbigkcHJvcGVydHlfbmFtZSAuICcgcmVhZG9ubHknKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBAcGFyYW0gJHByb3BlcnR5X25hbWUNCiAgICAgKg0KICAgICAqIEByZXR1cm4gbWl4ZWQNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gX19nZXQoJHByb3BlcnR5X25hbWUpDQogICAgew0KICAgICAgICBpZiAoc3RydG9sb3dlcigkcHJvcGVydHlfbmFtZSkgPT0gJ3Jlc3BvbnNleG1sJykgew0KICAgICAgICAgICAgJHcgPSBuZXcgRE9NRG9jdW1lbnQoKTsNCg0KICAgICAgICAgICAgcmV0dXJuICR3LT5sb2FkWE1MKCR0aGlzLT5yZXNwb25zZVRleHQpOw0KICAgICAgICB9IGVsc2VpZiAoc3RydG9sb3dlcigkcHJvcGVydHlfbmFtZSkgPT0gJ3NjaGVtZScNCiAgICAgICAgICAgIHx8IHN0cnRvbG93ZXIoJHByb3BlcnR5X25hbWUpID09ICdob3N0Jw0KICAgICAgICAgICAgfHwgc3RydG9sb3dlcigkcHJvcGVydHlfbmFtZSkgPT0gJ3BvcnQnDQogICAgICAgICAgICB8fCBzdHJ0b2xvd2VyKCRwcm9wZXJ0eV9uYW1lKSA9PSAndXNlcicNCiAgICAgICAgICAgIHx8IHN0cnRvbG93ZXIoJHByb3BlcnR5X25hbWUpID09ICdwYXNzJw0KICAgICAgICAgICAgfHwgc3RydG9sb3dlcigkcHJvcGVydHlfbmFtZSkgPT0gJ3BhdGgnDQogICAgICAgICAgICB8fCBzdHJ0b2xvd2VyKCRwcm9wZXJ0eV9uYW1lKSA9PSAncXVlcnknDQogICAgICAgICAgICB8fCBzdHJ0b2xvd2VyKCRwcm9wZXJ0eV9uYW1lKSA9PSAnZnJhZ21lbnQnDQogICAgICAgICkgew0KICAgICAgICAgICAgaWYgKGlzc2V0KCR0aGlzLT5wYXJzZWRfdXJsW3N0cnRvbG93ZXIoJHByb3BlcnR5X25hbWUpXSkpIHsNCiAgICAgICAgICAgICAgICByZXR1cm4gJHRoaXMtPnBhcnNlZF91cmxbc3RydG9sb3dlcigkcHJvcGVydHlfbmFtZSldOw0KICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICByZXR1cm47DQogICAgICAgICAgICB9DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICByZXR1cm4gJHRoaXMtPiRwcm9wZXJ0eV9uYW1lOw0KICAgICAgICB9DQogICAgfQ0KDQogICAgcHVibGljIGZ1bmN0aW9uIGFib3J0KCkNCiAgICB7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogQHJldHVybiBzdHJpbmcNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkNCiAgICB7DQogICAgICAgIHJldHVybiBpbXBsb2RlKCJcclxuIiwgJHRoaXMtPnJlc3BvbnNlSGVhZGVyKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBAcGFyYW0gJGJzdHJIZWFkZXINCiAgICAgKg0KICAgICAqIEByZXR1cm4gc3RyaW5nDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIGdldFJlc3BvbnNlSGVhZGVyKCRic3RySGVhZGVyKQ0KICAgIHsNCiAgICAgICAgJG5hbWUgPSBzdHJ0b2xvd2VyKCRic3RySGVhZGVyKTsNCiAgICAgICAgZm9yZWFjaCAoJHRoaXMtPnJlc3BvbnNlSGVhZGVyIGFzICR3KSB7DQogICAgICAgICAgICBpZiAoc3RydG9sb3dlcihzdWJzdHIoJHcsIDAsIHN0cnBvcygkdywgJzonKSkpID09ICRuYW1lKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuIHN1YnN0cihzdHJzdHIoJHcsICc6ICcpLCAyKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIHJldHVybiAnJzsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBAcGFyYW0gJHJlc29sdmVUaW1lb3V0DQogICAgICogQHBhcmFtICRjb25uZWN0VGltZW91dA0KICAgICAqIEBwYXJhbSAkc2VuZFRpbWVvdXQNCiAgICAgKiBAcGFyYW0gJHJlY2VpdmVUaW1lb3V0DQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIHNldFRpbWVPdXRzKCRyZXNvbHZlVGltZW91dCwgJGNvbm5lY3RUaW1lb3V0LCAkc2VuZFRpbWVvdXQsICRyZWNlaXZlVGltZW91dCkNCiAgICB7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogQHBhcmFtICRic3RyTWV0aG9kDQogICAgICogQHBhcmFtICRic3RyVXJsDQogICAgICogQHBhcmFtIGJvb2wgICAkdmFyQXN5bmMNCiAgICAgKiBAcGFyYW0gc3RyaW5nICRic3RyVXNlcg0KICAgICAqIEBwYXJhbSBzdHJpbmcgJGJzdHJQYXNzd29yZA0KICAgICAqDQogICAgICogQHRocm93cyBFeGNlcHRpb24NCiAgICAgKg0KICAgICAqIEByZXR1cm4gYm9vbA0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBvcGVuKCRic3RyTWV0aG9kLCAkYnN0clVybCwgJHZhckFzeW5jID0gdHJ1ZSwgJGJzdHJVc2VyID0gJycsICRic3RyUGFzc3dvcmQgPSAnJykNCiAgICB7DQogICAgICAgIC8vQXN5bmPml6DnlKgNCiAgICAgICAgLy/liJ3lp4vljJblj5jph48NCiAgICAgICAgJHRoaXMtPnJlaW5pdCgpOw0KICAgICAgICAkbWV0aG9kID0gc3RydG91cHBlcigkYnN0ck1ldGhvZCk7DQogICAgICAgICR0aGlzLT5vcHRpb25bJ21ldGhvZCddID0gJG1ldGhvZDsNCg0KICAgICAgICAkdGhpcy0+cGFyc2VkX3VybCA9IHBhcnNlX3VybCgkYnN0clVybCk7DQogICAgICAgIGlmICghJHRoaXMtPnBhcnNlZF91cmwpIHsNCiAgICAgICAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oJ1VSTCBTeW50YXggRXJyb3IhJyk7DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAvL2JzdHJVc2VyICYgYnN0clBhc3N3b3JkID8NCiAgICAgICAgICAgIGlmICghaXNzZXQoJHRoaXMtPnBhcnNlZF91cmxbJ3BvcnQnXSkpIHsNCiAgICAgICAgICAgICAgICBpZiAoJHRoaXMtPnBhcnNlZF91cmxbJ3NjaGVtZSddID09ICdodHRwcycpIHsNCiAgICAgICAgICAgICAgICAgICAgJHRoaXMtPnBhcnNlZF91cmxbJ3BvcnQnXSA9IDQ0MzsNCiAgICAgICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICAkdGhpcy0+cGFyc2VkX3VybFsncG9ydCddID0gODA7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgcmV0dXJuIHRydWU7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogQHBhcmFtIHN0cmluZyAkdmFyQm9keQ0KICAgICAqDQogICAgICogQHRocm93cyBFeGNlcHRpb24NCiAgICAgKg0KICAgICAqIEByZXR1cm4gbWl4ZWR8dm9pZA0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBzZW5kKCR2YXJCb2R5ID0gJycpDQogICAgew0KICAgICAgICAkZGF0YSA9ICR2YXJCb2R5Ow0KICAgICAgICBpZiAoaXNfYXJyYXkoJGRhdGEpKSB7DQogICAgICAgICAgICAkZGF0YSA9IGh0dHBfYnVpbGRfcXVlcnkoJGRhdGEpOw0KICAgICAgICB9DQoNCiAgICAgICAgaWYgKCR0aGlzLT5vcHRpb25bJ21ldGhvZCddID09ICdQT1NUJykgew0KICAgICAgICAgICAgaWYgKGlzX2FycmF5KCR2YXJCb2R5KSAmJiBjb3VudCgkdGhpcy0+cG9zdGRhdGEpID4gMCkgew0KICAgICAgICAgICAgICAgIGZvcmVhY2ggKCR2YXJCb2R5IGFzICRrZXkgPT4gJHZhbHVlKSB7DQogICAgICAgICAgICAgICAgICAgICR0aGlzLT5hZGRfcG9zdGRhdGEoJGtleSwgJHZhbHVlKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgJGRhdGEgPSAnJzsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGlmICgkZGF0YSA9PSAnJykgew0KICAgICAgICAgICAgICAgICRkYXRhID0gJHRoaXMtPl9fYnVpbGRQb3N0RGF0YSgpOyAvL2h0dHBfYnVpbGRfcXVlcnkoJHRoaXMtPnBvc3RkYXRhKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgICR0aGlzLT5vcHRpb25bJ2NvbnRlbnQnXSA9ICRkYXRhOw0KICAgICAgICAgICAgaWYgKCFpc3NldCgkdGhpcy0+aHR0cGhlYWRlclsnQ29udGVudC1UeXBlJ10pKSB7DQogICAgICAgICAgICAgICAgaWYgKCR0aGlzLT5fX2lzQmluYXJ5KSB7DQogICAgICAgICAgICAgICAgICAgICR0aGlzLT5odHRwaGVhZGVyWydDb250ZW50LVR5cGUnXSA9ICdDb250ZW50LVR5cGU6IG11bHRpcGFydC9mb3JtLWRhdGE7IGJvdW5kYXJ5PScgLiAkdGhpcy0+X19ib3VuZGFyeTsNCiAgICAgICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICAkdGhpcy0+aHR0cGhlYWRlclsnQ29udGVudC1UeXBlJ10gPSAnQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgICR0aGlzLT5odHRwaGVhZGVyWydDb250ZW50LUxlbmd0aCddID0gJ0NvbnRlbnQtTGVuZ3RoOiAnIC4gc3RybGVuKCRkYXRhKTsNCiAgICAgICAgfQ0KDQogICAgICAgICR0aGlzLT5odHRwaGVhZGVyW10gPSAnSG9zdDogJyAuICR0aGlzLT5wYXJzZWRfdXJsWydob3N0J107DQogICAgICAgIC8vJHRoaXMtPmh0dHBoZWFkZXJbXSA9ICdSZWZlcmVyOiAnIC4gJ2h0dHA6Ly8nLiRfU0VSVkVSWydIVFRQX0hPU1QnXS4kX1NFUlZFUlsnUkVRVUVTVF9VUkknXTsNCiAgICAgICAgJHRoaXMtPmh0dHBoZWFkZXJbXSA9ICdDb25uZWN0aW9uOiBjbG9zZSc7DQoNCiAgICAgICAgaWYgKCFpc3NldCgkdGhpcy0+aHR0cGhlYWRlclsnQWNjZXB0J10pKSB7DQogICAgICAgICAgICBpZiAoaXNzZXQoJF9TRVJWRVJbJ0hUVFBfQUNDRVBUJ10pKSB7DQogICAgICAgICAgICAgICAgJHRoaXMtPmh0dHBoZWFkZXJbJ0FjY2VwdCddID0gJ0FjY2VwdDonIC4gJF9TRVJWRVJbJ0hUVFBfQUNDRVBUJ107DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICBpZiAoIWlzc2V0KCR0aGlzLT5odHRwaGVhZGVyWydBY2NlcHQtTGFuZ3VhZ2UnXSkpIHsNCiAgICAgICAgICAgIGlmIChpc3NldCgkX1NFUlZFUlsnSFRUUF9BQ0NFUFRfTEFOR1VBR0UnXSkpIHsNCiAgICAgICAgICAgICAgICAkdGhpcy0+aHR0cGhlYWRlclsnQWNjZXB0LUxhbmd1YWdlJ10gPSAnQWNjZXB0LUxhbmd1YWdlOiAnIC4gJF9TRVJWRVJbJ0hUVFBfQUNDRVBUX0xBTkdVQUdFJ107DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICBpZiAoJHRoaXMtPmlzZ3ppcCA9PSB0cnVlKSB7DQogICAgICAgICAgICAkdGhpcy0+aHR0cGhlYWRlclsnQWNjZXB0LUVuY29kaW5nJ10gPSAnQWNjZXB0LUVuY29kaW5nOiBnemlwJzsNCiAgICAgICAgfQ0KDQogICAgICAgICR0aGlzLT5vcHRpb25bJ2hlYWRlciddID0gaW1wbG9kZSgiXHJcbiIsICR0aGlzLT5odHRwaGVhZGVyKTsNCg0KICAgICAgICBaQmxvZ0V4Y2VwdGlvbjo6U3VzcGVuZEVycm9ySG9vaygpOw0KICAgICAgICAkc29ja2V0ID0gZnNvY2tvcGVuKA0KICAgICAgICAgICAgKCR0aGlzLT5zY2hlbWUgPT0gJ2h0dHBzJyA/ICdzc2w6Ly8nIDogJycpIC4gJHRoaXMtPnBhcnNlZF91cmxbJ2hvc3QnXSwNCiAgICAgICAgICAgICR0aGlzLT5wb3J0LA0KICAgICAgICAgICAgJHRoaXMtPmVycm5vLA0KICAgICAgICAgICAgJHRoaXMtPmVycnN0ciwNCiAgICAgICAgICAgICR0aGlzLT50aW1lb3V0DQogICAgICAgICk7DQogICAgICAgIFpCbG9nRXhjZXB0aW9uOjpTdXNwZW5kRXJyb3JIb29rKCk7DQogICAgICAgIGlmICghJHNvY2tldCkgew0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQoNCiAgICAgICAgJHVybCA9ICR0aGlzLT5vcHRpb25bJ21ldGhvZCddIC4gJyAnIC4gKCR0aGlzLT5wYXJzZWRfdXJsWydwYXRoJ10gPT0gJycgPyAnLycgOiAkdGhpcy0+cGFyc2VkX3VybFsncGF0aCddKTsNCg0KICAgICAgICBpZiAoaXNzZXQoJHRoaXMtPnBhcnNlZF91cmxbInF1ZXJ5Il0pKSB7DQogICAgICAgICAgICAkdXJsIC49ICI/IiAuICR0aGlzLT5wYXJzZWRfdXJsWyJxdWVyeSJdOw0KICAgICAgICB9DQogICAgICAgIGZ3cml0ZSgNCiAgICAgICAgICAgICRzb2NrZXQsDQogICAgICAgICAgICAkdXJsIC4gJyBIVFRQLzEuMCcgLiAiXHJcbiIgLy8gTm90IHN1cHBvcnQgMTAwIENvbnRpbnVlDQogICAgICAgICk7DQogICAgICAgIGZ3cml0ZSgkc29ja2V0LCAkdGhpcy0+b3B0aW9uWydoZWFkZXInXSAuICJcclxuIik7DQogICAgICAgIGZ3cml0ZSgkc29ja2V0LCAiXHJcbiIpOw0KICAgICAgICBpZiAoaXNzZXQoJHRoaXMtPm9wdGlvblsnY29udGVudCddKSkgew0KICAgICAgICAgICAgZndyaXRlKCRzb2NrZXQsICR0aGlzLT5vcHRpb25bJ2NvbnRlbnQnXSAuICJcclxuIik7DQogICAgICAgICAgICBmd3JpdGUoJHNvY2tldCwgIlxyXG4iKTsNCiAgICAgICAgfQ0KICAgICAgICAkdGhpcy0+cmVzcG9uc2VUZXh0ID0gJyc7DQogICAgICAgIHdoaWxlICghZmVvZigkc29ja2V0KSkgew0KICAgICAgICAgICAgJHRoaXMtPnJlc3BvbnNlVGV4dCAuPSBmZ2V0cygkc29ja2V0LCAxMjgpOw0KICAgICAgICB9DQoNCiAgICAgICAgJHRoaXMtPnJlc3BvbnNlSGVhZGVyID0gc3Vic3RyKCR0aGlzLT5yZXNwb25zZVRleHQsIDAsIHN0cnBvcygkdGhpcy0+cmVzcG9uc2VUZXh0LCAiXHJcblxyXG4iKSk7DQoNCiAgICAgICAgJHRoaXMtPnJlc3BvbnNlVGV4dCA9IHN1YnN0cigkdGhpcy0+cmVzcG9uc2VUZXh0LCAoc3RycG9zKCR0aGlzLT5yZXNwb25zZVRleHQsICJcclxuXHJcbiIpICsgNCkpOw0KDQogICAgICAgICR0aGlzLT5yZXNwb25zZUhlYWRlciA9IGV4cGxvZGUoIlxyXG4iLCAkdGhpcy0+cmVzcG9uc2VIZWFkZXIpOw0KDQogICAgICAgICRpID0gJHRoaXMtPm1heHJlZGlyczsNCiAgICAgICAgaWYgKCR0aGlzLT5tYXhyZWRpcnMgPiAwKSB7DQogICAgICAgICAgICBpZiAoc3Ryc3RyKCR0aGlzLT5yZXNwb25zZUhlYWRlclswXSwgJyAzMDEgJykNCiAgICAgICAgICAgICAgICB8fCBzdHJzdHIoJHRoaXMtPnJlc3BvbnNlSGVhZGVyWzBdLCAnIDMwMiAnKQ0KICAgICAgICAgICAgICAgIHx8IHN0cnN0cigkdGhpcy0+cmVzcG9uc2VIZWFkZXJbMF0sICcgMzAzICcpDQogICAgICAgICAgICAgICAgfHwgc3Ryc3RyKCR0aGlzLT5yZXNwb25zZUhlYWRlclswXSwgJyAzMDcgJykNCiAgICAgICAgICAgICkgew0KICAgICAgICAgICAgICAgIGZjbG9zZSgkc29ja2V0KTsNCiAgICAgICAgICAgICAgICAkdXJsID0gJHRoaXMtPmdldFJlc3BvbnNlSGVhZGVyKCdMb2NhdGlvbicpOw0KICAgICAgICAgICAgICAgICR0aGlzLT5jYW5yZWluaXQgPSBmYWxzZTsNCiAgICAgICAgICAgICAgICAkdGhpcy0+b3BlbignR2V0JywgJHVybCk7DQogICAgICAgICAgICAgICAgJHRoaXMtPnNldE1heFJlZGlycygkaSAtIDEpOw0KICAgICAgICAgICAgICAgICR0aGlzLT5jYW5yZWluaXQgPSB0cnVlOw0KDQogICAgICAgICAgICAgICAgcmV0dXJuICR0aGlzLT5zZW5kKCk7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICBpZiAoJHRoaXMtPmdldFJlc3BvbnNlSGVhZGVyKCdUcmFuc2Zlci1FbmNvZGluZycpID09ICdjaHVua2VkJykgew0KICAgICAgICAgICAgaWYgKCFmdW5jdGlvbl9leGlzdHMoJ2h0dHBfY2h1bmtlZF9kZWNvZGUnKSkgew0KICAgICAgICAgICAgICAgICR0aGlzLT5yZXNwb25zZVRleHQgPSAkdGhpcy0+aHR0cF9jaHVua2VkX2RlY29kZSgkdGhpcy0+cmVzcG9uc2VUZXh0KTsNCiAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgJHRoaXMtPnJlc3BvbnNlVGV4dCA9IGh0dHBfY2h1bmtlZF9kZWNvZGUoJHRoaXMtPnJlc3BvbnNlVGV4dCk7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICBpZiAoJHRoaXMtPmdldFJlc3BvbnNlSGVhZGVyKCdDb250ZW50LUVuY29kaW5nJykgPT0gJ2d6aXAnKSB7DQogICAgICAgICAgICBpZiAoIWZ1bmN0aW9uX2V4aXN0cygnZ3pkZWNvZGUnKSkgew0KICAgICAgICAgICAgICAgICR0aGlzLT5yZXNwb25zZVRleHQgPSAkdGhpcy0+Z3pkZWNvZGUoJHRoaXMtPnJlc3BvbnNlVGV4dCk7DQogICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgICR0aGlzLT5yZXNwb25zZVRleHQgPSBnemRlY29kZSgkdGhpcy0+cmVzcG9uc2VUZXh0KTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIGlmIChpc3NldCgkdGhpcy0+cmVzcG9uc2VIZWFkZXJbMF0pKSB7DQogICAgICAgICAgICAkdGhpcy0+c3RhdHVzVGV4dCA9ICR0aGlzLT5yZXNwb25zZUhlYWRlclswXTsNCiAgICAgICAgICAgICRhID0gZXhwbG9kZSgnICcsICR0aGlzLT5zdGF0dXNUZXh0KTsNCiAgICAgICAgICAgIGlmIChpc3NldCgkYVswXSkpIHsNCiAgICAgICAgICAgICAgICAkdGhpcy0+cmVzcG9uc2VWZXJzaW9uID0gJGFbMF07DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIGlmIChpc3NldCgkYVsxXSkpIHsNCiAgICAgICAgICAgICAgICAkdGhpcy0+c3RhdHVzID0gJGFbMV07DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIHVuc2V0KCR0aGlzLT5yZXNwb25zZUhlYWRlclswXSk7DQogICAgICAgIH0NCg0KICAgICAgICBmY2xvc2UoJHNvY2tldCk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogQHBhcmFtICRic3RySGVhZGVyDQogICAgICogQHBhcmFtICRic3RyVmFsdWUNCiAgICAgKiBAcGFyYW0gYm9vbCAkYXBwZW5kDQogICAgICoNCiAgICAgKiBAcmV0dXJuIGJvb2wNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gc2V0UmVxdWVzdEhlYWRlcigkYnN0ckhlYWRlciwgJGJzdHJWYWx1ZSwgJGFwcGVuZCA9IGZhbHNlKQ0KICAgIHsNCiAgICAgICAgaWYgKCRhcHBlbmQgPT0gZmFsc2UpIHsNCiAgICAgICAgICAgICR0aGlzLT5odHRwaGVhZGVyWyRic3RySGVhZGVyXSA9ICRic3RySGVhZGVyIC4gJzogJyAuICRic3RyVmFsdWU7DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICBpZiAoaXNzZXQoJHRoaXMtPmh0dHBoZWFkZXJbJGJzdHJIZWFkZXJdKSkgew0KICAgICAgICAgICAgICAgICR0aGlzLT5odHRwaGVhZGVyWyRic3RySGVhZGVyXSA9ICR0aGlzLT5odHRwaGVhZGVyWyRic3RySGVhZGVyXSAuICRic3RyVmFsdWU7DQogICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgICR0aGlzLT5odHRwaGVhZGVyWyRic3RySGVhZGVyXSA9ICRic3RySGVhZGVyIC4gJzogJyAuICRic3RyVmFsdWU7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBAcGFyYW0gJGJzdHJJdGVtDQogICAgICogQHBhcmFtICRic3RyVmFsdWUNCiAgICAgKi8NCiAgICBwcml2YXRlIGZ1bmN0aW9uIGFkZF9wb3N0ZGF0YSgkYnN0ckl0ZW0sICRic3RyVmFsdWUpDQogICAgew0KICAgICAgICAkdGhpcy0+cG9zdGRhdGFbJGJzdHJJdGVtXSA9IGFycmF5KA0KICAgICAgICAgICAgJ2RhdGEnID0+ICRic3RyVmFsdWUsDQogICAgICAgICAgICAndHlwZScgPT4gJ3RleHQnLA0KICAgICAgICApOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEBwYXJhbSBzdHJpbmcgJG5hbWUNCiAgICAgKiBAcGFyYW0gc3RyaW5nICRlbnRpdHkNCiAgICAgKg0KICAgICAqIEByZXR1cm4gbWl4ZWQNCiAgICAgKi8NCiAgICBwdWJsaWMgZnVuY3Rpb24gYWRkQmluYXJ5KCRuYW1lLCAkZW50aXR5LCAkZmlsZW5hbWUgPSBudWxsLCAkbWltZSA9ICcnKQ0KICAgIHsNCiAgICAgICAgJHRoaXMtPl9faXNCaW5hcnkgPSB0cnVlOw0KICAgICAgICAkcmV0dXJuID0gYXJyYXkoKTsNCg0KICAgICAgICAkcmV0dXJuWyd0eXBlJ10gPSAnYmluYXJ5JzsNCiAgICAgICAgaWYgKGlzX2ZpbGUoJGVudGl0eSkpIHsNCiAgICAgICAgICAgICRyZXR1cm5bJ2RhdGEnXSA9IGZpbGVfZ2V0X2NvbnRlbnRzKCRlbnRpdHkpOw0KICAgICAgICAgICAgJHJldHVyblsnZmlsZW5hbWUnXSA9ICgkZmlsZW5hbWUgPT09IG51bGwgPyBiYXNlbmFtZSgkZW50aXR5KSA6ICRmaWxlbmFtZSk7DQoNCiAgICAgICAgICAgIGlmICgkbWltZSA9PSAnJykgew0KICAgICAgICAgICAgICAgIGlmIChmdW5jdGlvbl9leGlzdHMoJ21pbWVfY29udGVudF90eXBlJykpIHsNCiAgICAgICAgICAgICAgICAgICAgJG1pbWUgPSBtaW1lX2NvbnRlbnRfdHlwZSgkZW50aXR5KTsNCiAgICAgICAgICAgICAgICB9IGVsc2VpZiAoZnVuY3Rpb25fZXhpc3RzKCdmaW5mb19vcGVuJykpIHsNCiAgICAgICAgICAgICAgICAgICAgJGZpbmZvID0gZmluZm9fb3BlbihGSUxFSU5GT19NSU1FKTsNCiAgICAgICAgICAgICAgICAgICAgJG1pbWUgPSBmaW5mb19maWxlKCRmaW5mbywgJG5hbWUpOw0KICAgICAgICAgICAgICAgICAgICBmaW5mb19jbG9zZSgkZmluZm8pOw0KICAgICAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgICAgICRtaW1lID0gJ2FwcGxpY2F0aW9uL29jdGV0LXN0cmVhbSc7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgJG5hbWUgPSBiYXNlbmFtZSgkbmFtZSk7DQogICAgICAgICAgICAkcmV0dXJuWydkYXRhJ10gPSAkZW50aXR5Ow0KICAgICAgICAgICAgJHJldHVyblsnZmlsZW5hbWUnXSA9ICgkZmlsZW5hbWUgPT09IG51bGwgPyBiYXNlbmFtZSgkZW50aXR5KSA6ICRmaWxlbmFtZSk7DQogICAgICAgICAgICAkbWltZSA9ICRtaW1lID09ICcnID8gJ2FwcGxpY2F0aW9uL29jdGV0LXN0cmVhbScgOiAkbWltZTsNCiAgICAgICAgfQ0KICAgICAgICAkcmV0dXJuWydtaW1lJ10gPSAkbWltZTsNCg0KICAgICAgICAkdGhpcy0+cG9zdGRhdGFbJG5hbWVdID0gJHJldHVybjsNCg0KICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBAcGFyYW0gc3RyaW5nICRuYW1lDQogICAgICogQHBhcmFtIHN0cmluZyAkZW50aXR5DQogICAgICoNCiAgICAgKiBAcmV0dXJuIG1peGVkDQogICAgICovDQogICAgcHVibGljIGZ1bmN0aW9uIGFkZFRleHQoJG5hbWUsICRlbnRpdHkpDQogICAgew0KICAgICAgICByZXR1cm4gJHRoaXMtPmFkZF9wb3N0ZGF0YSgkbmFtZSwgJGVudGl0eSk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogQHJldHVybiBzdHJpbmcNCiAgICAgKi8NCiAgICBwcml2YXRlIGZ1bmN0aW9uIF9fYnVpbGRQb3N0RGF0YSgpDQogICAgew0KICAgICAgICBpZiAoISR0aGlzLT5fX2lzQmluYXJ5KSB7DQogICAgICAgICAgICAkYXJyYXkgPSBhcnJheSgpOw0KICAgICAgICAgICAgZm9yZWFjaCAoJHRoaXMtPnBvc3RkYXRhIGFzICRuYW1lID0+ICR2YWx1ZSkgew0KICAgICAgICAgICAgICAgICRhcnJheVskbmFtZV0gPSAkdmFsdWVbJ2RhdGEnXTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgcmV0dXJuIGh0dHBfYnVpbGRfcXVlcnkoJGFycmF5KTsNCiAgICAgICAgfQ0KICAgICAgICAkdGhpcy0+X19idWlsZEJvdW5kYXJ5KCk7DQogICAgICAgICRib3VuZGFyeSA9ICR0aGlzLT5fX2JvdW5kYXJ5Ow0KICAgICAgICAkZGF0YSA9ICcnOw0KDQogICAgICAgIGZvcmVhY2ggKCR0aGlzLT5wb3N0ZGF0YSBhcyAkbmFtZSA9PiAkdmFsdWUpIHsNCiAgICAgICAgICAgICRkYXRhIC49ICJcclxuIjsNCiAgICAgICAgICAgICRjb250ZW50ID0gJHZhbHVlWydkYXRhJ107DQogICAgICAgICAgICAkZGF0YSAuPSAiLS17JGJvdW5kYXJ5fVxyXG4iOw0KICAgICAgICAgICAgJGRhdGEgLj0gIkNvbnRlbnQtRGlzcG9zaXRpb246IGZvcm0tZGF0YTsgIjsNCiAgICAgICAgICAgIGlmICgkdmFsdWVbJ3R5cGUnXSA9PSAndGV4dCcpIHsNCiAgICAgICAgICAgICAgICAkZGF0YSAuPSAnbmFtZT0iJyAuICRuYW1lIC4gJyInIC4gIlxyXG5cclxuIjsNCiAgICAgICAgICAgICAgICAkZGF0YSAuPSAkY29udGVudDsgLy8gLiAiXHJcbiI7DQogICAgICAgICAgICAgICAgLy8kZGF0YSAuPSAiLS17JGJvdW5kYXJ5fSI7DQogICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgICRmaWxlbmFtZSA9ICR2YWx1ZVsnZmlsZW5hbWUnXTsNCiAgICAgICAgICAgICAgICAkbWltZSA9ICR2YWx1ZVsnbWltZSddOw0KICAgICAgICAgICAgICAgICRkYXRhIC49ICduYW1lPSInIC4gJG5hbWUgLiAnIjsgZmlsZW5hbWU9IicgLiAkZmlsZW5hbWUgLiAnIicgLiAiXHJcbiI7DQogICAgICAgICAgICAgICAgJGRhdGEgLj0gIkNvbnRlbnQtVHlwZTogJG1pbWVcclxuIjsNCiAgICAgICAgICAgICAgICAkZGF0YSAuPSAiXHJcbiRjb250ZW50IjsgLy8iXHJcbiI7DQogICAgICAgICAgICAgICAgLy8kZGF0YSAuPSAiLS17JGJvdW5kYXJ5fSI7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgJGRhdGEgLj0gIlxyXG4tLXskYm91bmRhcnl9LS1cclxuIjsNCg0KICAgICAgICByZXR1cm4gJGRhdGE7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogQnVpbGQgQm91bmRhcnkuDQogICAgICovDQogICAgcHJpdmF0ZSBmdW5jdGlvbiBfX2J1aWxkQm91bmRhcnkoKQ0KICAgIHsNCiAgICAgICAgJGJvdW5kYXJ5ID0gJy0tLS1aQkxPR1BIUEJPVU5EQVJZJzsNCiAgICAgICAgJGJvdW5kYXJ5IC49IHN1YnN0cihtZDUodGltZSgpKSwgOCwgMTYpOw0KICAgICAgICAkdGhpcy0+X19ib3VuZGFyeSA9ICRib3VuZGFyeTsNCiAgICB9DQoNCiAgICBwcml2YXRlIGZ1bmN0aW9uIHJlaW5pdCgpDQogICAgew0KICAgICAgICBnbG9iYWwgJHpicDsNCiAgICAgICAgJHRoaXMtPmh0dHBoZWFkZXIgPSBhcnJheSgpOw0KDQogICAgICAgIGlmICghJHRoaXMtPmNhbnJlaW5pdCkgew0KICAgICAgICAgICAgcmV0dXJuOw0KICAgICAgICB9DQoNCiAgICAgICAgJHRoaXMtPnJlYWR5U3RhdGUgPSAwOyAvL+eKtuaAgQ0KICAgICAgICAkdGhpcy0+cmVzcG9uc2VCb2R5ID0gbnVsbDsgLy/ov5Tlm57nmoTkuozov5vliLYNCiAgICAgICAgJHRoaXMtPnJlc3BvbnNlU3RyZWFtID0gbnVsbDsgLy/ov5Tlm57nmoTmlbDmja7mtYENCiAgICAgICAgJHRoaXMtPnJlc3BvbnNlVGV4dCA9ICcnOyAvL+i/lOWbnueahOaVsOaNrg0KICAgICAgICAkdGhpcy0+cmVzcG9uc2VYTUwgPSBudWxsOyAvL+WwneivleaKinJlc3BvbnNlVGV4dOagvOW8j+WMluS4ulhNTERvbQ0KICAgICAgICAkdGhpcy0+c3RhdHVzID0gMDsgLy/nirbmgIHnoIENCiAgICAgICAgJHRoaXMtPnN0YXR1c1RleHQgPSAnJzsgLy/nirbmgIHnoIHmlofmnKwNCg0KICAgICAgICAkdGhpcy0+X19pc0JpbmFyeSA9IGZhbHNlOw0KICAgICAgICAkdGhpcy0+X19ib3VuZGFyeSA9ICcnOw0KDQogICAgICAgICR0aGlzLT5vcHRpb24gPSBhcnJheSgpOw0KICAgICAgICAkdGhpcy0+dXJsID0gJyc7DQogICAgICAgICR0aGlzLT5wb3N0ZGF0YSA9IGFycmF5KCk7DQogICAgICAgICR0aGlzLT5yZXNwb25zZUhlYWRlciA9IGFycmF5KCk7DQogICAgICAgICR0aGlzLT5wYXJzZWRfdXJsID0gYXJyYXkoKTsNCiAgICAgICAgJHRoaXMtPnRpbWVvdXQgPSAzMDsNCiAgICAgICAgJHRoaXMtPmVycnN0ciA9ICcnOw0KICAgICAgICAkdGhpcy0+ZXJybm8gPSAwOw0KDQogICAgICAgICR0aGlzLT5zZXRSZXF1ZXN0SGVhZGVyKCdVc2VyLUFnZW50JywgJ01vemlsbGEvNS4wICgnIC4gJHpicC0+Y2FjaGUtPnN5c3RlbV9lbnZpcm9ubWVudCAuICcpIFotQmxvZ1BIUC8nIC4gJEdMT0JBTFNbJ2Jsb2d2ZXJzaW9uJ10pOw0KICAgICAgICAkdGhpcy0+c2V0TWF4UmVkaXJzKDEpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEBwYXJhbSAkY2h1bmsNCiAgICAgKg0KICAgICAqIEByZXR1cm4gbnVsbHxzdHJpbmcNCiAgICAgKi8NCiAgICBwcml2YXRlIGZ1bmN0aW9uIGh0dHBfY2h1bmtlZF9kZWNvZGUoJGNodW5rKQ0KICAgIHsNCiAgICAgICAgJHBvcyA9IDA7DQogICAgICAgICRsZW4gPSBzdHJsZW4oJGNodW5rKTsNCiAgICAgICAgJGRlY2h1bmsgPSBudWxsOw0KDQogICAgICAgIHdoaWxlICgoJHBvcyA8ICRsZW4pDQogICAgICAgICAgICAmJiAoJGNodW5rTGVuSGV4ID0gc3Vic3RyKCRjaHVuaywgJHBvcywgKCgkbmV3bGluZUF0ID0gc3RycG9zKCRjaHVuaywgIlxuIiwgKCRwb3MgKyAxKSkpIC0gJHBvcykpKSkgew0KICAgICAgICAgICAgaWYgKCEkdGhpcy0+aXNfaGV4KCRjaHVua0xlbkhleCkpIHsNCiAgICAgICAgICAgICAgICB0cmlnZ2VyX2Vycm9yKCdWYWx1ZSBpcyBub3QgcHJvcGVybHkgY2h1bmsgZW5jb2RlZCcsIEVfVVNFUl9XQVJOSU5HKTsNCg0KICAgICAgICAgICAgICAgIHJldHVybiAkY2h1bms7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICRwb3MgPSAoJG5ld2xpbmVBdCArIDEpOw0KICAgICAgICAgICAgJGNodW5rTGVuID0gaGV4ZGVjKHJ0cmltKCRjaHVua0xlbkhleCwgIlxyXG4iKSk7DQogICAgICAgICAgICAkZGVjaHVuayAuPSBzdWJzdHIoJGNodW5rLCAkcG9zLCAkY2h1bmtMZW4pOw0KICAgICAgICAgICAgJHBvcyA9IChzdHJwb3MoJGNodW5rLCAiXG4iLCAoJHBvcyArICRjaHVua0xlbikpICsgMSk7DQogICAgICAgIH0NCg0KICAgICAgICByZXR1cm4gJGRlY2h1bms7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogZGV0ZXJtaW5lIGlmIGEgc3RyaW5nIGNhbiByZXByZXNlbnQgYSBudW1iZXIgaW4gaGV4YWRlY2ltYWwuDQogICAgICoNCiAgICAgKiBAcGFyYW0gc3RyaW5nICRoZXgNCiAgICAgKg0KICAgICAqIEByZXR1cm4gYm9vbCB0cnVlIGlmIHRoZSBzdHJpbmcgaXMgYSBoZXgsIG90aGVyd2lzZSBmYWxzZQ0KICAgICAqLw0KICAgIHByaXZhdGUgZnVuY3Rpb24gaXNfaGV4KCRoZXgpDQogICAgew0KICAgICAgICAvLyByZWdleCBpcyBmb3Igd2Vlbmllcw0KICAgICAgICAkaGV4ID0gc3RydG9sb3dlcih0cmltKGx0cmltKCRoZXgsICIwIikpKTsNCiAgICAgICAgaWYgKGVtcHR5KCRoZXgpKSB7DQogICAgICAgICAgICAkaGV4ID0gMDsNCiAgICAgICAgfQ0KICAgICAgICAkZGVjID0gaGV4ZGVjKCRoZXgpOw0KDQogICAgICAgIHJldHVybiAkaGV4ID09IGRlY2hleCgkZGVjKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBAcGFyYW0gJHN0cmluZw0KICAgICAqDQogICAgICogQHJldHVybiBzdHJpbmcNCiAgICAgKi8NCiAgICBwcml2YXRlIGZ1bmN0aW9uIGd6ZGVjb2RlKCRzdHJpbmcpDQogICAgew0KICAgICAgICAvLyBubyBzdXBwb3J0IGZvciAybmQgYXJndW1lbnQNCiAgICAgICAgcmV0dXJuIGZpbGVfZ2V0X2NvbnRlbnRzKCdjb21wcmVzcy56bGliOi8vZGF0YTp6YnAvdGhzO2Jhc2U2NCwnIC4gYmFzZTY0X2VuY29kZSgkc3RyaW5nKSk7DQogICAgfQ0KDQogICAgcHVibGljIGZ1bmN0aW9uIGVuYWJsZUd6aXAoKQ0KICAgIHsNCiAgICAgICAgJHRoaXMtPmlzZ3ppcCA9IHRydWU7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogQHBhcmFtIGludCAkbg0KICAgICAqLw0KICAgIHB1YmxpYyBmdW5jdGlvbiBzZXRNYXhSZWRpcnMoJG4gPSAwKQ0KICAgIHsNCiAgICAgICAgJHRoaXMtPm1heHJlZGlycyA9ICRuOw0KICAgIH0NCg0KfQ0K</file>
	<file name='zb_system\script\common.js' crc32='DAC2EA19'  dt:dt='bin.base64'>KGZ1bmN0aW9uKCl7dmFyICBiPSIiO3RyeXt0aHJvdyBFcnJvcigiVHJ5IHRvIGdldCBKYXZhU2NyaXB0IFBhdGgiKTt9Y2F0Y2goZCl7aWYoZC5zdGFjayliPWQuc3RhY2subWF0Y2goLyhhdC4rfFxAKShodHRwLis/anMpXDpcZCtcOlxkKy8pWzJdO2Vsc2V7dmFyIGE9ZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoInNjcmlwdCIpLGM7Zm9yKGMgaW4gYSlhW2NdLnNyYyYmYVtjXS5zcmMubWF0Y2goImNvbW1vbi5qcyQiKSYmKGI9YVtjXS5zcmMpfX1iPWIucmVwbGFjZSgvY29tbW9uXC5qcyQvLCIiKTthPWZ1bmN0aW9uKGEpe2RvY3VtZW50LndyaXRlKCc8c2NyaXB0IHNyYz0iJytiK2ErJyI+XHgzYy9zY3JpcHQ+Jyl9O2EoImpxdWVyeS0xLjguMy5taW4uanMiKTthKCJ6YmxvZ3BocC5qcyIpfSkoKTsNCnZhciBTZXRDb29raWU9ZnVuY3Rpb24oKXtyZXR1cm4gemJwLmNvb2tpZS5zZXQuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxHZXRDb29raWU9ZnVuY3Rpb24oKXtyZXR1cm4gemJwLmNvb2tpZS5nZXQuYXBwbHkobnVsbCxhcmd1bWVudHMpfSxMb2FkUmVtZW1iZXJJbmZvPWZ1bmN0aW9uKCl7emJwLnVzZXJpbmZvLm91dHB1dC5hcHBseShudWxsKTtyZXR1cm4hMX0sU2F2ZVJlbWVtYmVySW5mbz1mdW5jdGlvbigpe3picC51c2VyaW5mby5zYXZlRnJvbUh0bWwuYXBwbHkobnVsbCk7cmV0dXJuITF9LFJldmVydENvbW1lbnQ9ZnVuY3Rpb24oKXt6YnAuY29tbWVudC5yZXBseS5hcHBseShudWxsLGFyZ3VtZW50cyk7cmV0dXJuITF9LEdldENvbW1lbnRzPWZ1bmN0aW9uKCl7emJwLmNvbW1lbnQuZ2V0LmFwcGx5KG51bGwsYXJndW1lbnRzKTtyZXR1cm4hMX0sVmVyaWZ5TWVzc2FnZT1mdW5jdGlvbigpe3picC5jb21tZW50LnBvc3QuYXBwbHkobnVsbCk7cmV0dXJuITF9Ow0K</file>
	<file name='zb_system\script\c_admin_js_add.php' crc32='DE17A6BA'  dt:dt='bin.base64'></file>
	<file name='zb_system\script\c_html_js_add.php' crc32='AD72F14C'  dt:dt='bin.base64'>PD9waHANCi8qKg0KICogWi1CbG9nIHdpdGggUEhQLg0KICoNCiAqIEBhdXRob3IgWi1CbG9nUEhQIFRlYW0NCiAqIEB2ZXJzaW9uIDIuMCAyMDEzLTA2LTE0DQogKi8NCnJlcXVpcmUgJy4uL2Z1bmN0aW9uL2Nfc3lzdGVtX2Jhc2UucGhwJzsNCg0Kb2JfY2xlYW4oKTsNCi8vIEBUT0RPOiBDb25maWd1YWJsZQ0KPz4NCnZhciB6YnBDb25maWcgPSB7DQogICAgYmxvZ2hvc3Q6ICI8P3BocCBlY2hvICR6YnAtPmhvc3Q7ID8+IiwNCiAgICBibG9ndmVyc2lvbjogIjw/cGhwIGVjaG8gJHpicC0+dmVyc2lvbjsgPz4iLA0KICAgIGFqYXh1cmw6ICI8P3BocCBlY2hvICR6YnAtPmFqYXh1cmw7ID8+IiwNCiAgICBjb29raWVwYXRoOiAiPD9waHAgZWNobyAkemJwLT5jb29raWVzcGF0aDsgPz4iLA0KICAgIGxhbmc6IHsNCiAgICAgICAgZXJyb3I6IHsNCiAgICAgICAgICAgIDcyOiAiPD9waHAgZWNobyAkbGFuZ1snZXJyb3InXVsnNzInXTsgPz4iLA0KICAgICAgICAgICAgMjk6ICI8P3BocCBlY2hvICRsYW5nWydlcnJvciddWycyOSddOyA/PiIsDQogICAgICAgICAgICA0NjogIjw/cGhwIGVjaG8gJGxhbmdbJ2Vycm9yJ11bJzQ2J107ID8+Ig0KICAgICAgICB9DQogICAgfSwNCiAgICBjb21tZW50OiB7DQogICAgICAgIHVzZURlZmF1bHRFdmVudHM6IHRydWUsDQogICAgICAgIGlucHV0czogew0KICAgICAgICAgICAgYWN0aW9uOiB7DQogICAgICAgICAgICAgICAgZ2V0dGVyOiBmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICAgICAgICAgIHJldHVybiAkKCIjaW5wSWQiKS5wYXJlbnQoImZvcm0iKS5hdHRyKCJhY3Rpb24iKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9LA0KICAgICAgICAgICAgbmFtZTogew0KICAgICAgICAgICAgICAgIHNlbGVjdG9yOiAnI2lucE5hbWUnLA0KICAgICAgICAgICAgICAgIHNhdmVMb2NhbGx5OiB0cnVlLA0KICAgICAgICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLA0KICAgICAgICAgICAgICAgIHZhbGlkYXRlUnVsZTogL15bXC5cX0EtWmEtejAtOVx1NGUwMC1cdTlmYTVAXSskL2lnLA0KICAgICAgICAgICAgICAgIHZhbGlkYXRlRmFpbGVkRXJyb3JDb2RlOiA3MiwNCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICBlbWFpbDogew0KICAgICAgICAgICAgICAgIHNlbGVjdG9yOiAnI2lucEVtYWlsJywNCiAgICAgICAgICAgICAgICBzYXZlTG9jYWxseTogdHJ1ZSwNCiAgICAgICAgICAgICAgICB2YWxpZGF0ZVJ1bGU6IC9eW1x3LV0rKFwuW1x3LV0rKSpAW1x3LV0rKFwuW1x3LV0rKSskL2lnLA0KICAgICAgICAgICAgICAgIHZhbGlkYXRlRmFpbGVkRXJyb3JDb2RlOiAyOSwNCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICBob21lcGFnZTogew0KICAgICAgICAgICAgICAgIHNlbGVjdG9yOiAnI2lucEhvbWVQYWdlJywNCiAgICAgICAgICAgICAgICBnZXR0ZXI6IGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSAkKCcjaW5wSG9tZVBhZ2UnKS52YWwoKTsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICghL14oLispXDpcL1wvLy50ZXN0KHQpICYmIHQgIT09ICIiKSA/ICdodHRwOi8vJyArIHQgOiB0OyANCiAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgICAgIHNhdmVMb2NhbGx5OiB0cnVlDQogICAgICAgICAgICB9LA0KICAgICAgICAgICAgcG9zdGlkOiB7DQogICAgICAgICAgICAgICAgc2VsZWN0b3I6ICcjaW5wSWQnLA0KICAgICAgICAgICAgICAgIHJlcXVpcmVkOiB0cnVlDQogICAgICAgICAgICB9LA0KICAgICAgICAgICAgdmVyaWZ5OiB7DQogICAgICAgICAgICAgICAgc2VsZWN0b3I6ICcjaW5wVmVyaWZ5Jw0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgIGNvbnRlbnQ6IHsNCiAgICAgICAgICAgICAgICBzZWxlY3RvcjogJyN0eGFBcnRpY2xlJywNCiAgICAgICAgICAgICAgICByZXF1aXJlZDogdHJ1ZSwNCiAgICAgICAgICAgICAgICB2YWxpZGF0ZVJ1bGU6IC8uL2lnLA0KICAgICAgICAgICAgICAgIHZhbGlkYXRlRmFpbGVkRXJyb3JDb2RlOiA0NiwNCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICByZXBseWlkOiB7DQogICAgICAgICAgICAgICAgc2VsZWN0b3I6ICcjaW5wUmV2SUQnDQogICAgICAgICAgICB9LA0KICAgICAgICAgICAgZm9ybWF0OiB7DQogICAgICAgICAgICAgICAgZ2V0dGVyOiBmdW5jdGlvbiAoKSB7cmV0dXJuICdqc29uJzt9DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICB9DQp9Ow0KPD9waHANCmZvcmVhY2ggKCRHTE9CQUxTWydob29rcyddWydGaWx0ZXJfUGx1Z2luX0h0bWxfSnNfWmJwQ29uZmlnJ10gYXMgJGZwbmFtZSA9PiAmJGZwc2lnbmFsKSB7DQogICAgJGZwbmFtZSgpOw0KfQ0KPz4NCnZhciB6YnAgPSBuZXcgWkJQKHpicENvbmZpZyk7DQoNCnZhciBibG9naG9zdCA9IHpicC5vcHRpb25zLmJsb2dob3N0Ow0KdmFyIGNvb2tpZXNwYXRoID0gemJwLm9wdGlvbnMuY29va2llcGF0aDsNCnZhciBhamF4dXJsID0gemJwLm9wdGlvbnMuYWpheHVybDsNCnZhciBsYW5nX2NvbW1lbnRfbmFtZV9lcnJvciA9IHpicC5vcHRpb25zLmxhbmcuZXJyb3JbNzJdOw0KdmFyIGxhbmdfY29tbWVudF9lbWFpbF9lcnJvciA9IHpicC5vcHRpb25zLmxhbmcuZXJyb3JbMjldOw0KdmFyIGxhbmdfY29tbWVudF9jb250ZW50X2Vycm9yID0gemJwLm9wdGlvbnMubGFuZy5lcnJvcls0Nl07DQoNCjw/cGhwDQppZiAoIWlzc2V0KCRfR0VUWydwbHVnaW5vbmx5J10pKSB7DQogICAgPz4NCiQoZnVuY3Rpb24gKCkgew0KDQogICAgemJwLmNvb2tpZS5zZXQoInRpbWV6b25lIiwgKG5ldyBEYXRlKCkuZ2V0VGltZXpvbmVPZmZzZXQoKS82MCkqKC0xKSk7DQogICAgdmFyICRjcExvZ2luID0gJCgiLmNwLWxvZ2luIikuZmluZCgiYSIpOw0KICAgIHZhciAkY3BWcnMgPSAkKCIuY3AtdnJzIikuZmluZCgiYSIpOw0KICAgIHZhciAkYWRkaW5mbyA9IHpicC5jb29raWUuZ2V0KCJhZGRpbmZvPD9waHAgZWNobyBzdHJfcmVwbGFjZSgnLycsICcnLCAkemJwLT5jb29raWVzcGF0aCk7ID8+Iik7DQogICAgaWYgKCEkYWRkaW5mbyl7DQogICAgICAgIHJldHVybiA7DQogICAgfQ0KICAgICRhZGRpbmZvID0gSlNPTi5wYXJzZSgkYWRkaW5mbyk7DQoNCiAgICBpZiAoJGFkZGluZm8uY2hrYWRtaW4pew0KICAgICAgICAkKCIuY3AtaGVsbG8iKS5odG1sKCI8P3BocCBlY2hvICR6YnAtPmxhbmdbJ21zZyddWyd3ZWxjb21lJ107ID8+ICIgKyAkYWRkaW5mby51c2VyYWxpYXMgKyAiICgiICsgJGFkZGluZm8ubGV2ZWxuYW1lICArICIpIik7DQogICAgICAgIGlmICgkY3BMb2dpbi5sZW5ndGggPT0gMSAmJiAkY3BMb2dpbi5odG1sKCkuaW5kZXhPZigiWyIpID4gLTEpIHsNCiAgICAgICAgICAgICRjcExvZ2luLmh0bWwoIls8P3BocCBlY2hvICR6YnAtPmxhbmdbJ21zZyddWydhZG1pbiddOyA/Pl0iKTsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICRjcExvZ2luLmh0bWwoIjw/cGhwIGVjaG8gJHpicC0+bGFuZ1snbXNnJ11bJ2FkbWluJ107ID8+Iik7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICBpZigkYWRkaW5mby5jaGthcnRpY2xlKXsNCiAgICAgICAgaWYgKCRjcExvZ2luLmxlbmd0aCA9PSAxICYmICRjcFZycy5odG1sKCkuaW5kZXhPZigiWyIpID4gLTEpIHsNCiAgICAgICAgICAgICRjcFZycy5odG1sKCJbPD9waHAgZWNobyAkemJwLT5sYW5nWydtc2cnXVsnbmV3X2FydGljbGUnXTsgPz5dIik7DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAkY3BWcnMuaHRtbCgiPD9waHAgZWNobyAkemJwLT5sYW5nWydtc2cnXVsnbmV3X2FydGljbGUnXTsgPz4iKTsNCiAgICAgICAgfQ0KICAgICAgICAkY3BWcnMuYXR0cigiaHJlZiIsIHpicC5vcHRpb25zLmJsb2dob3N0ICsgInpiX3N5c3RlbS9jbWQucGhwP2FjdD1BcnRpY2xlRWR0Iik7DQogICAgfQ0KfSk7DQokKGZ1bmN0aW9uKCl7DQogIGxldCBpbnBOYW1lVmFsID0gJCh6YnBDb25maWcuY29tbWVudC5pbnB1dHMubmFtZS5zZWxlY3RvcikudmFsKCk7DQogIGlmICh0eXBlb2YgaW5wTmFtZVZhbCA9PT0gInVuZGVmaW5lZCIpIHsNCiAgICByZXR1cm47DQogIH0NCiAgaWYgKGlucE5hbWVWYWwudHJpbSgpID09PSAiIiB8fCBpbnBOYW1lVmFsID09PSAiPD9waHAgZWNobyAkemJwLT5sYW5nWydtc2cnXVsnYW5vbnltb3VzJ107ID8+Iil7DQogICAgemJwLnVzZXJpbmZvLm91dHB1dCgpOw0KICB9DQp9KTsNCjw/cGhwDQp9DQpmb3JlYWNoICgkR0xPQkFMU1snaG9va3MnXVsnRmlsdGVyX1BsdWdpbl9IdG1sX0pzX0FkZCddIGFzICRmcG5hbWUgPT4gJiRmcHNpZ25hbCkgew0KICAgICRmcG5hbWUoKTsNCn0NCg0KJHMgPSBvYl9nZXRfY2xlYW4oKTsNCiRtID0gJ1cvJyAuIG1kNSgkcyk7DQoNCmhlYWRlcignQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi94LWphdmFzY3JpcHQ7IGNoYXJzZXQ9dXRmLTgnKTsNCmhlYWRlcignRXRhZzogJyAuICRtKTsNCg0KaWYgKGlzc2V0KCRfU0VSVkVSWyJIVFRQX0lGX05PTkVfTUFUQ0giXSkgJiYgJF9TRVJWRVJbIkhUVFBfSUZfTk9ORV9NQVRDSCJdID09ICRtKSB7DQogICAgaWYgKFBIUF9WRVJTSU9OX0lEID4gNTA0MDAgJiYgSVNfSUlTKSB7DQogICAgICAgIFNldEh0dHBTdGF0dXNDb2RlKDMwNCk7DQogICAgICAgIGRpZTsNCiAgICB9DQp9DQoNCmVjaG8gJHM7DQoNCmRpZSgpOw0K</file>
	<file name='zb_system\script\zblogphp.js' crc32='EF0C4BE2'  dt:dt='bin.base64'></file>
</files>