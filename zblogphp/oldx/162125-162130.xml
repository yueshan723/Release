<files codepage='65001' xmlns:dt='urn:schemas-microsoft-com:datatypes'>
	<file name='zb_system\function\c_system_common.php' crc32='DD684757'  dt:dt='bin.base64'>PD9waHANCi8qKg0KICog6L6F5Yqp6YCa55So5Ye95pWwLg0KICoNCiAqIEBjb3B5cmlnaHQgKEMpIFJhaW5ib3dTb2Z0IFN0dWRpbw0KICovDQoNCi8qKg0KICog5b6X5Yiw6K+35rGC5Y2P6K6u77yI6ICD6JmR5Yiw5Y+N5ZCR5Luj55CG562J5Y6f5Zug77yM5pyq5b+F5YeG56Gu77yJDQogKiDlpoLmnpzmg7Pojrflj5blh4bnoa7nmoTlgLzvvIzor7d6YnAtPkxvYWTlkI7kvb/nlKgkemJwLT5pc0h0dHBzLg0KICoNCiAqIEBwYXJhbSAkYXJyYXkNCiAqDQogKiBAcmV0dXJuICRzdHJpbmcNCiAqLw0KZnVuY3Rpb24gR2V0U2NoZW1lKCRhcnJheSkNCnsNCiAgICAkYXJyYXkgPSBhcnJheV9jaGFuZ2Vfa2V5X2Nhc2UoJGFycmF5LCBDQVNFX1VQUEVSKTsNCiAgICBpZiAoDQogICAgICAgIChhcnJheV9rZXlfZXhpc3RzKCdSRVFVRVNUX1NDSEVNRScsICRhcnJheSkNCiAgICAgICAgICAgICYmDQogICAgICAgICAgICAoc3RydG9sb3dlcigkYXJyYXlbJ1JFUVVFU1RfU0NIRU1FJ10pID09ICdodHRwcycpKQ0KICAgICAgICB8fA0KICAgICAgICAoYXJyYXlfa2V5X2V4aXN0cygnSFRUUFMnLCAkYXJyYXkpDQogICAgICAgICAgICAmJg0KICAgICAgICAgICAgKHN0cnRvbG93ZXIoJGFycmF5WydIVFRQUyddKSA9PSAnb24nKSkNCiAgICAgICAgfHwNCiAgICAgICAgKGFycmF5X2tleV9leGlzdHMoJ0hUVFBfRlJPTV9IVFRQUycsICRhcnJheSkNCiAgICAgICAgICAgICYmDQogICAgICAgICAgICAoc3RydG9sb3dlcigkYXJyYXlbJ0hUVFBfRlJPTV9IVFRQUyddKSA9PSAnb24nKSkNCiAgICAgICAgfHwNCiAgICAgICAgKGFycmF5X2tleV9leGlzdHMoJ1NFUlZFUl9QT1JUJywgJGFycmF5KQ0KICAgICAgICAgICAgJiYNCiAgICAgICAgICAgIChzdHJ0b2xvd2VyKCRhcnJheVsnU0VSVkVSX1BPUlQnXSkgPT0gNDQzKSkNCiAgICAgICAgfHwNCiAgICAgICAgKGFycmF5X2tleV9leGlzdHMoJ0hUVFBfWF9GT1JXQVJERURfUE9SVCcsICRhcnJheSkNCiAgICAgICAgICAgICYmDQogICAgICAgICAgICAoc3RydG9sb3dlcigkYXJyYXlbJ0hUVFBfWF9GT1JXQVJERURfUE9SVCddKSA9PSA0NDMpKQ0KICAgICAgICB8fA0KICAgICAgICAoYXJyYXlfa2V5X2V4aXN0cygnSFRUUF9YX0ZPUldBUkRFRF9QUk9UTycsICRhcnJheSkNCiAgICAgICAgICAgICYmDQogICAgICAgICAgICAoc3RydG9sb3dlcigkYXJyYXlbJ0hUVFBfWF9GT1JXQVJERURfUFJPVE8nXSkgPT0gJ2h0dHBzJykpDQogICAgICAgIHx8DQogICAgICAgIChhcnJheV9rZXlfZXhpc3RzKCdIVFRQX0ZST05UX0VORF9IVFRQUycsICRhcnJheSkNCiAgICAgICAgICAgICYmDQogICAgICAgICAgICAoc3RydG9sb3dlcigkYXJyYXlbJ0hUVFBfRlJPTlRfRU5EX0hUVFBTJ10pID09ICdvbicpKQ0KICAgICAgICB8fA0KICAgICAgICAoYXJyYXlfa2V5X2V4aXN0cygnSFRUUF9YX0ZPUldBUkRFRF9QUk9UT0NPTCcsICRhcnJheSkNCiAgICAgICAgICAgICYmDQogICAgICAgICAgICAoc3RydG9sb3dlcigkYXJyYXlbJ0hUVFBfWF9GT1JXQVJERURfUFJPVE9DT0wnXSkgPT0gJ2h0dHBzJykpDQogICAgICAgIHx8DQogICAgICAgIChhcnJheV9rZXlfZXhpc3RzKCdIVFRQX1hfRk9SV0FSREVEX1NTTCcsICRhcnJheSkNCiAgICAgICAgICAgICYmDQogICAgICAgICAgICAoc3RydG9sb3dlcigkYXJyYXlbJ0hUVFBfWF9GT1JXQVJERURfU1NMJ10pID09ICdvbicpKQ0KICAgICAgICB8fA0KICAgICAgICAoYXJyYXlfa2V5X2V4aXN0cygnSFRUUF9YX1VSTF9TQ0hFTUUnLCAkYXJyYXkpDQogICAgICAgICAgICAmJg0KICAgICAgICAgICAgKHN0cnRvbG93ZXIoJGFycmF5WydIVFRQX1hfVVJMX1NDSEVNRSddKSA9PSAnaHR0cHMnKSkNCiAgICAgICAgfHwNCiAgICAgICAgKGFycmF5X2tleV9leGlzdHMoJ0hUVFBfQ0ZfVklTSVRPUicsICRhcnJheSkNCiAgICAgICAgICAgICYmDQogICAgICAgICAgICAoc3RyaXBvcygkYXJyYXlbJ0hUVFBfQ0ZfVklTSVRPUiddLCAnaHR0cHMnKSAhPT0gZmFsc2UpKQ0KICAgICAgICB8fA0KICAgICAgICAoYXJyYXlfa2V5X2V4aXN0cygnU0VSVkVSX1BPUlRfU0VDVVJFJywgJGFycmF5KQ0KICAgICAgICAgICAgJiYNCiAgICAgICAgICAgIChzdHJ0b2xvd2VyKCRhcnJheVsnU0VSVkVSX1BPUlRfU0VDVVJFJ10pID09IDEpKQ0KICAgICkgew0KICAgICAgICByZXR1cm4gJ2h0dHBzOi8vJzsNCiAgICB9DQoNCiAgICByZXR1cm4gJ2h0dHA6Ly8nOw0KfQ0KDQovKioNCiAqIOiOt+WPluacjeWKoeWZqC4NCiAqDQogKiBAcmV0dXJuIGludA0KICovDQpmdW5jdGlvbiBHZXRXZWJTZXJ2ZXIoKQ0Kew0KICAgIGlmICghaXNzZXQoJF9TRVJWRVJbJ1NFUlZFUl9TT0ZUV0FSRSddKSkgew0KICAgICAgICByZXR1cm4gU0VSVkVSX1VOS05PV047DQogICAgfQ0KICAgICR3ZWJTZXJ2ZXIgPSBzdHJ0b2xvd2VyKCRfU0VSVkVSWydTRVJWRVJfU09GVFdBUkUnXSk7DQogICAgaWYgKHN0cnBvcygkd2ViU2VydmVyLCAnYXBhY2hlJykgIT09IGZhbHNlKSB7DQogICAgICAgIHJldHVybiBTRVJWRVJfQVBBQ0hFOw0KICAgIH0gZWxzZWlmIChzdHJwb3MoJHdlYlNlcnZlciwgJ21pY3Jvc29mdC1paXMnKSAhPT0gZmFsc2UpIHsNCiAgICAgICAgcmV0dXJuIFNFUlZFUl9JSVM7DQogICAgfSBlbHNlaWYgKHN0cnBvcygkd2ViU2VydmVyLCAnbmdpbngnKSAhPT0gZmFsc2UpIHsNCiAgICAgICAgcmV0dXJuIFNFUlZFUl9OR0lOWDsNCiAgICB9IGVsc2VpZiAoc3RycG9zKCR3ZWJTZXJ2ZXIsICdsaWdodHRwZCcpICE9PSBmYWxzZSkgew0KICAgICAgICByZXR1cm4gU0VSVkVSX0xJR0hUVFBEOw0KICAgIH0gZWxzZWlmIChzdHJwb3MoJHdlYlNlcnZlciwgJ2thbmdsZScpICE9PSBmYWxzZSkgew0KICAgICAgICByZXR1cm4gU0VSVkVSX0tBTkdMRTsNCiAgICB9IGVsc2VpZiAoc3RycG9zKCR3ZWJTZXJ2ZXIsICdjYWRkeScpICE9PSBmYWxzZSkgew0KICAgICAgICByZXR1cm4gU0VSVkVSX0NBRERZOw0KICAgIH0gZWxzZWlmIChzdHJwb3MoJHdlYlNlcnZlciwgJ2RldmVsb3BtZW50IHNlcnZlcicpICE9PSBmYWxzZSkgew0KICAgICAgICByZXR1cm4gU0VSVkVSX0JVSUxUSU47DQogICAgfSBlbHNlIHsNCiAgICAgICAgcmV0dXJuIFNFUlZFUl9VTktOT1dOOw0KICAgIH0NCn0NCg0KLyoqDQogKiDojrflj5bmk43kvZzns7vnu58NCiAqDQogKiBAcmV0dXJuIGludA0KICovDQpmdW5jdGlvbiBHZXRTeXN0ZW0oKQ0Kew0KICAgIGlmIChpbl9hcnJheShzdHJ0b3VwcGVyKFBIUF9PUyksIGFycmF5KCdXSU5OVCcsICdXSU4zMicsICdXSU5ET1dTJykpKSB7DQogICAgICAgIHJldHVybiBTWVNURU1fV0lORE9XUzsNCiAgICB9IGVsc2VpZiAoKHN0cnRvdXBwZXIoUEhQX09TKSA9PT0gJ1VOSVgnKSkgew0KICAgICAgICByZXR1cm4gU1lTVEVNX1VOSVg7DQogICAgfSBlbHNlaWYgKHN0cnRvdXBwZXIoUEhQX09TKSA9PT0gJ0xJTlVYJykgew0KICAgICAgICByZXR1cm4gU1lTVEVNX0xJTlVYOw0KICAgIH0gZWxzZWlmIChzdHJ0b3VwcGVyKFBIUF9PUykgPT09ICdEQVJXSU4nKSB7DQogICAgICAgIHJldHVybiBTWVNURU1fREFSV0lOOw0KICAgIH0gZWxzZWlmIChzdHJ0b3VwcGVyKHN1YnN0cihQSFBfT1MsIDAsIDYpKSA9PT0gJ0NZR1dJTicpIHsNCiAgICAgICAgcmV0dXJuIFNZU1RFTV9DWUdXSU47DQogICAgfSBlbHNlaWYgKGluX2FycmF5KHN0cnRvdXBwZXIoUEhQX09TKSwgYXJyYXkoJ05FVEJTRCcsICdPUEVOQlNEJywgJ0ZSRUVCU0QnKSkpIHsNCiAgICAgICAgcmV0dXJuIFNZU1RFTV9CU0Q7DQogICAgfSBlbHNlIHsNCiAgICAgICAgcmV0dXJuIFNZU1RFTV9VTktOT1dOOw0KICAgIH0NCn0NCg0KLyoqDQogKiDojrflj5ZQSFDop6PmnpDlvJXmk44uDQogKg0KICogQHJldHVybiBpbnQNCiAqLw0KZnVuY3Rpb24gR2V0UEhQRW5naW5lKCkNCnsNCiAgICByZXR1cm4gRU5HSU5FX1BIUDsNCn0NCg0KLyoqDQogKiDojrflj5ZQSFAgVmVyc2lvbi4NCiAqDQogKiBAcmV0dXJuIHN0cmluZw0KICovDQpmdW5jdGlvbiBHZXRQSFBWZXJzaW9uKCkNCnsNCiAgICAkcCA9IHBocHZlcnNpb24oKTsNCiAgICBpZiAoc3RycG9zKCRwLCAnLScpICE9PSBmYWxzZSkgew0KICAgICAgICAkcCA9IHN1YnN0cigkcCwgMCwgc3RycG9zKCRwLCAnLScpKTsNCiAgICB9DQoNCiAgICByZXR1cm4gJHA7DQp9DQoNCi8qKg0KICog6Ieq5Yqo5Yqg6L2957G75paH5Lu2Lg0KICoNCiAqIEBhcGkgRmlsdGVyX1BsdWdpbl9BdXRvbG9hZA0KICoNCiAqIEBwYXJhbSBzdHJpbmcgJGNsYXNzTmFtZSDnsbvlkI0NCiAqDQogKiBAcmV0dXJuIG1peGVkDQogKi8NCmZ1bmN0aW9uIEF1dG9sb2FkQ2xhc3MoJGNsYXNzTmFtZSkNCnsNCiAgICBmb3JlYWNoICgkR0xPQkFMU1snaG9va3MnXVsnRmlsdGVyX1BsdWdpbl9BdXRvbG9hZCddIGFzICRmcG5hbWUgPT4gJiRmcHNpZ25hbCkgew0KICAgICAgICAkZnByZXR1cm4gPSAkZnBuYW1lKCRjbGFzc05hbWUpOw0KICAgICAgICBpZiAoJGZwc2lnbmFsID09IFBMVUdJTl9FWElUU0lHTkFMX1JFVFVSTikgew0KICAgICAgICAgICAgJGZwc2lnbmFsID0gUExVR0lOX0VYSVRTSUdOQUxfTk9ORTsNCg0KICAgICAgICAgICAgcmV0dXJuICRmcHJldHVybjsNCiAgICAgICAgfQ0KICAgIH0NCiAgICAkY2xhc3NOYW1lID0gc3RyX3JlcGxhY2UoJ19fJywgJy8nLCAkY2xhc3NOYW1lKTsNCiAgICAkZmlsZU5hbWUgPSBaQlBfUEFUSCAuICd6Yl9zeXN0ZW0vZnVuY3Rpb24vbGliLycgLiBzdHJ0b2xvd2VyKCRjbGFzc05hbWUpIC4gJy5waHAnOw0KICAgIGlmIChpc19yZWFkYWJsZSgkZmlsZU5hbWUpKSB7DQogICAgICAgIHJlcXVpcmUgJGZpbGVOYW1lOw0KDQogICAgICAgIHJldHVybiB0cnVlOw0KICAgIH0NCg0KICAgIHJldHVybiBmYWxzZTsNCn0NCg0KLyoqDQogKiDorrDlvZXml6Xlv5cuDQogKg0KICogQHBhcmFtIHN0cmluZyAkbG9nU3RyaW5nDQogKiBAcGFyYW0gYm9vbCAgICRpc0Vycm9yDQogKg0KICogQHJldHVybiBib29sDQogKi8NCmZ1bmN0aW9uIExvZ3MoJGxvZ1N0cmluZywgJGlzRXJyb3IgPSBmYWxzZSkNCnsNCiAgICBnbG9iYWwgJHpicDsNCiAgICBmb3JlYWNoICgkR0xPQkFMU1snaG9va3MnXVsnRmlsdGVyX1BsdWdpbl9Mb2dzJ10gYXMgJGZwbmFtZSA9PiAmJGZwc2lnbmFsKSB7DQogICAgICAgICRmcHJldHVybiA9ICRmcG5hbWUoJGxvZ1N0cmluZywgJGlzRXJyb3IpOw0KICAgICAgICBpZiAoJGZwc2lnbmFsID09IFBMVUdJTl9FWElUU0lHTkFMX1JFVFVSTikgew0KICAgICAgICAgICAgJGZwc2lnbmFsID0gUExVR0lOX0VYSVRTSUdOQUxfTk9ORTsNCg0KICAgICAgICAgICAgcmV0dXJuICRmcHJldHVybjsNCiAgICAgICAgfQ0KICAgIH0NCiAgICBpZiAoJHpicC0+Z3VpZCkgew0KICAgICAgICBpZiAoJGlzRXJyb3IpIHsNCiAgICAgICAgICAgICRmID0gJHpicC0+dXNlcnNkaXIgLiAnbG9ncy8nIC4gJHpicC0+Z3VpZCAuICctZXJyb3InIC4gZGF0ZSgiWW1kIikgLiAnLnR4dCc7DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAkZiA9ICR6YnAtPnVzZXJzZGlyIC4gJ2xvZ3MvJyAuICR6YnAtPmd1aWQgLiAnLWxvZycgLiBkYXRlKCJZbWQiKSAuICcudHh0JzsNCiAgICAgICAgfQ0KICAgIH0gZWxzZSB7DQogICAgICAgIGlmICgkaXNFcnJvcikgew0KICAgICAgICAgICAgJGYgPSAkemJwLT51c2Vyc2RpciAuICdsb2dzLycgLiBtZDUoJHpicC0+cGF0aCkgLiAnLWVycm9yLnR4dCc7DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAkZiA9ICR6YnAtPnVzZXJzZGlyIC4gJ2xvZ3MvJyAuIG1kNSgkemJwLT5wYXRoKSAuICcudHh0JzsNCiAgICAgICAgfQ0KICAgIH0NCiAgICBaQmxvZ0V4Y2VwdGlvbjo6U3VzcGVuZEVycm9ySG9vaygpOw0KICAgIGlmICgkaGFuZGxlID0gQGZvcGVuKCRmLCAnYSsnKSkgew0KICAgICAgICAkdCA9IGRhdGUoJ1ktbS1kJykgLiAnICcgLiBkYXRlKCdIOmk6cycpIC4gJyAnIC4gc3Vic3RyKG1pY3JvdGltZSgpLCAxLCA5KSAuICcgJyAuIGRhdGUoJ1AnKTsNCiAgICAgICAgQGZ3cml0ZSgkaGFuZGxlLCAnWycgLiAkdCAuICddJyAuICJcclxuIiAuICRsb2dTdHJpbmcgLiAiXHJcbiIpOw0KICAgICAgICBAZmNsb3NlKCRoYW5kbGUpOw0KICAgIH0NCiAgICBaQmxvZ0V4Y2VwdGlvbjo6UmVzdW1lRXJyb3JIb29rKCk7DQoNCiAgICByZXR1cm4gdHJ1ZTsNCn0NCg0KLyoqDQogKiDovpPlh7rpobXpnaLov5DooYzml7bplb8NCiAqDQogKiBAcGFyYW0gYm9vbCAkaXNPdXRwdXQg5piv5ZCm6L6T5Ye677yI6ICD6JmR5Y6G5Y+y5Y6f5Zug77yM6buY6K6k6L6T5Ye677yJDQogKg0KICogQHJldHVybiBhcnJheQ0KICovDQpmdW5jdGlvbiBSdW5UaW1lKCRpc091dHB1dCA9IHRydWUpDQp7DQogICAgZ2xvYmFsICR6YnA7DQoNCiAgICAkcnQgPSBhcnJheSgpOw0KICAgICRydFsndGltZSddID0gbnVtYmVyX2Zvcm1hdCgxMDAwICogKG1pY3JvdGltZSgxKSAtICRfU0VSVkVSWydfc3RhcnRfdGltZSddKSwgMik7DQogICAgJHJ0WydxdWVyeSddID0gJF9TRVJWRVJbJ19xdWVyeV9jb3VudCddOw0KICAgICRydFsnbWVtb3J5J10gPSAkX1NFUlZFUlsnX21lbW9yeV91c2FnZSddOw0KICAgICRydFsnZXJyb3InXSA9ICRfU0VSVkVSWydfZXJyb3JfY291bnQnXTsNCiAgICBpZiAoZnVuY3Rpb25fZXhpc3RzKCdtZW1vcnlfZ2V0X3VzYWdlJykpIHsNCiAgICAgICAgJHJ0WydtZW1vcnknXSA9IChpbnQpICgobWVtb3J5X2dldF91c2FnZSgpIC0gJF9TRVJWRVJbJ19tZW1vcnlfdXNhZ2UnXSkgLyAxMDI0KTsNCiAgICB9DQoNCiAgICBpZiAoaXNzZXQoJHpicC0+b3B0aW9uWydaQ19SVU5JTkZPX0RJU1BMQVknXSkgJiYgJHpicC0+b3B0aW9uWydaQ19SVU5JTkZPX0RJU1BMQVknXSA9PSBmYWxzZSkgew0KICAgICAgICAkX1NFUlZFUlsnX3J1bnRpbWVfcmVzdWx0J10gPSAkcnQ7DQoNCiAgICAgICAgcmV0dXJuICRydDsNCiAgICB9DQoNCiAgICBpZiAoJGlzT3V0cHV0KSB7DQogICAgICAgIGVjaG8gJzwhLS0nIC4gJHJ0Wyd0aW1lJ10gLiAnIG1zICwgJzsNCiAgICAgICAgZWNobyAkcnRbJ3F1ZXJ5J10gLiAnIHF1ZXJ5JzsNCiAgICAgICAgaWYgKGZ1bmN0aW9uX2V4aXN0cygnbWVtb3J5X2dldF91c2FnZScpKSB7DQogICAgICAgICAgICBlY2hvICcgLCAnIC4gJHJ0WydtZW1vcnknXSAuICdrYiBtZW1vcnknOw0KICAgICAgICB9DQoNCiAgICAgICAgZWNobyAnICwgJyAuICRydFsnZXJyb3InXSAuICcgZXJyb3InOw0KICAgICAgICBlY2hvICctLT4nOw0KICAgIH0NCg0KICAgIHJldHVybiAkcnQ7DQp9DQoNCi8qKg0KICog6I635b6X57O757uf5L+h5oGvLg0KICoNCiAqIEByZXR1cm4gc3RyaW5nIOezu+e7n+S/oeaBrw0KICoNCiAqIEBzaW5jZSAxLjQNCiAqLw0KZnVuY3Rpb24gR2V0RW52aXJvbm1lbnQoKQ0Kew0KICAgIGdsb2JhbCAkemJwOw0KICAgICRhamF4ID0gTmV0d29yazo6Q3JlYXRlKCk7DQogICAgaWYgKCRhamF4KSB7DQogICAgICAgICRhamF4ID0gc3Vic3RyKGdldF9jbGFzcygkYWpheCksIDkpOw0KICAgIH0NCiAgICBpZiAoJGFqYXggPT0gJ2N1cmwnKSB7DQogICAgICAgIGlmIChpbmlfZ2V0KCJzYWZlX21vZGUiKSB8fCAodmVyc2lvbl9jb21wYXJlKFBIUF9WRVJTSU9OLCAnNS42LjAnLCAnPCcpICYmIGluaV9nZXQoIm9wZW5fYmFzZWRpciIpKSkgew0KICAgICAgICAgICAgJGFqYXggLj0gJy1zYWZlbW9kZSc7DQogICAgICAgIH0NCiAgICAgICAgJGFycmF5ID0gY3VybF92ZXJzaW9uKCk7DQogICAgICAgICRhamF4IC49ICRhcnJheVsndmVyc2lvbiddOw0KICAgIH0NCiAgICBpZiAoZnVuY3Rpb25fZXhpc3RzKCdwaHBfdW5hbWUnKSA9PSB0cnVlKSB7DQogICAgICAgICR1bmFtZSA9IFNwbGl0QW5kR2V0KHBocF91bmFtZSgncicpLCAnLScsIDApOw0KICAgIH0gZWxzZSB7DQogICAgICAgICR1bmFtZSA9ICcnOw0KICAgIH0NCiAgICAkc3lzdGVtX2Vudmlyb25tZW50ID0gUEhQX09TIC4gJHVuYW1lIC4gJzsgJyAuDQogICAgR2V0VmFsdWVJbkFycmF5KA0KICAgICAgICBleHBsb2RlKA0KICAgICAgICAgICAgJyAnLA0KICAgICAgICAgICAgc3RyX3JlcGxhY2UoYXJyYXkoJ01pY3Jvc29mdC0nLCAnLycpLCBhcnJheSgnJywgJycpLCBHZXRWYXJzKCdTRVJWRVJfU09GVFdBUkUnLCAnU0VSVkVSJykpDQogICAgICAgICksDQogICAgICAgIDANCiAgICApIC4gJzsgJyAuDQogICAgJ1BIUCcgLiBHZXRQSFBWZXJzaW9uKCkgLiAoSVNfWDY0ID8gJ3g2NCcgOiAnJykgLiAnOyAnIC4NCiAgICAkemJwLT5vcHRpb25bJ1pDX0RBVEFCQVNFX1RZUEUnXSAuICR6YnAtPmRiLT52ZXJzaW9uIC4gJzsgJyAuICRhamF4Ow0KDQogICAgaWYgKGRlZmluZWQoJ09QRU5TU0xfVkVSU0lPTl9URVhUJykpIHsNCiAgICAgICAgJHN5c3RlbV9lbnZpcm9ubWVudCAuPSAnOyAnIC4gc3RyX3JlcGxhY2UoJyAnLCAnJywgT1BFTlNTTF9WRVJTSU9OX1RFWFQpOw0KICAgIH0NCg0KICAgIHJldHVybiAkc3lzdGVtX2Vudmlyb25tZW50Ow0KfQ0KDQovKioNCiAqIOmAmui/h+aWh+S7tuiOt+WPluW6lOeUqFVSTOWcsOWdgA0KICoNCiAqIEBwYXJhbSBzdHJpbmcgJGZpbGUg5paH5Lu25ZCNDQogKg0KICogQHJldHVybiBzdHJpbmcg6L+U5ZueVVJM5Zyw5Z2ADQogKi8NCmZ1bmN0aW9uIHBsdWdpbl9kaXJfdXJsKCRmaWxlKQ0Kew0KICAgIGdsb2JhbCAkemJwOw0KICAgICRzMSA9ICR6YnAtPnBhdGg7DQogICAgJHMyID0gc3RyX3JlcGxhY2UoJ1xcJywgJy8nLCBkaXJuYW1lKCRmaWxlKSAuICcvJyk7DQogICAgJHMgPSBzdWJzdHIoJHMyLCBzdHJzcG4oJHMxLCAkczIsIDApKTsNCiAgICBpZiAoc3RycG9zKCRzLCAnemJfdXNlcnMvcGx1Z2luLycpICE9PSBmYWxzZSkgew0KICAgICAgICAkcyA9IHN1YnN0cigkcywgc3Ryc3BuKCRzLCAkczMgPSAnemJfdXNlcnMvcGx1Z2luLycsIDApKTsNCiAgICB9IGVsc2Ugew0KICAgICAgICAkcyA9IHN1YnN0cigkcywgc3Ryc3BuKCRzLCAkczMgPSAnemJfdXNlcnMvdGhlbWUvJywgMCkpOw0KICAgIH0NCiAgICAkYSA9IGV4cGxvZGUoJy8nLCAkcyk7DQogICAgJHMgPSAkYVswXTsNCiAgICAkcyA9ICR6YnAtPmhvc3QgLiAkczMgLiAkcyAuICcvJzsNCg0KICAgIHJldHVybiAkczsNCn0NCg0KLyoqDQogKiDpgJrov4fmlofku7bojrflj5blupTnlKjnm67lvZXot6/lvoQuDQogKg0KICogQHBhcmFtICRmaWxlDQogKg0KICogQHJldHVybiBzdHJpbmcNCiAqLw0KZnVuY3Rpb24gcGx1Z2luX2Rpcl9wYXRoKCRmaWxlKQ0Kew0KICAgIGdsb2JhbCAkemJwOw0KICAgICRzMSA9ICR6YnAtPnBhdGg7DQogICAgJHMyID0gc3RyX3JlcGxhY2UoJ1xcJywgJy8nLCBkaXJuYW1lKCRmaWxlKSAuICcvJyk7DQogICAgJHMgPSBzdWJzdHIoJHMyLCBzdHJzcG4oJHMxLCAkczIsIDApKTsNCiAgICBpZiAoc3RycG9zKCRzLCAnemJfdXNlcnMvcGx1Z2luLycpICE9PSBmYWxzZSkgew0KICAgICAgICAkcyA9IHN1YnN0cigkcywgc3Ryc3BuKCRzLCAkczMgPSAnemJfdXNlcnMvcGx1Z2luLycsIDApKTsNCiAgICB9IGVsc2Ugew0KICAgICAgICAkcyA9IHN1YnN0cigkcywgc3Ryc3BuKCRzLCAkczMgPSAnemJfdXNlcnMvdGhlbWUvJywgMCkpOw0KICAgIH0NCiAgICAkYSA9IGV4cGxvZGUoJy8nLCAkcyk7DQogICAgJHMgPSAkYVswXTsNCiAgICAkcyA9ICR6YnAtPnBhdGggLiAkczMgLiAkcyAuICcvJzsNCg0KICAgIHJldHVybiAkczsNCn0NCg0KLyoqDQogKiDpgJrov4dLZXnku47mlbDnu4Tojrflj5bmlbDmja4uDQogKg0KICogQHBhcmFtIGFycmF5ICAkYXJyYXkg5pWw57uE5ZCNDQogKiBAcGFyYW0gc3RyaW5nICRuYW1lICDkuIvmoIdrZXkNCiAqDQogKiBAcmV0dXJuIG1peGVkDQogKi8NCmZ1bmN0aW9uIEdldFZhbHVlSW5BcnJheSgkYXJyYXksICRuYW1lKQ0Kew0KICAgIGlmIChpc19hcnJheSgkYXJyYXkpKSB7DQogICAgICAgIGlmIChhcnJheV9rZXlfZXhpc3RzKCRuYW1lLCAkYXJyYXkpKSB7DQogICAgICAgICAgICByZXR1cm4gJGFycmF5WyRuYW1lXTsNCiAgICAgICAgfQ0KICAgIH0NCn0NCg0KLyoqDQogKiDojrflj5bmlbDnu4TkuK3nmoTlvZPliY3lhYPntKDmlbDmja4uDQogKg0KICogQHBhcmFtIHN0cmluZyAkYXJyYXkg5pWw57uE5ZCNDQogKiBAcGFyYW0gc3RyaW5nICRuYW1lICDkuIvmoIdrZXkNCiAqDQogKiBAcmV0dXJuIG1peGVkDQogKi8NCmZ1bmN0aW9uIEdldFZhbHVlSW5BcnJheUJ5Q3VycmVudCgkYXJyYXksICRuYW1lKQ0Kew0KICAgIGlmIChpc19hcnJheSgkYXJyYXkpKSB7DQogICAgICAgICRhcnJheSA9IGN1cnJlbnQoJGFycmF5KTsNCg0KICAgICAgICByZXR1cm4gR2V0VmFsdWVJbkFycmF5KCRhcnJheSwgJG5hbWUpOw0KICAgIH0NCn0NCg0KLyoqDQogKiDliIblibJzdHJpbmflubblj5bmn5DpobnmlbDmja4uDQogKg0KICogQHBhcmFtIHN0cmluZyAkc3RyaW5nDQogKiBAcGFyYW0gc3RyaW5nICRkZWxpbWl0ZXINCiAqIEBwYXJhbSBpbnQgICAgJG4NCiAqDQogKiBAcmV0dXJuIHN0cmluZw0KICovDQpmdW5jdGlvbiBTcGxpdEFuZEdldCgkc3RyaW5nLCAkZGVsaW1pdGVyID0gJzsnLCAkbiA9IDApDQp7DQogICAgJGEgPSBleHBsb2RlKCRkZWxpbWl0ZXIsICRzdHJpbmcpOw0KICAgIGlmICghaXNfYXJyYXkoJGEpKSB7DQogICAgICAgICRhID0gYXJyYXkoKTsNCiAgICB9DQogICAgaWYgKGlzc2V0KCRhWyRuXSkpIHsNCiAgICAgICAgcmV0dXJuIChzdHJpbmcpICRhWyRuXTsNCiAgICB9DQoNCiAgICByZXR1cm4gJyc7DQp9DQoNCi8qKg0KICog5Yig6Zmk6L+e57ut56m65qC8DQogKg0KICogQHBhcmFtICRzDQogKg0KICogQHJldHVybiBudWxsfHN0cmluZ3xzdHJpbmdbXQ0KICovDQpmdW5jdGlvbiBSZW1vdmVNb3JlU3BhY2VzKCRzKQ0Kew0KICAgIHJldHVybiBwcmVnX3JlcGxhY2UoIi9ccyg/PVxzKS8iLCAiXFwxIiwgJHMpOw0KfQ0KDQovKioNCiAqIOiOt+WPlkd1aWQuDQogKg0KICogQHJldHVybiBzdHJpbmcNCiAqLw0KZnVuY3Rpb24gR2V0R3VpZCgpDQp7DQogICAgJGNoYXJpZCA9IHN0cnRvbG93ZXIobWQ1KHVuaXFpZChtdF9yYW5kKCksIHRydWUpKSk7DQoNCiAgICByZXR1cm4gJGNoYXJpZDsNCn0NCg0KLyoqDQogKiDojrflj5blj4LmlbDlgLwNCiAqDQogKiBAcGFyYW0gc3RyaW5nICRuYW1lIOaVsOe7hGtleeWQjQ0KICogQHBhcmFtIHN0cmluZyAkdHlwZSDpu5jorqTkuLpSRVFVRVNUDQogKg0KICogQHJldHVybiBtaXhlZHxudWxsDQogKi8NCmZ1bmN0aW9uIEdldFZhcnMoJG5hbWUsICR0eXBlID0gJ1JFUVVFU1QnKQ0Kew0KICAgICRhcnJheSA9ICYkR0xPQkFMU1tzdHJ0b3VwcGVyKCJfJHR5cGUiKV07DQoNCiAgICBpZiAoaXNzZXQoJGFycmF5WyRuYW1lXSkpIHsNCiAgICAgICAgcmV0dXJuICRhcnJheVskbmFtZV07DQogICAgfSBlbHNlIHsNCiAgICAgICAgcmV0dXJuIG51bGw7DQogICAgfQ0KfQ0KDQovKioNCiAqIOiOt+WPluWPguaVsOWAvO+8iOWPr+iuvue9rum7mOiupOi/lOWbnuWAvO+8iS4NCiAqDQogKiBAcGFyYW0gc3RyaW5nICRuYW1lICAgIOaVsOe7hGtleeWQjQ0KICogQHBhcmFtIHN0cmluZyAkdHlwZSAgICDpu5jorqTkuLpSRVFVRVNUDQogKiBAcGFyYW0gc3RyaW5nICRkZWZhdWx0IOm7mOiupOS4um51bGwNCiAqDQogKiBAcmV0dXJuIG1peGVkfG51bGwNCiAqDQogKiBAc2luY2UgMS4zLjE0MDYxNA0KICovDQpmdW5jdGlvbiBHZXRWYXJzQnlEZWZhdWx0KCRuYW1lLCAkdHlwZSA9ICdSRVFVRVNUJywgJGRlZmF1bHQgPSBudWxsKQ0Kew0KICAgICRnID0gR2V0VmFycygkbmFtZSwgJHR5cGUpOw0KICAgIGlmICgkZyA9PSBudWxsIHx8ICRnID09ICcnKSB7DQogICAgICAgIHJldHVybiAkZGVmYXVsdDsNCiAgICB9DQoNCiAgICByZXR1cm4gJGc7DQp9DQoNCi8qKg0KICog6I635Y+W5pWw5o2u5bqT5ZCNLg0KICoNCiAqIEByZXR1cm4gc3RyaW5nIOi/lOWbnuS4gOS4qumaj+acuueahFNRTGl0ZeaVsOaNruaWh+S7tuWQjQ0KICovDQpmdW5jdGlvbiBHZXREYk5hbWUoKQ0Kew0KICAgIHJldHVybiBzdHJfcmVwbGFjZSgnLScsICcnLCAnIyUyMCcgLiBzdHJ0b2xvd2VyKEdldEd1aWQoKSkpIC4gJy5kYic7DQp9DQoNCi8qKg0KICog6I635Y+W5b2T5YmN572R56uZ5Zyw5Z2ADQogKg0KICogQHBhcmFtIHN0cmluZyAkYmxvZ3BhdGggICAgIOe9keermeWfn+WQjQ0KICogQHBhcmFtIHN0cmluZyAmJGNvb2tpZXNQYXRoIOi/lOWbnmNvb2tpZeS9nOeUqOWfn+WAvO+8jOimgeS8oOW8leWFpQ0KICoNCiAqIEByZXR1cm4gc3RyaW5nIOi/lOWbnue9keermeWujOaVtOWcsOWdgO+8jOWmgmh0dHA6Ly9sb2NhbGhvc3QvemJwLw0KICovDQpmdW5jdGlvbiBHZXRDdXJyZW50SG9zdCgkYmxvZ3BhdGgsICYkY29va2llc1BhdGgpDQp7DQogICAgJGhvc3QgPSBIVFRQX1NDSEVNRTsNCg0KICAgICRob3N0IC49ICRfU0VSVkVSWydIVFRQX0hPU1QnXTsNCg0KICAgIGlmIChpc3NldCgkX1NFUlZFUlsnU0NSSVBUX05BTUUnXSkgJiYgJF9TRVJWRVJbJ1NDUklQVF9OQU1FJ10pIHsNCiAgICAgICAgJHggPSAkX1NFUlZFUlsnU0NSSVBUX05BTUUnXTsNCiAgICAgICAgJHkgPSAkYmxvZ3BhdGg7DQogICAgICAgIGZvciAoJGkgPSAwOyAkaSA8IHN0cmxlbigkeCk7ICRpKyspIHsNCiAgICAgICAgICAgICRmID0gJHkgLiBzdWJzdHIoJHgsICRpIC0gc3RybGVuKCR4KSk7DQogICAgICAgICAgICAkeiA9IHN1YnN0cigkeCwgMCwgJGkpOw0KICAgICAgICAgICAgaWYgKGZpbGVfZXhpc3RzKCRmKSAmJiBpc19maWxlKCRmKSkgew0KICAgICAgICAgICAgICAgICR6ID0gdHJpbSgkeiwgJy8nKTsNCiAgICAgICAgICAgICAgICAkeiA9ICcvJyAuICR6IC4gJy8nOw0KICAgICAgICAgICAgICAgICR6ID0gc3RyX3JlcGxhY2UoJy8vJywgJy8nLCAkeik7DQogICAgICAgICAgICAgICAgJGNvb2tpZXNQYXRoID0gJHo7DQoNCiAgICAgICAgICAgICAgICByZXR1cm4gJGhvc3QgLiAkejsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgIH0NCg0KICAgICR4ID0gJF9TRVJWRVJbJ1NDUklQVF9OQU1FJ107DQogICAgJHkgPSAkYmxvZ3BhdGg7DQogICAgaWYgKGlzc2V0KCRfU0VSVkVSWyJDT05URVhUX0RPQ1VNRU5UX1JPT1QiXSkgJiYgaXNzZXQoJF9TRVJWRVJbIkNPTlRFWFRfUFJFRklYIl0pKSB7DQogICAgICAgIGlmICgkX1NFUlZFUlsiQ09OVEVYVF9ET0NVTUVOVF9ST09UIl0gJiYgJF9TRVJWRVJbIkNPTlRFWFRfUFJFRklYIl0pIHsNCiAgICAgICAgICAgICR5ID0gJF9TRVJWRVJbIkNPTlRFWFRfRE9DVU1FTlRfUk9PVCJdIC4gJF9TRVJWRVJbIkNPTlRFWFRfUFJFRklYIl0gLiAnLyc7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICAkeiA9ICcnOw0KDQogICAgZm9yICgkaSA9IHN0cmxlbigkeCk7ICRpID4gMDsgJGktLSkgew0KICAgICAgICAkeiA9IHN1YnN0cigkeCwgMCwgJGkpOw0KICAgICAgICBpZiAoc3RydG9sb3dlcihzdWJzdHIoJHksIHN0cmxlbigkeSkgLSAkaSkpID09IHN0cnRvbG93ZXIoJHopKSB7DQogICAgICAgICAgICBicmVhazsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgICRjb29raWVzUGF0aCA9ICR6Ow0KDQogICAgcmV0dXJuICRob3N0IC4gJHo7DQp9DQoNCi8qKg0KICog6YCa6L+HVVJM6I635Y+W6L+c56iL6aG16Z2i5YaF5a65Lg0KICoNCiAqIEBwYXJhbSBzdHJpbmcgJHVybCBVUkzlnLDlnYANCiAqDQogKiBAcmV0dXJuIHN0cmluZyDov5Tlm57pobXpnaLmlofmnKzlhoXlrrnvvIzpu5jorqTkuLpudWxsDQogKi8NCmZ1bmN0aW9uIEdldEh0dHBDb250ZW50KCR1cmwpDQp7DQogICAgJGFqYXggPSBOZXR3b3JrOjpDcmVhdGUoKTsNCiAgICBpZiAoISRhamF4KSB7DQogICAgICAgIHJldHVybjsNCiAgICB9DQoNCiAgICAkYWpheC0+b3BlbignR0VUJywgJHVybCk7DQogICAgJGFqYXgtPmVuYWJsZUd6aXAoKTsNCiAgICAkYWpheC0+c2V0VGltZU91dHMoNjAsIDYwLCAwLCAwKTsNCiAgICAkYWpheC0+c2VuZCgpOw0KDQogICAgcmV0dXJuICgkYWpheC0+c3RhdHVzID09IDIwMCkgPyAkYWpheC0+cmVzcG9uc2VUZXh0IDogbnVsbDsNCn0NCg0KLyoqDQogKiDojrflj5bnm67lvZXkuIvmlofku7blpLnliJfooaguDQogKg0KICogQHBhcmFtIHN0cmluZyAkZGlyIOebruW9lQ0KICoNCiAqIEByZXR1cm4gYXJyYXkg5paH5Lu25aS55YiX6KGoDQogKi8NCmZ1bmN0aW9uIEdldERpcnNJbkRpcigkZGlyKQ0Kew0KICAgICRkaXJzID0gYXJyYXkoKTsNCg0KICAgIGlmICghZmlsZV9leGlzdHMoJGRpcikpIHsNCiAgICAgICAgcmV0dXJuIGFycmF5KCk7DQogICAgfQ0KICAgIGlmICghaXNfZGlyKCRkaXIpKSB7DQogICAgICAgIHJldHVybiBhcnJheSgpOw0KICAgIH0NCiAgICAkZGlyID0gc3RyX3JlcGxhY2UoJ1xcJywgJy8nLCAkZGlyKTsNCiAgICBpZiAoc3Vic3RyKCRkaXIsIC0xKSAhPT0gJy8nKSB7DQogICAgICAgICRkaXIgLj0gJy8nOw0KICAgIH0NCg0KICAgIC8vc2Nhbg0KICAgIGlmIChmdW5jdGlvbl9leGlzdHMoJ3NjYW5kaXInKSkgew0KICAgICAgICBmb3JlYWNoIChzY2FuZGlyKCRkaXIsIDApIGFzICRkKSB7DQogICAgICAgICAgICBpZiAoaXNfZGlyKCRkaXIgLiAkZCkpIHsNCiAgICAgICAgICAgICAgICBpZiAoKCRkICE9ICcuJykgJiYgKCRkICE9ICcuLicpKSB7DQogICAgICAgICAgICAgICAgICAgICRkaXJzW10gPSAkZDsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICB9IGVsc2Ugew0KICAgICAgICBpZiAoJGhhbmRsZSA9IG9wZW5kaXIoJGRpcikpIHsNCiAgICAgICAgICAgIHdoaWxlIChmYWxzZSAhPT0gKCRmaWxlID0gcmVhZGRpcigkaGFuZGxlKSkpIHsNCiAgICAgICAgICAgICAgICBpZiAoJGZpbGUgIT0gIi4iICYmICRmaWxlICE9ICIuLiIpIHsNCiAgICAgICAgICAgICAgICAgICAgaWYgKGlzX2RpcigkZGlyIC4gJGZpbGUpKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAkZGlyc1tdID0gJGZpbGU7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgICAgICBjbG9zZWRpcigkaGFuZGxlKTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIHJldHVybiAkZGlyczsNCn0NCg0KLyoqDQogKiDojrflj5bnm67lvZXkuIvmjIflrprnsbvlnovmlofku7bliJfooaguDQogKg0KICogQHBhcmFtIHN0cmluZyAkZGlyICDnm67lvZUNCiAqIEBwYXJhbSBzdHJpbmcgJHR5cGUg5paH5Lu257G75Z6L77yM5Lul772c5YiG6ZqUDQogKg0KICogQHJldHVybiBhcnJheSDmlofku7bliJfooagNCiAqLw0KZnVuY3Rpb24gR2V0RmlsZXNJbkRpcigkZGlyLCAkdHlwZSkNCnsNCiAgICAkZmlsZXMgPSBhcnJheSgpOw0KICAgICRkaXIgPSBzdHJfcmVwbGFjZSgnXFwnLCAnLycsICRkaXIpOw0KICAgIGlmIChzdWJzdHIoJGRpciwgLTEpICE9PSAnLycpIHsNCiAgICAgICAgJGRpciAuPSAnLyc7DQogICAgfQ0KICAgIGlmICghaXNfZGlyKCRkaXIpKSB7DQogICAgICAgIHJldHVybiBhcnJheSgpOw0KICAgIH0NCg0KICAgIGlmIChmdW5jdGlvbl9leGlzdHMoJ3NjYW5kaXInKSkgew0KICAgICAgICBmb3JlYWNoIChzY2FuZGlyKCRkaXIpIGFzICRmKSB7DQogICAgICAgICAgICBpZiAoaXNfZmlsZSgkZGlyIC4gJGYpKSB7DQogICAgICAgICAgICAgICAgZm9yZWFjaCAoZXhwbG9kZSgifCIsICR0eXBlKSBhcyAkdCkgew0KICAgICAgICAgICAgICAgICAgICAkdCA9ICcuJyAuICR0Ow0KICAgICAgICAgICAgICAgICAgICAkaSA9IHN0cmxlbigkdCk7DQogICAgICAgICAgICAgICAgICAgIGlmIChzdWJzdHIoJGYsIC0kaSwgJGkpID09ICR0KSB7DQogICAgICAgICAgICAgICAgICAgICAgICAkc29ydG5hbWUgPSBzdWJzdHIoJGYsIDAsIChzdHJsZW4oJGYpIC0gJGkpKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICRmaWxlc1skc29ydG5hbWVdID0gJGRpciAuICRmOw0KICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICB9IGVsc2Ugew0KICAgICAgICAkaGFuZGxlID0gb3BlbmRpcigkZGlyKTsNCiAgICAgICAgaWYgKCRoYW5kbGUpIHsNCiAgICAgICAgICAgIHdoaWxlIChmYWxzZSAhPT0gKCRmaWxlID0gcmVhZGRpcigkaGFuZGxlKSkpIHsNCiAgICAgICAgICAgICAgICBpZiAoJGZpbGUgIT0gIi4iICYmICRmaWxlICE9ICIuLiIpIHsNCiAgICAgICAgICAgICAgICAgICAgaWYgKGlzX2ZpbGUoJGRpciAuICRmaWxlKSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgZm9yZWFjaCAoZXhwbG9kZSgifCIsICR0eXBlKSBhcyAkdCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICR0ID0gJy4nIC4gJHQ7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJGkgPSBzdHJsZW4oJHQpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdWJzdHIoJGZpbGUsIC0kaSwgJGkpID09ICR0KSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzb3J0bmFtZSA9IHN1YnN0cigkZmlsZSwgMCwgKHN0cmxlbigkZmlsZSkgLSAkaSkpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkZmlsZXNbJHNvcnRuYW1lXSA9ICRkaXIgLiAkZmlsZTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgY2xvc2VkaXIoJGhhbmRsZSk7DQogICAgICAgIH0NCiAgICB9DQoNCiAgICByZXR1cm4gJGZpbGVzOw0KfQ0KDQovKioNCiAqIOiuvue9rmh0dHDnirbmgIHlpLQuDQogKg0KICogQHBhcmFtIGludCAkbnVtYmVyIEh0dHBTdGF0dXMNCiAqDQogKiBAaW50ZXJuYWwgcGFyYW0gc3RyaW5nICRzdGF0dXMg5oiQ5Yqf6I635Y+W54q25oCB56CB6K6+572u6Z2Z5oCB5Y+C5pWwc3RhdHVzDQogKg0KICogQHJldHVybiBib29sDQogKi8NCmZ1bmN0aW9uIFNldEh0dHBTdGF0dXNDb2RlKCRudW1iZXIsICRmb3JjZSA9IGZhbHNlKQ0Kew0KICAgIHN0YXRpYyAkc3RhdHVzID0gJyc7DQogICAgaWYgKCRzdGF0dXMgIT0gJycgJiYgJGZvcmNlID09IGZhbHNlKSB7DQogICAgICAgIHJldHVybiBmYWxzZTsNCiAgICB9DQoNCiAgICAkY29kZXMgPSBhcnJheSgNCiAgICAgICAgLy8gSW5mb3JtYXRpb25hbCAxeHgNCiAgICAgICAgMTAwID0+ICdDb250aW51ZScsDQogICAgICAgIDEwMSA9PiAnU3dpdGNoaW5nIFByb3RvY29scycsDQogICAgICAgIDEwMiA9PiAnUHJvY2Vzc2luZycsDQoNCiAgICAgICAgLy8gU3VjY2VzcyAyeHgNCiAgICAgICAgMjAwID0+ICdPSycsDQogICAgICAgIDIwMSA9PiAnQ3JlYXRlZCcsDQogICAgICAgIDIwMiA9PiAnQWNjZXB0ZWQnLA0KICAgICAgICAyMDMgPT4gJ05vbi1BdXRob3JpdGF0aXZlIEluZm9ybWF0aW9uJywNCiAgICAgICAgMjA0ID0+ICdObyBDb250ZW50JywNCiAgICAgICAgMjA1ID0+ICdSZXNldCBDb250ZW50JywNCiAgICAgICAgMjA2ID0+ICdQYXJ0aWFsIENvbnRlbnQnLA0KICAgICAgICAyMDcgPT4gJ011bHRpLVN0YXR1cycsDQoNCiAgICAgICAgLy8gUmVkaXJlY3Rpb24gM3h4DQogICAgICAgIDMwMCA9PiAnTXVsdGlwbGUgQ2hvaWNlcycsDQogICAgICAgIDMwMSA9PiAnTW92ZWQgUGVybWFuZW50bHknLA0KICAgICAgICAzMDIgPT4gJ0ZvdW5kJywgLy8gMS4xDQogICAgICAgIDMwMyA9PiAnU2VlIE90aGVyJywNCiAgICAgICAgMzA0ID0+ICdOb3QgTW9kaWZpZWQnLA0KICAgICAgICAzMDUgPT4gJ1VzZSBQcm94eScsDQogICAgICAgIDMwNiA9PiAnU3dpdGNoIFByb3h5JywNCiAgICAgICAgMzA3ID0+ICdUZW1wb3JhcnkgUmVkaXJlY3QnLA0KDQogICAgICAgIC8vIENsaWVudCBFcnJvciA0eHgNCiAgICAgICAgNDAwID0+ICdCYWQgUmVxdWVzdCcsDQogICAgICAgIDQwMSA9PiAnVW5hdXRob3JpemVkJywNCiAgICAgICAgNDAyID0+ICdQYXltZW50IFJlcXVpcmVkJywNCiAgICAgICAgNDAzID0+ICdGb3JiaWRkZW4nLA0KICAgICAgICA0MDQgPT4gJ05vdCBGb3VuZCcsDQogICAgICAgIDQwNSA9PiAnTWV0aG9kIE5vdCBBbGxvd2VkJywNCiAgICAgICAgNDA2ID0+ICdOb3QgQWNjZXB0YWJsZScsDQogICAgICAgIDQwNyA9PiAnUHJveHkgQXV0aGVudGljYXRpb24gUmVxdWlyZWQnLA0KICAgICAgICA0MDggPT4gJ1JlcXVlc3QgVGltZW91dCcsDQogICAgICAgIDQwOSA9PiAnQ29uZmxpY3QnLA0KICAgICAgICA0MTAgPT4gJ0dvbmUnLA0KICAgICAgICA0MTEgPT4gJ0xlbmd0aCBSZXF1aXJlZCcsDQogICAgICAgIDQxMiA9PiAnUHJlY29uZGl0aW9uIEZhaWxlZCcsDQogICAgICAgIDQxMyA9PiAnUmVxdWVzdCBFbnRpdHkgVG9vIExhcmdlJywNCiAgICAgICAgNDE0ID0+ICdSZXF1ZXN0LVVSSSBUb28gTG9uZycsDQogICAgICAgIDQxNSA9PiAnVW5zdXBwb3J0ZWQgTWVkaWEgVHlwZScsDQogICAgICAgIDQxNiA9PiAnUmVxdWVzdGVkIFJhbmdlIE5vdCBTYXRpc2ZpYWJsZScsDQogICAgICAgIDQxNyA9PiAnRXhwZWN0YXRpb24gRmFpbGVkJywNCiAgICAgICAgNDUxID0+ICdVbmF2YWlsYWJsZSBGb3IgTGVnYWwgUmVhc29ucycsDQoNCiAgICAgICAgLy8gU2VydmVyIEVycm9yIDV4eA0KICAgICAgICA1MDAgPT4gJ0ludGVybmFsIFNlcnZlciBFcnJvcicsDQogICAgICAgIDUwMSA9PiAnTm90IEltcGxlbWVudGVkJywNCiAgICAgICAgNTAyID0+ICdCYWQgR2F0ZXdheScsDQogICAgICAgIDUwMyA9PiAnU2VydmljZSBVbmF2YWlsYWJsZScsDQogICAgICAgIDUwNCA9PiAnR2F0ZXdheSBUaW1lb3V0JywNCiAgICAgICAgNTA1ID0+ICdIVFRQIFZlcnNpb24gTm90IFN1cHBvcnRlZCcsDQogICAgICAgIDUwNiA9PiAnVmFyaWFudCBBbHNvIE5lZ290aWF0ZXMnLA0KICAgICAgICA1MDcgPT4gJ0luc3VmZmljaWVudCBTdG9yYWdlJywNCiAgICAgICAgNTA4ID0+ICdMb29wIERldGVjdGVkJywNCiAgICAgICAgNTA5ID0+ICdCYW5kd2lkdGggTGltaXQgRXhjZWVkZWQnLA0KICAgICAgICA1MTAgPT4gJ05vdCBFeHRlbmRlZCcsDQogICAgKTsNCg0KICAgIGlmIChpc3NldCgkY29kZXNbJG51bWJlcl0pKSB7DQogICAgICAgIGhlYWRlcignSFRUUC8xLjEgJyAuICRudW1iZXIgLiAnICcgLiAkY29kZXNbJG51bWJlcl0pOw0KICAgICAgICAkc3RhdHVzID0gJG51bWJlcjsNCg0KICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICB9DQoNCiAgICByZXR1cm4gZmFsc2U7DQp9DQoNCi8qKg0KICog55Soc2NyaXB05qCH562+6L+b6KGM6Lez6L2sLg0KICoNCiAqIEBwYXJhbSBzdHJpbmcgJHVybCDot7Povazpk77mjqUNCiAqLw0KZnVuY3Rpb24gUmVkaXJlY3RCeVNjcmlwdCgkdXJsKQ0Kew0KICAgIGVjaG8gJzxzY3JpcHQ+bG9jYXRpb24uaHJlZiA9IGRlY29kZVVSSUNvbXBvbmVudCgiJyAuIHVybGVuY29kZSgkdXJsKSAuICciKTs8L3NjcmlwdD4nOw0KICAgIGRpZSgpOw0KfQ0KLyoqDQogKiAzMDLot7PovawuDQogKg0KICogQHBhcmFtIHN0cmluZyAkdXJsIOi3s+i9rOmTvuaOpQ0KICovDQpmdW5jdGlvbiBSZWRpcmVjdCgkdXJsKQ0Kew0KICAgIFNldEh0dHBTdGF0dXNDb2RlKDMwMik7DQogICAgaGVhZGVyKCdMb2NhdGlvbjogJyAuICR1cmwpOw0KICAgIGRpZSgpOw0KfQ0KDQovKioNCiAqIDMwMei3s+i9rC4NCiAqDQogKiBAcGFyYW0gc3RyaW5nICR1cmwg6Lez6L2s6ZO+5o6lDQogKi8NCmZ1bmN0aW9uIFJlZGlyZWN0MzAxKCR1cmwpDQp7DQogICAgU2V0SHR0cFN0YXR1c0NvZGUoMzAxKTsNCiAgICBoZWFkZXIoJ0xvY2F0aW9uOiAnIC4gJHVybCk7DQogICAgZGllKCk7DQp9DQovKioNCiAqIEBpZ25vcmUNCiAqLw0KZnVuY3Rpb24gSHR0cDQwNCgpDQp7DQogICAgU2V0SHR0cFN0YXR1c0NvZGUoNDA0KTsNCiAgICBoZWFkZXIoIlN0YXR1czogNDA0IE5vdCBGb3VuZCIpOw0KfQ0KLyoqDQogKiBAaWdub3JlDQogKi8NCmZ1bmN0aW9uIEh0dHA1MDAoKQ0Kew0KICAgIFNldEh0dHBTdGF0dXNDb2RlKDUwMCk7DQp9DQovKioNCiAqIEBpZ25vcmUNCiAqLw0KZnVuY3Rpb24gSHR0cDUwMygpDQp7DQogICAgU2V0SHR0cFN0YXR1c0NvZGUoNTAzKTsNCn0NCg0KLyoqDQogKiDorr7nva4zMDTnvJPlrZjlpLQuDQogKg0KICogQHBhcmFtIHN0cmluZyAkZmlsZW5hbWUg5paH5Lu25ZCNDQogKiBAcGFyYW0gc3RyaW5nICR0aW1lICAgICDnvJPlrZjml7bpl7QNCiAqLw0KZnVuY3Rpb24gSHR0cDMwNCgkZmlsZW5hbWUsICR0aW1lKQ0Kew0KICAgICR1cmwgPSAkZmlsZW5hbWU7DQogICAgJG1kNSA9IG1kNSgkdXJsIC4gJHRpbWUpOw0KICAgICRldGFnID0gJyInIC4gJG1kNSAuICciJzsNCiAgICBoZWFkZXIoJ0xhc3QtTW9kaWZpZWQ6ICcgLiBnbWRhdGUoJ0QsIGQgTSBZIEg6aTpzJywgJHRpbWUpIC4gJyBHTVQnKTsNCiAgICBoZWFkZXIoIkVUYWc6ICRldGFnIik7DQogICAgaWYgKChpc3NldCgkX1NFUlZFUlsnSFRUUF9JRl9OT05FX01BVENIJ10pICYmICRfU0VSVkVSWydIVFRQX0lGX05PTkVfTUFUQ0gnXSA9PSAkZXRhZykpIHsNCiAgICAgICAgU2V0SHR0cFN0YXR1c0NvZGUoMzA0KTsNCiAgICAgICAgZGllKCk7DQogICAgfQ0KfQ0KDQovKioNCiAqIOiOt+WPluWuouaIt+err0lQLg0KICoNCiAqIEByZXR1cm4gc3RyaW5nIOi/lOWbnklQ5Zyw5Z2ADQogKi8NCmZ1bmN0aW9uIEdldEd1ZXN0SVAoKQ0Kew0KICAgIGdsb2JhbCAkemJwOw0KICAgIGlmIChpc3NldCgkemJwLT5vcHRpb25bJ1pDX1VTSU5HX0NETl9HVUVTVElQX1RZUEUnXSkgJiYgJHpicC0+b3B0aW9uWydaQ19VU0lOR19DRE5fR1VFU1RJUF9UWVBFJ10gIT0gJycpIHsNCiAgICAgICAgJHVzZXJfaXAgPSBHZXRWYXJzKCR6YnAtPm9wdGlvblsnWkNfVVNJTkdfQ0ROX0dVRVNUSVBfVFlQRSddLCAiU0VSVkVSIik7DQogICAgfSBlbHNlIHsNCiAgICAgICAgJHVzZXJfaXAgPSBHZXRWYXJzKCJSRU1PVEVfQUREUiIsICJTRVJWRVIiKTsNCiAgICB9DQoNCiAgICByZXR1cm4gJHVzZXJfaXA7DQp9DQoNCi8qKg0KICog6I635Y+W5a6i5oi356uvQWdlbnQuDQogKg0KICogQHJldHVybiBzdHJpbmcg6L+U5ZueQWdlbnQNCiAqLw0KZnVuY3Rpb24gR2V0R3Vlc3RBZ2VudCgpDQp7DQogICAgcmV0dXJuIEdldFZhcnMoIkhUVFBfVVNFUl9BR0VOVCIsICJTRVJWRVIiKTsNCn0NCg0KLyoqDQogKiDojrflj5bor7fmsYLmnaXmupBVUkwuDQogKg0KICogQHJldHVybiBzdHJpbmcg6L+U5ZueVVJMDQogKi8NCmZ1bmN0aW9uIEdldFJlcXVlc3RVcmkoKQ0Kew0KICAgIGlmIChpc3NldCgkX1NFUlZFUlsnSFRUUF9YX09SSUdJTkFMX1VSTCddKSkgew0KICAgICAgICAkdXJsID0gJF9TRVJWRVJbJ0hUVFBfWF9PUklHSU5BTF9VUkwnXTsNCiAgICB9IGVsc2VpZiAoaXNzZXQoJF9TRVJWRVJbJ0hUVFBfWF9SRVdSSVRFX1VSTCddKSkgew0KICAgICAgICAkdXJsID0gJF9TRVJWRVJbJ0hUVFBfWF9SRVdSSVRFX1VSTCddOw0KICAgICAgICBpZiAoc3RycG9zKCR1cmwsICc/JykgIT09IGZhbHNlKSB7DQogICAgICAgICAgICAkcXVlcmllcyA9IEdldFZhbHVlSW5BcnJheShleHBsb2RlKCc/JywgJHVybCksICcxJyk7DQogICAgICAgICAgICBmb3JlYWNoIChleHBsb2RlKCcmJywgJHF1ZXJpZXMpIGFzICRxdWVyeSkgew0KICAgICAgICAgICAgICAgICRuYW1lID0gR2V0VmFsdWVJbkFycmF5KGV4cGxvZGUoJz0nLCAkcXVlcnkpLCAnMCcpOw0KICAgICAgICAgICAgICAgICR2YWx1ZSA9IEdldFZhbHVlSW5BcnJheShleHBsb2RlKCc9JywgJHF1ZXJ5KSwgJzEnKTsNCiAgICAgICAgICAgICAgICAkbmFtZSA9IHVybGRlY29kZSgkbmFtZSk7DQogICAgICAgICAgICAgICAgJHZhbHVlID0gdXJsZGVjb2RlKCR2YWx1ZSk7DQogICAgICAgICAgICAgICAgaWYgKCFpc3NldCgkX0dFVFskbmFtZV0pKSB7DQogICAgICAgICAgICAgICAgICAgICRfR0VUWyRuYW1lXSA9ICR2YWx1ZTsNCiAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICBpZiAoIWlzc2V0KCRfR0VUWyRuYW1lXSkpIHsNCiAgICAgICAgICAgICAgICAgICAgJF9SRVFVRVNUWyRuYW1lXSA9ICR2YWx1ZTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICB9IGVsc2VpZiAoaXNzZXQoJF9TRVJWRVJbJ1JFUVVFU1RfVVJJJ10pKSB7DQogICAgICAgICR1cmwgPSAkX1NFUlZFUlsnUkVRVUVTVF9VUkknXTsNCiAgICB9IGVsc2VpZiAoaXNzZXQoJF9TRVJWRVJbJ1JFRElSRUNUX1VSTCddKSkgew0KICAgICAgICAkdXJsID0gJF9TRVJWRVJbJ1JFRElSRUNUX1VSTCddOw0KICAgICAgICBpZiAoaXNzZXQoJF9TRVJWRVJbJ1JFRElSRUNUX1FVRVJZX1NUUklOJ10pKSB7DQogICAgICAgICAgICAkdXJsIC49ICc/JyAuICRfU0VSVkVSWydSRURJUkVDVF9RVUVSWV9TVFJJTiddOw0KICAgICAgICB9DQogICAgfSBlbHNlIHsNCiAgICAgICAgJHVybCA9ICRfU0VSVkVSWydQSFBfU0VMRiddIC4gKCRfU0VSVkVSWydRVUVSWV9TVFJJTkcnXSA/ICc/JyAuICRfU0VSVkVSWydRVUVSWV9TVFJJTkcnXSA6ICcnKTsNCiAgICB9DQoNCiAgICByZXR1cm4gJHVybDsNCn0NCg0KLyoqDQogKiDojrflj5bmlofku7blkI7nvIDlkI0uDQogKg0KICogQHBhcmFtIHN0cmluZyAkZiDmlofku7blkI0NCiAqDQogKiBAcmV0dXJuIHN0cmluZyDov5Tlm57lsI/lhpnnmoTlkI7nvIDlkI0NCiAqLw0KZnVuY3Rpb24gR2V0RmlsZUV4dCgkZikNCnsNCiAgICBpZiAoc3RycG9zKCRmLCAnLicpID09PSBmYWxzZSkgew0KICAgICAgICByZXR1cm4gJyc7DQogICAgfQ0KDQogICAgJGEgPSBleHBsb2RlKCcuJywgJGYpOw0KDQogICAgcmV0dXJuIHN0cnRvbG93ZXIoZW5kKCRhKSk7DQp9DQoNCi8qKg0KICog6I635Y+W5paH5Lu25p2D6ZmQLg0KICoNCiAqIEBwYXJhbSBzdHJpbmcgJGYg5paH5Lu25ZCNDQogKg0KICogQHJldHVybiBzdHJpbmd8bnVsbCDov5Tlm57mlofku7bmnYPpmZDvvIzmlbDlgLzmoLzlvI/vvIzlpoIwNjQ0DQogKi8NCmZ1bmN0aW9uIEdldEZpbGVQZXJtc09jdCgkZikNCnsNCiAgICBpZiAoIWZpbGVfZXhpc3RzKCRmKSkgew0KICAgICAgICByZXR1cm47DQogICAgfQ0KDQogICAgcmV0dXJuIHN1YnN0cihzcHJpbnRmKCclbycsIGZpbGVwZXJtcygkZikpLCAtNCk7DQp9DQoNCi8qKg0KICog6I635Y+W5paH5Lu25p2D6ZmQLg0KICoNCiAqIEBwYXJhbSBzdHJpbmcgJGYg5paH5Lu25ZCNDQogKg0KICogQHJldHVybiBzdHJpbmd8bnVsbCDov5Tlm57mlofku7bmnYPpmZDvvIzlrZfnrKbooajovr7moLzlvI/vvIzlpoItcnctci0tci0tDQogKi8NCmZ1bmN0aW9uIEdldEZpbGVQZXJtcygkZikNCnsNCiAgICBpZiAoIWZpbGVfZXhpc3RzKCRmKSkgew0KICAgICAgICByZXR1cm47DQogICAgfQ0KDQogICAgJHBlcm1zID0gZmlsZXBlcm1zKCRmKTsNCiAgICBzd2l0Y2ggKCRwZXJtcyAmIDB4RjAwMCkgew0KICAgICAgICBjYXNlIDB4QzAwMDogLy8gc29ja2V0DQogICAgICAgICAgICAkaW5mbyA9ICdzJzsNCiAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICBjYXNlIDB4QTAwMDogLy8gc3ltYm9saWMgbGluaw0KICAgICAgICAgICAgJGluZm8gPSAnbCc7DQogICAgICAgICAgICBicmVhazsNCiAgICAgICAgY2FzZSAweDgwMDA6IC8vIHJlZ3VsYXINCiAgICAgICAgICAgICRpbmZvID0gJy0nOw0KICAgICAgICAgICAgYnJlYWs7DQogICAgICAgIGNhc2UgMHg2MDAwOiAvLyBibG9jayBzcGVjaWFsDQogICAgICAgICAgICAkaW5mbyA9ICdiJzsNCiAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICBjYXNlIDB4NDAwMDogLy8gZGlyZWN0b3J5DQogICAgICAgICAgICAkaW5mbyA9ICdkJzsNCiAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICBjYXNlIDB4MjAwMDogLy8gY2hhcmFjdGVyIHNwZWNpYWwNCiAgICAgICAgICAgICRpbmZvID0gJ2MnOw0KICAgICAgICAgICAgYnJlYWs7DQogICAgICAgIGNhc2UgMHgxMDAwOiAvLyBGSUZPIHBpcGUNCiAgICAgICAgICAgICRpbmZvID0gJ3AnOw0KICAgICAgICAgICAgYnJlYWs7DQogICAgICAgIGRlZmF1bHQ6IC8vIHVua25vd24NCiAgICAgICAgICAgICRpbmZvID0gJ3UnOw0KICAgIH0NCg0KICAgIC8vIE93bmVyDQogICAgJGluZm8gLj0gKCgkcGVybXMgJiAweDAxMDApID8gJ3InIDogJy0nKTsNCiAgICAkaW5mbyAuPSAoKCRwZXJtcyAmIDB4MDA4MCkgPyAndycgOiAnLScpOw0KICAgICRpbmZvIC49ICgoJHBlcm1zICYgMHgwMDQwKSA/ICgoJHBlcm1zICYgMHgwODAwKSA/ICdzJyA6ICd4JykgOiAoKCRwZXJtcyAmIDB4MDgwMCkgPyAnUycgOiAnLScpKTsNCg0KICAgIC8vIEdyb3VwDQogICAgJGluZm8gLj0gKCgkcGVybXMgJiAweDAwMjApID8gJ3InIDogJy0nKTsNCiAgICAkaW5mbyAuPSAoKCRwZXJtcyAmIDB4MDAxMCkgPyAndycgOiAnLScpOw0KICAgICRpbmZvIC49ICgoJHBlcm1zICYgMHgwMDA4KSA/ICgoJHBlcm1zICYgMHgwNDAwKSA/ICdzJyA6ICd4JykgOiAoKCRwZXJtcyAmIDB4MDQwMCkgPyAnUycgOiAnLScpKTsNCg0KICAgIC8vIE90aGVyDQogICAgJGluZm8gLj0gKCgkcGVybXMgJiAweDAwMDQpID8gJ3InIDogJy0nKTsNCiAgICAkaW5mbyAuPSAoKCRwZXJtcyAmIDB4MDAwMikgPyAndycgOiAnLScpOw0KICAgICRpbmZvIC49ICgoJHBlcm1zICYgMHgwMDAxKSA/ICgoJHBlcm1zICYgMHgwMjAwKSA/ICd0JyA6ICd4JykgOiAoKCRwZXJtcyAmIDB4MDIwMCkgPyAnVCcgOiAnLScpKTsNCg0KICAgIHJldHVybiAkaW5mbzsNCn0NCg0KLyoqDQogKiDlkJHlrZfnrKbkuLLlnovnmoTlj4LmlbDooajliqDlhaXkuIDkuKrmlrDlj4LmlbAuDQogKg0KICogQHBhcmFtIHN0cmluZyAkcyAgICDlrZfnrKbkuLLlnovnmoTlj4LmlbDooajvvIzku6V856ym5Y+35YiG6ZqUDQogKiBAcGFyYW0gc3RyaW5nICRuYW1lIOWPguaVsOWQjQ0KICoNCiAqIEByZXR1cm4gc3RyaW5nIOi/lOWbnuaWsOWtl+espuS4su+8jOS7pXznrKblj7fliIbpmpQNCiAqLw0KZnVuY3Rpb24gQWRkTmFtZUluU3RyaW5nKCRzLCAkbmFtZSkNCnsNCiAgICAkcGwgPSAkczsNCiAgICAkbmFtZSA9IChzdHJpbmcpICRuYW1lOw0KICAgICRhcGwgPSBleHBsb2RlKCd8JywgJHBsKTsNCiAgICBpZiAoaW5fYXJyYXkoJG5hbWUsICRhcGwpID09IGZhbHNlKSB7DQogICAgICAgICRhcGxbXSA9ICRuYW1lOw0KICAgIH0NCiAgICAkcGwgPSB0cmltKGltcGxvZGUoJ3wnLCAkYXBsKSwgJ3wnKTsNCg0KICAgIHJldHVybiAkcGw7DQp9DQoNCi8qKg0KICog5LuO5a2X56ym5Liy5Z6L55qE5Y+C5pWw6KGo5Lit5Yig6Zmk5LiA5Liq5Y+C5pWwLg0KICoNCiAqIEBwYXJhbSBzdHJpbmcgJHMgICAg5a2X56ym5Liy5Z6L55qE5Y+C5pWw6KGo77yM5LulfOespuWPt+WIhumalA0KICogQHBhcmFtIHN0cmluZyAkbmFtZSDlj4LmlbDlkI0NCiAqDQogKiBAcmV0dXJuIHN0cmluZyDov5Tlm57mlrDlrZfnrKbkuLLvvIzku6V856ym5Y+35YiG6ZqUDQogKi8NCmZ1bmN0aW9uIERlbE5hbWVJblN0cmluZygkcywgJG5hbWUpDQp7DQogICAgJHBsID0gJHM7DQogICAgJG5hbWUgPSAoc3RyaW5nKSAkbmFtZTsNCiAgICAkYXBsID0gZXhwbG9kZSgnfCcsICRwbCk7DQogICAgZm9yICgkaSA9IDA7ICRpIDw9IGNvdW50KCRhcGwpIC0gMTsgJGkrKykgew0KICAgICAgICBpZiAoJGFwbFskaV0gPT0gJG5hbWUpIHsNCiAgICAgICAgICAgIHVuc2V0KCRhcGxbJGldKTsNCiAgICAgICAgfQ0KICAgIH0NCiAgICAkcGwgPSB0cmltKGltcGxvZGUoJ3wnLCAkYXBsKSwgJ3wnKTsNCg0KICAgIHJldHVybiAkcGw7DQp9DQoNCi8qKg0KICog5Zyo5a2X56ym5Liy5Y+C5pWw5YC85p+l5om+5Y+C5pWwLg0KICoNCiAqIEBwYXJhbSBzdHJpbmcgJHMgICAg5a2X56ym5Liy5Z6L55qE5Y+C5pWw6KGo77yM5LulfOespuWPt+WIhumalA0KICogQHBhcmFtIHN0cmluZyAkbmFtZSDlj4LmlbDlkI0NCiAqDQogKiBAcmV0dXJuIGJvb2wNCiAqLw0KZnVuY3Rpb24gSGFzTmFtZUluU3RyaW5nKCRzLCAkbmFtZSkNCnsNCiAgICAkcGwgPSAkczsNCiAgICAkbmFtZSA9IChzdHJpbmcpICRuYW1lOw0KICAgICRhcGwgPSBleHBsb2RlKCd8JywgJHBsKTsNCg0KICAgIHJldHVybiBpbl9hcnJheSgkbmFtZSwgJGFwbCk7DQp9DQoNCi8qKg0KICog5LulSlNPTuW9ouW8j+i+k+WHuumUmeivr+S/oeaBr++8iOeUqOS6jlNob3dFcnJvcuaOpeWPo++8iS4NCiAqDQogKiBAcGFyYW0gJGVycm9yQ29kZQ0KICogQHBhcmFtICRlcnJvclN0cmluZw0KICogQHBhcmFtICRmaWxlDQogKiBAcGFyYW0gJGxpbmUNCiAqLw0KZnVuY3Rpb24gSnNvbkVycm9yNFNob3dFcnJvckhvb2soJGVycm9yQ29kZSwgJGVycm9yU3RyaW5nLCAkZmlsZSwgJGxpbmUpDQp7DQogICAgaWYgKCRlcnJvckNvZGUgPT09IDApIHsNCiAgICAgICAgJGVycm9yQ29kZSA9IDE7DQogICAgfQ0KICAgIEpzb25FcnJvcigkZXJyb3JDb2RlLCAkZXJyb3JTdHJpbmcsIG51bGwpOw0KfQ0KDQovKioNCiAqIOS7pUpTT07lvaLlvI/ovpPlh7rplJnor6/kv6Hmga8uKGVyciBjb2Rl5Li6KGludCkw6K6k5Li65piv5rKh5pyJ6ZSZ6K+v77yM5omA5Lul5oqKMOi9rOS4ujEpDQogKg0KICogQHBhcmFtIHN0cmluZyAkZXJyb3JDb2RlICAg6ZSZ6K+v57yW5Y+3DQogKiBAcGFyYW0gc3RyaW5nICRlcnJvclN0cmluZyDplJnor6/lhoXlrrkNCiAqIEBwYXJhbSBvYmplY3QgJGRhdGEg5YW35L2T5YaF5a65DQogKi8NCmZ1bmN0aW9uIEpzb25FcnJvcigkZXJyb3JDb2RlLCAkZXJyb3JTdHJpbmcsICRkYXRhKQ0Kew0KICAgICRleGl0ID0gdHJ1ZTsNCiAgICBpZiAoJGVycm9yQ29kZSA9PT0gMCkgew0KICAgICAgICAkZXhpdCA9IGZhbHNlOw0KICAgIH0NCiAgICAkcmVzdWx0ID0gYXJyYXkoDQogICAgICAgICdkYXRhJyA9PiAkZGF0YSwNCiAgICAgICAgJ2VycicgID0+IGFycmF5KA0KICAgICAgICAgICAgJ2NvZGUnID0+ICRlcnJvckNvZGUsDQogICAgICAgICAgICAnbXNnJyAgPT4gJGVycm9yU3RyaW5nLA0KICAgICAgICAgICAgLy8ncnVudGltZScgPT4gUnVuVGltZSgpLA0KICAgICAgICAgICAgJ3RpbWVzdGFtcCcgPT4gdGltZSgpLA0KICAgICAgICApLA0KICAgICk7DQogICAgQG9iX2NsZWFuKCk7DQogICAgZWNobyBqc29uX2VuY29kZSgkcmVzdWx0KTsNCiAgICBpZiAoJGV4aXQpIHsNCiAgICAgICAgZXhpdDsNCiAgICB9DQp9DQoNCi8qKg0KICog5b2T5Luj56CB5q2j5bi46L+Q6KGM5pe277yM5LulSlNPTuW9ouW8j+i+k+WHuuS/oeaBry4NCiAqDQogKiBAcGFyYW0gb2JqZWN0IOW+hei/lOWbnuWGheWuuQ0KICovDQpmdW5jdGlvbiBKc29uUmV0dXJuKCRkYXRhKQ0Kew0KICAgIEpzb25FcnJvcigwLCAnJywgJGRhdGEpOw0KfQ0KDQovKioNCiAqIFhNTC1SUEPlupTnrZTplJnor6/pobXpnaIuDQogKg0KICogQHBhcmFtICRlcnJvckNvZGUNCiAqIEBwYXJhbSAkZXJyb3JTdHJpbmcNCiAqDQogKiBAcmV0dXJuIHZvaWQNCiAqLw0KZnVuY3Rpb24gUmVzcG9uZEVycm9yKCRlcnJvckNvZGUsICRlcnJvclN0cmluZyA9ICcnLCAkZmlsZSA9ICcnLCAkbGluZSA9ICcnKQ0Kew0KICAgICRzdHJYTUwgPSAnPD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz48bWV0aG9kUmVzcG9uc2U+PGZhdWx0Pjx2YWx1ZT48c3RydWN0PjxtZW1iZXI+PG5hbWU+ZmF1bHRDb2RlPC9uYW1lPjx2YWx1ZT48aW50PiQxPC9pbnQ+PC92YWx1ZT48L21lbWJlcj48bWVtYmVyPjxuYW1lPmZhdWx0U3RyaW5nPC9uYW1lPjx2YWx1ZT48c3RyaW5nPiQyPC9zdHJpbmc+PC92YWx1ZT48L21lbWJlcj48L3N0cnVjdD48L3ZhbHVlPjwvZmF1bHQ+PC9tZXRob2RSZXNwb25zZT4nOw0KICAgICRzdHJFcnJvciA9ICRzdHJYTUw7DQogICAgJHN0ckVycm9yID0gc3RyX3JlcGxhY2UoIiQxIiwgRm9ybWF0U3RyaW5nKCRlcnJvckNvZGUsICJbaHRtbC1mb3JtYXRdIiksICRzdHJFcnJvcik7DQogICAgJHN0ckVycm9yID0gc3RyX3JlcGxhY2UoIiQyIiwgRm9ybWF0U3RyaW5nKCRlcnJvclN0cmluZywgIltodG1sLWZvcm1hdF0iKSwgJHN0ckVycm9yKTsNCg0KICAgIG9iX2NsZWFuKCk7DQogICAgZWNobyAkc3RyRXJyb3I7DQogICAgZXhpdDsNCn0NCg0KLyoqDQogKiBYTUwtUlBD6ISa5pys6ZSZ6K+v6aG16Z2iLg0KICoNCiAqIEBwYXJhbSBzdHJpbmcgJGVycm9yQ29kZSDplJnor6/mj5DnpLrlrZfnrKbkuLINCiAqIEBwYXJhbSAkZXJyb3JTdHJpbmcNCiAqDQogKiBAcmV0dXJuIHZvaWQNCiAqLw0KZnVuY3Rpb24gU2NyaXB0RXJyb3IoJGVycm9yQ29kZSwgJGVycm9yVGV4dCA9ICcnLCAkZmlsZSA9ICcnLCAkbGluZSA9ICcnKQ0Kew0KICAgIGhlYWRlcignQ29udGVudC10eXBlOiBhcHBsaWNhdGlvbi94LWphdmFzY3JpcHQ7IENoYXJzZXQ9dXRmLTgnKTsNCiAgICBvYl9jbGVhbigpOw0KICAgIGVjaG8gJ2FsZXJ0KCInIC4gc3RyX3JlcGxhY2UoJyInLCAnXCInLCAkZXJyb3JDb2RlIC4gJzonIC4gJGVycm9yVGV4dCkgLiAnIiknOw0KICAgIGRpZSgpOw0KfQ0KDQovKioNCiAqICDpqozor4HlrZfnrKbkuLLmmK/lkKbnrKblkIjmraPliJnooajovr7lvI8uDQogKg0KICogQHBhcmFtIHN0cmluZyAkc291cmNlIOWtl+espuS4sg0KICogQHBhcmFtIHN0cmluZyAkcGFyYSAgIOato+WImeihqOi+vuW8j++8jOWPr+eUqFt1c2VybmFtZV18W3Bhc3N3b3JkXXxbZW1haWxdfFtob21lcGFnZV3miJboh6rlrprkuYnooajovr7lvI8NCiAqDQogKiBAcmV0dXJuIGJvb2wNCiAqLw0KZnVuY3Rpb24gQ2hlY2tSZWdFeHAoJHNvdXJjZSwgJHBhcmEpDQp7DQogICAgaWYgKHN0cnBvcygkcGFyYSwgJ1t1c2VybmFtZV0nKSAhPT0gZmFsc2UpIHsNCiAgICAgICAgJHBhcmEgPSAiL15bXC5cX0EtWmEtejAtOcK3QFx4ezRlMDB9LVx4ezlmYTV9XSskL3UiOw0KICAgIH0gZWxzZWlmIChzdHJwb3MoJHBhcmEsICdbbmlja25hbWVdJykgIT09IGZhbHNlKSB7DQogICAgICAgICRwYXJhID0gJy8oW15ceHswMX0tXHh7MUZ9XHh7ODB9LVx4e0ZGfVwvOlxcfiYlO0BcJyI/PD58IyRcKn17LFwrPVxbXF1cKFwpXHtcfVx0XHJcblxwe0N9XSkvdSc7DQogICAgfSBlbHNlaWYgKHN0cnBvcygkcGFyYSwgJ1twYXNzd29yZF0nKSAhPT0gZmFsc2UpIHsNCiAgICAgICAgJHBhcmEgPSAiL15bQS1aYS16MC05YH4hQCNcJCVcXiZcKlwtX1w/XSskL3UiOw0KICAgIH0gZWxzZWlmIChzdHJwb3MoJHBhcmEsICdbZW1haWxdJykgIT09IGZhbHNlKSB7DQogICAgICAgICRwYXJhID0gIi9eKFswLTlhLXpBLVpdKFstLlx3XSpbMC05YS16QS1aXSkqQChbMC05YS16QS1aXVstXHddKlwuKStbYS16QS1aXSopJC91IjsNCiAgICB9IGVsc2VpZiAoc3RycG9zKCRwYXJhLCAnW2hvbWVwYWdlXScpICE9PSBmYWxzZSkgew0KICAgICAgICAkcGFyYSA9ICIvXlthLXpBLVpdKzpcL1wvW2EtekEtWjAtOVxfXC1cLlwmXD9cLzo9I1x4ezRlMDB9LVx4ezlmYTV9XSskL3UiOw0KICAgIH0gZWxzZWlmICghJHBhcmEpIHsNCiAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgIH0NCg0KICAgIHJldHVybiAoYm9vbCkgcHJlZ19tYXRjaCgkcGFyYSwgJHNvdXJjZSk7DQp9DQoNCi8qKg0KICogIOagvOW8j+WMluWtl+espuS4si4NCiAqDQogKiBAcGFyYW0gc3RyaW5nICRzb3VyY2Ug5a2X56ym5LiyDQogKiBAcGFyYW0gc3RyaW5nICRwYXJhICAg5q2j5YiZ6KGo6L6+5byP77yM5Y+v55SoW2h0bWwtZm9ybWF0XXxbbm9odG1sXXxbbm9zY3JpcHRdfFtlbnRlcl18W25vZW50ZXJdfFtmaWxlbmFtZV18W25vcm1hbG5hbWVd5oiW6Ieq5a6a5LmJ6KGo6L6+5byPDQogKg0KICogQHJldHVybiBzdHJpbmcNCiAqLw0KZnVuY3Rpb24gRm9ybWF0U3RyaW5nKCRzb3VyY2UsICRwYXJhKQ0Kew0KICAgIGlmIChzdHJwb3MoJHBhcmEsICdbaHRtbC1mb3JtYXRdJykgIT09IGZhbHNlKSB7DQogICAgICAgICRzb3VyY2UgPSBodG1sc3BlY2lhbGNoYXJzKCRzb3VyY2UpOw0KICAgIH0NCg0KICAgIGlmIChzdHJwb3MoJHBhcmEsICdbbm9odG1sXScpICE9PSBmYWxzZSkgew0KICAgICAgICAkc291cmNlID0gcHJlZ19yZXBsYWNlKCIvPChbXjw+XSopPi9zaSIsICIiLCAkc291cmNlKTsNCiAgICAgICAgJHNvdXJjZSA9IHN0cl9yZXBsYWNlKCI8IiwgIsuCIiwgJHNvdXJjZSk7DQogICAgICAgICRzb3VyY2UgPSBzdHJfcmVwbGFjZSgiPiIsICLLgyIsICRzb3VyY2UpOw0KICAgIH0NCg0KICAgIGlmIChzdHJwb3MoJHBhcmEsICdbbm9zY3JpcHRdJykgIT09IGZhbHNlKSB7DQogICAgICAgICRjbGFzcyA9IG5ldyBYc3NIdG1sKCRzb3VyY2UpOw0KICAgICAgICAkc291cmNlID0gdHJpbSgkY2xhc3MtPmdldEh0bWwoKSk7DQogICAgfQ0KICAgIGlmIChzdHJwb3MoJHBhcmEsICdbZW50ZXJdJykgIT09IGZhbHNlKSB7DQogICAgICAgICRzb3VyY2UgPSBzdHJfcmVwbGFjZSgiXHJcbiIsICI8YnIvPiIsICRzb3VyY2UpOw0KICAgICAgICAkc291cmNlID0gc3RyX3JlcGxhY2UoIlxuIiwgIjxici8+IiwgJHNvdXJjZSk7DQogICAgICAgICRzb3VyY2UgPSBzdHJfcmVwbGFjZSgiXHIiLCAiPGJyLz4iLCAkc291cmNlKTsNCiAgICAgICAgJHNvdXJjZSA9IHByZWdfcmVwbGFjZSgiLyg8YnJcLz4pKy8iLCAiPGJyLz4iLCAkc291cmNlKTsNCiAgICB9DQogICAgaWYgKHN0cnBvcygkcGFyYSwgJ1tub2VudGVyXScpICE9PSBmYWxzZSkgew0KICAgICAgICAkc291cmNlID0gc3RyX3JlcGxhY2UoIlxyXG4iLCAiIiwgJHNvdXJjZSk7DQogICAgICAgICRzb3VyY2UgPSBzdHJfcmVwbGFjZSgiXG4iLCAiIiwgJHNvdXJjZSk7DQogICAgICAgICRzb3VyY2UgPSBzdHJfcmVwbGFjZSgiXHIiLCAiIiwgJHNvdXJjZSk7DQogICAgfQ0KICAgIGlmIChzdHJwb3MoJHBhcmEsICdbZmlsZW5hbWVdJykgIT09IGZhbHNlKSB7DQogICAgICAgICRzb3VyY2UgPSBzdHJfcmVwbGFjZShhcnJheSgiLyIsICIjIiwgIiQiLCAiXFwiLCAiOiIsICI/IiwgIioiLCAiXCIiLCAiPCIsICI+IiwgInwiLCAiICIpLCBhcnJheSgiIiksICRzb3VyY2UpOw0KICAgIH0NCiAgICBpZiAoc3RycG9zKCRwYXJhLCAnW25vcm1hbG5hbWVdJykgIT09IGZhbHNlKSB7DQogICAgICAgICRzb3VyY2UgPSBzdHJfcmVwbGFjZShhcnJheSgiIyIsICIkIiwgIigiLCAiKSIsICIqIiwgIisiLCAiWyIsICJdIiwgInsiLCAifSIsICI/IiwgIlxcIiwgIl4iLCAifCIsICI6IiwgIiciLCAiXCIiLCAiOyIsICJAIiwgIn4iLCAiPSIsICIlIiwgIiYiKSwgYXJyYXkoIiIpLCAkc291cmNlKTsNCiAgICB9DQoNCiAgICByZXR1cm4gJHNvdXJjZTsNCn0NCg0KLyoqDQogKiBARGVwcmVjYXRlZA0KICog5qC85byP5YyW5a2X56ym5LiyDQogKiovDQpmdW5jdGlvbiBUcmFuc2ZlckhUTUwoJHNvdXJjZSwgJHBhcmFtKQ0Kew0KICAgIHJldHVybiBGb3JtYXRTdHJpbmcoJHNvdXJjZSwgJHBhcmFtKTsNCn0NCg0KLyoqDQogKiAg5bCB6KOFSFRNTOagh+etvi4NCiAqDQogKiBAcGFyYW0gc3RyaW5nICRodG1sIGh0bWzmupDnoIENCiAqDQogKiBAcmV0dXJuIHN0cmluZw0KICovDQpmdW5jdGlvbiBDbG9zZVRhZ3MoJGh0bWwpDQp7DQogICAgcHJlZ19tYXRjaF9hbGwoJyM8KD8hbWV0YXxpbWd8YnJ8aHJ8aW5wdXRcYilcYihbYS16XSspKD86IC4qKT8oPzwhWy98LyBdKT4jaVUnLCAkaHRtbCwgJHJlc3VsdCk7DQogICAgJG9wZW5lZHRhZ3MgPSAkcmVzdWx0WzFdOw0KICAgIHByZWdfbWF0Y2hfYWxsKCcjPC8oW2Etel0rKT4jaVUnLCAkaHRtbCwgJHJlc3VsdCk7DQogICAgJGNsb3NlZHRhZ3MgPSAkcmVzdWx0WzFdOw0KICAgICRsZW5fb3BlbmVkID0gY291bnQoJG9wZW5lZHRhZ3MpOw0KICAgIGlmIChjb3VudCgkY2xvc2VkdGFncykgPT0gJGxlbl9vcGVuZWQpIHsNCiAgICAgICAgcmV0dXJuICRodG1sOw0KICAgIH0NCiAgICAkb3BlbmVkdGFncyA9IGFycmF5X3JldmVyc2UoJG9wZW5lZHRhZ3MpOw0KICAgIGZvciAoJGkgPSAwOyAkaSA8ICRsZW5fb3BlbmVkOyAkaSsrKSB7DQogICAgICAgIGlmICghaW5fYXJyYXkoJG9wZW5lZHRhZ3NbJGldLCAkY2xvc2VkdGFncykpIHsNCiAgICAgICAgICAgICRodG1sIC49ICc8LycgLiAkb3BlbmVkdGFnc1skaV0gLiAnPic7DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICB1bnNldCgkY2xvc2VkdGFnc1thcnJheV9zZWFyY2goJG9wZW5lZHRhZ3NbJGldLCAkY2xvc2VkdGFncyldKTsNCiAgICAgICAgfQ0KICAgIH0NCiAgICByZXR1cm4gJGh0bWw7DQp9DQoNCi8qKg0KICog6I635Y+WVVRGOOagvOW8j+eahOWtl+espuS4sueahOWtkOS4si4NCiAqDQogKiBAcGFyYW0gc3RyaW5nICRzb3VyY2VzdHIg5rqQ5a2X56ym5LiyDQogKiBAcGFyYW0gaW50ICAgICRzdGFydCAgICAg6LW35aeL5L2N572uDQogKiBAcGFyYW0gaW50ICAgICRjdXRsZW5ndGgg5a2Q5Liy6ZW/5bqmDQogKg0KICogQHJldHVybiBzdHJpbmcNCiAqLw0KZnVuY3Rpb24gU3ViU3RyVVRGOF9TdGFydCgkc291cmNlc3RyLCAkc3RhcnQsICRjdXRsZW5ndGgpDQp7DQogICAgaWYgKGZ1bmN0aW9uX2V4aXN0cygnbWJfc3Vic3RyJykgJiYgZnVuY3Rpb25fZXhpc3RzKCdtYl9pbnRlcm5hbF9lbmNvZGluZycpKSB7DQogICAgICAgIG1iX2ludGVybmFsX2VuY29kaW5nKCdVVEYtOCcpOw0KDQogICAgICAgIHJldHVybiBtYl9zdWJzdHIoJHNvdXJjZXN0ciwgJHN0YXJ0LCAkY3V0bGVuZ3RoKTsNCiAgICB9DQoNCiAgICBpZiAoZnVuY3Rpb25fZXhpc3RzKCdpY29udl9zdWJzdHInKSAmJiBmdW5jdGlvbl9leGlzdHMoJ2ljb252X3NldF9lbmNvZGluZycpKSB7DQogICAgICAgIGljb252X3NldF9lbmNvZGluZygiaW50ZXJuYWxfZW5jb2RpbmciLCAiVVRGLTgiKTsNCiAgICAgICAgaWNvbnZfc2V0X2VuY29kaW5nKCJvdXRwdXRfZW5jb2RpbmciLCAiVVRGLTgiKTsNCg0KICAgICAgICByZXR1cm4gaWNvbnZfc3Vic3RyKCRzb3VyY2VzdHIsICRzdGFydCwgJGN1dGxlbmd0aCk7DQogICAgfQ0KDQogICAgcmV0dXJuIHN1YnN0cigkc291cmNlc3RyLCAkc3RhcnQsICRjdXRsZW5ndGgpOw0KfQ0KDQovKioNCiAqICDojrflj5ZVVEY45qC85byP55qE5a2X56ym5Liy55qE5a2Q5LiyLg0KICoNCiAqIEBwYXJhbSBzdHJpbmcgJHNvdXJjZXN0ciDmupDlrZfnrKbkuLINCiAqIEBwYXJhbSBpbnQgICAgJGN1dGxlbmd0aCDlrZDkuLLplb/luqYNCiAqDQogKiBAcmV0dXJuIHN0cmluZw0KICovDQpmdW5jdGlvbiBTdWJTdHJVVEY4KCRzb3VyY2VzdHIsICRjdXRsZW5ndGgpDQp7DQogICAgaWYgKGZ1bmN0aW9uX2V4aXN0cygnbWJfc3Vic3RyJykgJiYgZnVuY3Rpb25fZXhpc3RzKCdtYl9pbnRlcm5hbF9lbmNvZGluZycpKSB7DQogICAgICAgIG1iX2ludGVybmFsX2VuY29kaW5nKCdVVEYtOCcpOw0KDQogICAgICAgIHJldHVybiBtYl9zdWJzdHIoJHNvdXJjZXN0ciwgMCwgJGN1dGxlbmd0aCk7DQogICAgfQ0KDQogICAgaWYgKGZ1bmN0aW9uX2V4aXN0cygnaWNvbnZfc3Vic3RyJykgJiYgZnVuY3Rpb25fZXhpc3RzKCdpY29udl9zZXRfZW5jb2RpbmcnKSkgew0KICAgICAgICBpY29udl9zZXRfZW5jb2RpbmcoImludGVybmFsX2VuY29kaW5nIiwgIlVURi04Iik7DQogICAgICAgIGljb252X3NldF9lbmNvZGluZygib3V0cHV0X2VuY29kaW5nIiwgIlVURi04Iik7DQoNCiAgICAgICAgcmV0dXJuIGljb252X3N1YnN0cigkc291cmNlc3RyLCAwLCAkY3V0bGVuZ3RoKTsNCiAgICB9DQoNCiAgICAkcmV0ID0gJyc7DQogICAgJGkgPSAwOw0KICAgICRuID0gMDsNCg0KICAgICRzdHJfbGVuZ3RoID0gc3RybGVuKCRzb3VyY2VzdHIpOyAvL+Wtl+espuS4sueahOWtl+iKguaVsA0KDQogICAgd2hpbGUgKCgkbiA8ICRjdXRsZW5ndGgpIGFuZCAoJGkgPD0gJHN0cl9sZW5ndGgpKSB7DQogICAgICAgICR0ZW1wX3N0ciA9IHN1YnN0cigkc291cmNlc3RyLCAkaSwgMSk7DQogICAgICAgICRhc2NudW0gPSBvcmQoJHRlbXBfc3RyKTsgLy/lvpfliLDlrZfnrKbkuLLkuK3nrKwkaeS9jeWtl+espueahGFzY2lp56CBDQogICAgICAgIGlmICgkYXNjbnVtID49IDIyNCkgeyAvL+WmguaenEFTQ0lJ5L2N6auY5LiOMjI077yMDQogICAgICAgICAgICAkcmV0ID0gJHJldCAuIHN1YnN0cigkc291cmNlc3RyLCAkaSwgMyk7IC8v5qC55o2uVVRGLTjnvJbnoIHop4TojIPvvIzlsIYz5Liq6L+e57ut55qE5a2X56ym6K6h5Li65Y2V5Liq5a2X56ymDQogICAgICAgICAgICAkaSA9ICRpICsgMzsgLy/lrp7pmYVCeXRl6K6h5Li6Mw0KICAgICAgICAgICAgJG4rKzsgLy/lrZfkuLLplb/luqborqExDQogICAgICAgIH0gZWxzZWlmICgkYXNjbnVtID49IDE5MikgeyAvL+WmguaenEFTQ0lJ5L2N6auY5LiOMTky77yMDQogICAgICAgICAgICAkcmV0ID0gJHJldCAuIHN1YnN0cigkc291cmNlc3RyLCAkaSwgMik7IC8v5qC55o2uVVRGLTjnvJbnoIHop4TojIPvvIzlsIYy5Liq6L+e57ut55qE5a2X56ym6K6h5Li65Y2V5Liq5a2X56ymDQogICAgICAgICAgICAkaSA9ICRpICsgMjsgLy/lrp7pmYVCeXRl6K6h5Li6Mg0KICAgICAgICAgICAgJG4rKzsgLy/lrZfkuLLplb/luqborqExDQogICAgICAgIH0gZWxzZWlmICgkYXNjbnVtID49IDY1ICYmICRhc2NudW0gPD0gOTApIHsgLy/lpoLmnpzmmK/lpKflhpnlrZfmr43vvIwNCiAgICAgICAgICAgICRyZXQgPSAkcmV0IC4gc3Vic3RyKCRzb3VyY2VzdHIsICRpLCAxKTsNCiAgICAgICAgICAgICRpID0gJGkgKyAxOyAvL+WunumZheeahEJ5dGXmlbDku43orqEx5LiqDQogICAgICAgICAgICAkbisrOyAvL+S9huiAg+iZkeaVtOS9k+e+juingu+8jOWkp+WGmeWtl+avjeiuoeaIkOS4gOS4qumrmOS9jeWtl+espg0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgLy/lhbbku5bmg4XlhrXkuIvvvIzljIXmi6zlsI/lhpnlrZfmr43lkozljYrop5LmoIfngrnnrKblj7fvvIwNCg0KICAgICAgICAgICAgJHJldCA9ICRyZXQgLiBzdWJzdHIoJHNvdXJjZXN0ciwgJGksIDEpOw0KICAgICAgICAgICAgJGkgPSAkaSArIDE7IC8v5a6e6ZmF55qEQnl0ZeaVsOiuoTHkuKoNCiAgICAgICAgICAgICAgICAkbiA9ICRuICsgMC41OyAvL+Wwj+WGmeWtl+avjeWSjOWNiuinkuagh+eCueetieS4juWNiuS4qumrmOS9jeWtl+espuWuvS4uLg0KICAgICAgICB9DQogICAgICAgIC8qDQogICAgICAgIGlmICgkc3RyX2xlbmd0aCA+ICRjdXRsZW5ndGgpIHsNCiAgICAgICAgICAgICRyZXQgPSAkcmV0Ow0KICAgICAgICB9DQogICAgICAgICovDQogICAgfQ0KDQogICAgcmV0dXJuICRyZXQ7DQp9DQoNCi8qKg0KICog5oiq5Y+WSFRNTOagvOW8j+eahFVURjjmoLzlvI/nmoTlrZfnrKbkuLLnmoTlrZDkuLIuDQogKg0KICogQHBhcmFtIHN0cmluZyAkc291cmNlIOa6kOWtl+espuS4sg0KICogQHBhcmFtIGludCAgICAkbGVuZ3RoIOWtkOS4sumVv+W6pg0KICoNCiAqIEByZXR1cm4gc3RyaW5nDQogKi8NCmZ1bmN0aW9uIFN1YlN0clVURjhfSHRtbCgkc291cmNlLCAkbGVuZ3RoKQ0Kew0KICAgIGlmIChmdW5jdGlvbl9leGlzdHMoJ21iX3N1YnN0cicpICYmIGZ1bmN0aW9uX2V4aXN0cygnbWJfaW50ZXJuYWxfZW5jb2RpbmcnKSkgew0KICAgICAgICBtYl9pbnRlcm5hbF9lbmNvZGluZygnVVRGLTgnKTsNCiAgICAgICAgJGogPSBtYl9zdHJsZW4oJHNvdXJjZSk7DQogICAgICAgICRzID0gbWJfc3Vic3RyKCRzb3VyY2UsIDAsICRsZW5ndGgpOw0KICAgICAgICAkbCA9IG1iX3N1YnN0cl9jb3VudCgkcywgJzwnKTsNCiAgICAgICAgJHIgPSBtYl9zdWJzdHJfY291bnQoJHMsICc+Jyk7DQogICAgICAgIGlmICgkbCA+IDAgJiYgJGwgPiAkcikgew0KICAgICAgICAgICAgZm9yICgkaSA9ICRsZW5ndGg7ICRpIDwgJGo7ICRpKyspIHsNCiAgICAgICAgICAgICAgICAkcyAuPSBtYl9zdWJzdHIoJHNvdXJjZSwgJGksIDEpOw0KICAgICAgICAgICAgICAgIGlmIChtYl9zdWJzdHIoJHNvdXJjZSwgJGksIDEpID09ICc+Jykgew0KICAgICAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICByZXR1cm4gJHM7DQogICAgfQ0KDQogICAgaWYgKGZ1bmN0aW9uX2V4aXN0cygnaWNvbnZfc3Vic3RyJykgJiYgZnVuY3Rpb25fZXhpc3RzKCdpY29udl9zZXRfZW5jb2RpbmcnKSkgew0KICAgICAgICBpY29udl9zZXRfZW5jb2RpbmcoImludGVybmFsX2VuY29kaW5nIiwgIlVURi04Iik7DQogICAgICAgIGljb252X3NldF9lbmNvZGluZygib3V0cHV0X2VuY29kaW5nIiwgIlVURi04Iik7DQogICAgICAgICRqID0gaWNvbnZfc3RybGVuKCRzb3VyY2UpOw0KICAgICAgICAkcyA9IGljb252X3N1YnN0cigkc291cmNlLCAwLCAkbGVuZ3RoKTsNCiAgICAgICAgJGwgPSBzdWJzdHJfY291bnQoJHMsICc8Jyk7DQogICAgICAgICRyID0gc3Vic3RyX2NvdW50KCRzLCAnPicpOw0KICAgICAgICBpZiAoJGwgPiAwICYmICRsID4gJHIpIHsNCiAgICAgICAgICAgIGZvciAoJGkgPSAkbGVuZ3RoOyAkaSA8ICRqOyAkaSsrKSB7DQogICAgICAgICAgICAgICAgJHMgLj0gaWNvbnZfc3Vic3RyKCRzb3VyY2UsICRpLCAxKTsNCiAgICAgICAgICAgICAgICBpZiAoaWNvbnZfc3Vic3RyKCRzb3VyY2UsICRpLCAxKSA9PSAnPicpIHsNCiAgICAgICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgcmV0dXJuICRzOw0KICAgIH0NCg0KICAgICRqID0gc3RybGVuKCRzb3VyY2UpOw0KICAgICRzID0gc3Vic3RyKCRzb3VyY2UsIDAsICRsZW5ndGgpOw0KICAgICRsID0gc3Vic3RyX2NvdW50KCRzLCAnPCcpOw0KICAgICRyID0gc3Vic3RyX2NvdW50KCRzLCAnPicpOw0KICAgIGlmICgkbCA+IDAgJiYgJGwgPiAkcikgew0KICAgICAgICBmb3IgKCRpID0gJGxlbmd0aDsgJGkgPCAkajsgJGkrKykgew0KICAgICAgICAgICAgJHMgLj0gc3Vic3RyKCRzb3VyY2UsICRpLCAxKTsNCiAgICAgICAgICAgIGlmIChzdWJzdHIoJHNvdXJjZSwgJGksIDEpID09ICc+Jykgew0KICAgICAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgfQ0KDQogICAgcmV0dXJuICRzOw0KfQ0KDQovKioNCiAqIOWIoOmZpOaWh+S7tkJPTeWktC4NCiAqDQogKiBAcGFyYW0gc3RyaW5nICRzIOaWh+S7tuWGheWuuQ0KICoNCiAqIEByZXR1cm4gc3RyaW5nDQogKi8NCmZ1bmN0aW9uIFJlbW92ZUJPTSgkcykNCnsNCiAgICAkY2hhcnNldCA9IGFycmF5KCk7DQogICAgJGNoYXJzZXRbMV0gPSBzdWJzdHIoJHMsIDAsIDEpOw0KICAgICRjaGFyc2V0WzJdID0gc3Vic3RyKCRzLCAxLCAxKTsNCiAgICAkY2hhcnNldFszXSA9IHN1YnN0cigkcywgMiwgMSk7DQogICAgaWYgKG9yZCgkY2hhcnNldFsxXSkgPT0gMjM5ICYmIG9yZCgkY2hhcnNldFsyXSkgPT0gMTg3ICYmIG9yZCgkY2hhcnNldFszXSkgPT0gMTkxKSB7DQogICAgICAgICRzID0gc3Vic3RyKCRzLCAzKTsNCiAgICB9DQoNCiAgICByZXR1cm4gJHM7DQp9DQoNCi8qKg0KICog6I635Y+W5oyH5a6a5pe25Yy65ZCNLg0KICoNCiAqIEBwYXJhbSBpbnQgJHog5pe25Yy65Y+3DQogKg0KICogQHJldHVybiBzdHJpbmcg5pe25Yy65ZCNDQogKg0KICogQHNpbmNlIDEuMy4xNDA2MTQNCiAqLw0KZnVuY3Rpb24gR2V0VGltZVpvbmVCeUdNVCgkeikNCnsNCiAgICAkdGltZXpvbmVzID0gYXJyYXkoDQogICAgICAgIC0xMiA9PiAnRXRjL0dNVCsxMicsDQogICAgICAgIC0xMSA9PiAnUGFjaWZpYy9NaWR3YXknLA0KICAgICAgICAtMTAgPT4gJ1BhY2lmaWMvSG9ub2x1bHUnLA0KICAgICAgICAtOSAgPT4gJ0FtZXJpY2EvQW5jaG9yYWdlJywNCiAgICAgICAgLTggID0+ICdBbWVyaWNhL0xvc19BbmdlbGVzJywNCiAgICAgICAgLTcgID0+ICdBbWVyaWNhL0RlbnZlcicsDQogICAgICAgIC02ICA9PiAnQW1lcmljYS9UZWd1Y2lnYWxwYScsDQogICAgICAgIC01ICA9PiAnQW1lcmljYS9OZXdfWW9yaycsDQogICAgICAgIC00ICA9PiAnQW1lcmljYS9IYWxpZmF4JywNCiAgICAgICAgLTMgID0+ICdBbWVyaWNhL0FyZ2VudGluYS9CdWVub3NfQWlyZXMnLA0KICAgICAgICAtMiAgPT4gJ0F0bGFudGljL1NvdXRoX0dlb3JnaWEnLA0KICAgICAgICAtMSAgPT4gJ0F0bGFudGljL0F6b3JlcycsDQogICAgICAgIDAgICA9PiAnVVRDJywNCiAgICAgICAgMSAgID0+ICdFdXJvcGUvQmVybGluJywNCiAgICAgICAgMiAgID0+ICdFdXJvcGUvU29maWEnLA0KICAgICAgICAzICAgPT4gJ0FmcmljYS9OYWlyb2JpJywNCiAgICAgICAgNCAgID0+ICdFdXJvcGUvTW9zY293JywNCiAgICAgICAgNSAgID0+ICdBc2lhL0thcmFjaGknLA0KICAgICAgICA2ICAgPT4gJ0FzaWEvRGhha2EnLA0KICAgICAgICA3ICAgPT4gJ0FzaWEvQmFuZ2tvaycsDQogICAgICAgIDggICA9PiAnQXNpYS9TaGFuZ2hhaScsDQogICAgICAgIDkgICA9PiAnQXNpYS9Ub2t5bycsDQogICAgICAgIDEwICA9PiAnUGFjaWZpYy9HdWFtJywNCiAgICAgICAgMTEgID0+ICdBdXN0cmFsaWEvU3lkbmV5JywNCiAgICAgICAgMTIgID0+ICdQYWNpZmljL0ZpamknLA0KICAgICAgICAxMyAgPT4gJ1BhY2lmaWMvVG9uZ2F0YXB1JywNCiAgICApOw0KICAgIGlmICghaXNzZXQoJHRpbWV6b25lc1skel0pKSB7DQogICAgICAgIHJldHVybiAnVVRDJzsNCiAgICB9DQoNCiAgICByZXR1cm4gJHRpbWV6b25lc1skel07DQp9DQoNCi8qKg0KICog5a+55pWw57uE5YaF55qE5a2X56ym5Liy6L+b6KGMaHRtbHNwZWNpYWxjaGFycy4NCiAqDQogKiBAcGFyYW0gYXJyYXkgJGFycmF5IOW+hei/h+a7pOWtl+espuS4sg0KICoNCiAqIEByZXR1cm4gYXJyYXkNCiAqDQogKiBAc2luY2UgMS40DQogKi8NCmZ1bmN0aW9uIGh0bWxzcGVjaWFsY2hhcnNfYXJyYXkoJGFycmF5KQ0Kew0KICAgICRuZXdBcnJheSA9IGFycmF5KCk7DQogICAgZm9yZWFjaCAoJGFycmF5IGFzICRrZXkgPT4gJHZhbHVlKSB7DQogICAgICAgICRuZXdLZXkgPSBodG1sc3BlY2lhbGNoYXJzKCRrZXkpOw0KICAgICAgICBpZiAoaXNfYXJyYXkoJHZhbHVlKSkgew0KICAgICAgICAgICAgJG5ld0FycmF5WyRuZXdLZXldID0gaHRtbHNwZWNpYWxjaGFyc19hcnJheSgkdmFsdWUpOw0KICAgICAgICB9IGVsc2VpZiAoaXNfc3RyaW5nKCR2YWx1ZSkpIHsNCiAgICAgICAgICAgICRuZXdBcnJheVskbmV3S2V5XSA9IGh0bWxzcGVjaWFsY2hhcnMoJHZhbHVlKTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIHJldHVybiAkbmV3QXJyYXk7DQp9DQoNCi8qKg0KICog6I635b6X5LiA5Liq5Y+q5ZCr5pWw5a2X5a2X5q+N5ZKMLee6v+eahHN0cmluZy4NCiAqDQogKiBAcGFyYW0gc3RyaW5nICRzIOW+hei/h+a7pOWtl+espuS4sg0KICoNCiAqIEByZXR1cm4gc3RyaW5nfHN0cmluZ1tdDQogKg0KICogQHNpbmNlIDEuNA0KICovDQpmdW5jdGlvbiBGaWx0ZXJDb3JyZWN0TmFtZSgkcykNCnsNCiAgICByZXR1cm4gcHJlZ19yZXBsYWNlKCd8W14wLTlhLXpBLVpfLy1dfCcsICcnLCAkcyk7DQp9DQoNCi8qKg0KICog56Gu6K6k5LiA5Liq5a+56LGh5piv5ZCm5Y+v6KKr6L2s5o2i5Li6c3RyaW5nLg0KICoNCiAqIEBwYXJhbSBvYmplY3QgJG9iag0KICoNCiAqIEByZXR1cm4gYm9vbA0KICoNCiAqIEBzaW5jZSAxLjQNCiAqLw0KZnVuY3Rpb24gQ2hlY2tDYW5CZVN0cmluZygkb2JqKQ0Kew0KICAgIC8vIEZ1Y2sgUEhQIDUuMiEhISENCiAgICAvLyByZXR1cm4gJG9iaiA9PT0gbnVsbCB8fCBpc19zY2FsYXIoJG9iaikgfHwgaXNfY2FsbGFibGUoWyRvYmosICdfX3RvU3RyaW5nJ10pOw0KICAgIGlmIChpc19vYmplY3QoJG9iaikgJiYgbWV0aG9kX2V4aXN0cygkb2JqLCAnX190b1N0cmluZycpKSB7DQogICAgICAgIHJldHVybiB0cnVlOw0KICAgIH0NCg0KICAgIGlmIChpc19udWxsKCRvYmopKSB7DQogICAgICAgIHJldHVybiB0cnVlOw0KICAgIH0NCg0KICAgIHJldHVybiBpc19zY2FsYXIoJG9iaik7DQp9DQoNCi8qKg0KICog5p6E6YCg5bimVG9rZW7nmoTlronlhahVUkwuDQogKg0KICogQHBhcmFtIHN0cmluZyAkdXJsDQogKiBAcGFyYW0gc3RyaW5nICRhcHBJZCDlupTnlKhJRO+8jOWPr+S7peeUn+aIkOS4gOS4quW6lOeUqOS4k+WxnueahFRva2VuDQogKg0KICogQHJldHVybiBzdHJpbmcNCiAqDQogKiBAc2luY2UgMS41LjINCiAqLw0KZnVuY3Rpb24gQnVpbGRTYWZlVVJMKCR1cmwsICRhcHBJZCA9ICcnKQ0Kew0KICAgIGdsb2JhbCAkemJwOw0KICAgIGlmIChzdHJwb3MoJHVybCwgJz8nKSAhPT0gZmFsc2UpIHsNCiAgICAgICAgJHVybCAuPSAnJmNzcmZUb2tlbj0nOw0KICAgIH0gZWxzZSB7DQogICAgICAgICR1cmwgLj0gJz9jc3JmVG9rZW49JzsNCiAgICB9DQogICAgaWYgKHN1YnN0cigkdXJsLCAwLCAxKSA9PT0gJy8nKSB7DQogICAgICAgICR1cmwgPSAkemJwLT5ob3N0IC4gc3Vic3RyKCR1cmwsIDEpOw0KICAgIH0NCiAgICAkdXJsID0gJHVybCAuICR6YnAtPkdldENTUkZUb2tlbigkYXBwSWQpOw0KDQogICAgcmV0dXJuICR1cmw7DQp9DQoNCi8qKg0KICog5p6E6YCgY21kLnBocOeahOiuv+mXrumTvuaOpS4NCiAqDQogKiBAcGFyYW0gc3RyaW5nICRwYXJhbXRlcnMgY21kLnBocOWPguaVsA0KICoNCiAqIEByZXR1cm4gYm9vbA0KICoNCiAqIEBzaW5jZSAxLjUuMg0KICovDQpmdW5jdGlvbiBCdWlsZFNhZmVDbWRVUkwoJHBhcmFtdGVycykNCnsNCiAgICByZXR1cm4gQnVpbGRTYWZlVVJMKCcvemJfc3lzdGVtL2NtZC5waHA/JyAuICRwYXJhbXRlcnMpOw0KfQ0KDQpmdW5jdGlvbiB1dGY4NG1iX2ZpbHRlcigmJHNxbCkNCnsNCiAgICAkc3FsID0gcHJlZ19yZXBsYWNlX2NhbGxiYWNrKCIvW1x4ezEwMDAwfS1ceHsxMEZGRkZ9XS91IiwgJ3V0Zjg0bWJfY29udmVydFRvVUNTNCcsICRzcWwpOw0KfQ0KDQpmdW5jdGlvbiB1dGY4NG1iX2ZpeEh0bWxTcGVjaWFsQ2hhcnMoKQ0Kew0KICAgIGdsb2JhbCAkYXJ0aWNsZTsNCiAgICAkYXJ0aWNsZS0+Q29udGVudCA9IHByZWdfcmVwbGFjZV9jYWxsYmFjaygiL1wmXCN4KFswLTlBLVpdezIsNn0pXDsvdSIsICd1dGY4NG1iX2NvbnZlcnRUb1VURjgnLCAkYXJ0aWNsZS0+Q29udGVudCk7DQogICAgJGFydGljbGUtPkludHJvID0gcHJlZ19yZXBsYWNlX2NhbGxiYWNrKCIvXCZcI3goWzAtOUEtWl17Miw2fSlcOy91IiwgJ3V0Zjg0bWJfY29udmVydFRvVVRGOCcsICRhcnRpY2xlLT5JbnRybyk7DQp9DQoNCmZ1bmN0aW9uIHV0Zjg0bWJfY29udmVydFRvVUNTNCgkbWF0Y2hlcykNCnsNCiAgICByZXR1cm4gc3ByaW50ZigiJiN4JXM7IiwgbHRyaW0oc3RydG91cHBlcihiaW4yaGV4KGljb252KCdVVEYtOCcsICdVQ1MtNCcsICRtYXRjaGVzWzBdKSkpLCAiMCIpKTsNCn0NCg0KZnVuY3Rpb24gdXRmODRtYl9jb252ZXJ0VG9VVEY4KCRtYXRjaGVzKQ0Kew0KICAgIHJldHVybiBpY29udignVUNTLTQnLCAnVVRGLTgnLCBoZXgyYmluKHN0cl9wYWQoJG1hdGNoZXNbMV0sIDgsICIwIiwgU1RSX1BBRF9MRUZUKSkpOw0KfQ0KDQovKioNCiAqIOmqjOivgVdlYiBUb2tlbuaYr+WQpuWQiOazlS4NCiAqDQogKiBAcGFyYW0gJHdlYlRva2VuU3RyaW5nDQogKiBAcGFyYW0gJHdlYlRva2VuSWQNCiAqIEBwYXJhbSBzdHJpbmcgJGtleQ0KICoNCiAqIEByZXR1cm4gYm9vbA0KICovDQpmdW5jdGlvbiBWZXJpZnlXZWJUb2tlbigkd2ViVG9rZW5TdHJpbmcsICR3ZWJUb2tlbklkLCAka2V5ID0gJycpDQp7DQogICAgZ2xvYmFsICR6YnA7DQogICAgJHRpbWUgPSBzdWJzdHIoJHdlYlRva2VuU3RyaW5nLCA2NCk7DQogICAgJHd0ID0gc3Vic3RyKCR3ZWJUb2tlblN0cmluZywgMCwgNjQpOw0KICAgICRhcmdzID0gYXJyYXkoKTsNCiAgICBmb3IgKCRpID0gMzsgJGkgPCBmdW5jX251bV9hcmdzKCk7ICRpKyspIHsNCiAgICAgICAgJGFyZ3NbXSA9IGZ1bmNfZ2V0X2FyZygkaSk7DQogICAgfQ0KICAgIGlmICgka2V5ID09ICcnKSB7DQogICAgICAgICRrZXkgPSAkemJwLT5ndWlkOw0KICAgIH0NCiAgICAkc2hhID0gaGFzaF9obWFjKCdzaGEyNTYnLCAkdGltZSAuICR3ZWJUb2tlbklkIC4gaW1wbG9kZSgkYXJncyksICRrZXkpOw0KICAgIGlmICgkd3QgPT09ICRzaGEpIHsNCiAgICAgICAgaWYgKCR0aW1lID4gdGltZSgpKSB7DQogICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIHJldHVybiBmYWxzZTsNCn0NCg0KLyoqDQogKiDliJvlu7pXZWIgVG9rZW4uDQogKg0KICogQHBhcmFtICR3ZWJUb2tlbklkDQogKiBAcGFyYW0gJHRpbWUNCiAqIEBwYXJhbSBzdHJpbmcgJGtleQ0KICoNCiAqIEByZXR1cm4gc3RyaW5nDQogKi8NCmZ1bmN0aW9uIENyZWF0ZVdlYlRva2VuKCR3ZWJUb2tlbklkLCAkdGltZSwgJGtleSA9ICcnKQ0Kew0KICAgIGdsb2JhbCAkemJwOw0KICAgICR0aW1lID0gKGludCkgJHRpbWU7DQogICAgJGFyZ3MgPSBhcnJheSgpOw0KICAgIGZvciAoJGkgPSAzOyAkaSA8IGZ1bmNfbnVtX2FyZ3MoKTsgJGkrKykgew0KICAgICAgICAkYXJnc1tdID0gZnVuY19nZXRfYXJnKCRpKTsNCiAgICB9DQogICAgaWYgKCRrZXkgPT0gJycpIHsNCiAgICAgICAgJGtleSA9ICR6YnAtPmd1aWQ7DQogICAgfQ0KDQogICAgcmV0dXJuIGhhc2hfaG1hYygnc2hhMjU2JywgJHRpbWUgLiAkd2ViVG9rZW5JZCAuIGltcGxvZGUoJGFyZ3MpLCAka2V5KSAuICR0aW1lOw0KfQ0KDQovKioNCiAqIOajgOa1i+adpea6kOaYr+WQpuWQiOazle+8jOi/meWMheaLrENTUkbmo4DmtYvvvIzlnKjlvIDlkK/lop7lvLrlronlhajmqKHlvI/ml7bliqDlhaXmnaXmupDmo4DmtYsuDQogKg0KICogQHRocm93cyBFeGNlcHRpb24NCiAqLw0KZnVuY3Rpb24gQ2hlY2tJc1JlZmVyZXJWYWxpZCgpDQp7DQogICAgZ2xvYmFsICR6YnA7DQogICAgJGZsYWcgPSBDaGVja0NTUkZUb2tlblZhbGlkKCk7DQogICAgaWYgKCRmbGFnICYmICR6YnAtPm9wdGlvblsnWkNfQURESVRJT05BTF9TRUNVUklUWSddKSB7DQogICAgICAgICRmbGFnID0gQ2hlY2tIVFRQUmVmZXJlclZhbGlkKCk7DQogICAgfQ0KDQogICAgaWYgKCEkZmxhZykgew0KICAgICAgICAkemJwLT5TaG93RXJyb3IoNSwgX19GSUxFX18sIF9fTElORV9fKTsNCiAgICAgICAgZXhpdDsNCiAgICB9DQp9DQoNCi8qKg0KICog6aqM6K+BQ1NSRiBUb2tlbuaYr+WQpuWQiOazlS4NCiAqDQogKiBAcGFyYW0gc3RyaW5nICRmaWVsZE5hbWUNCiAqIEBwYXJhbSBhcnJheSAgJG1ldGhvZHMNCiAqDQogKiBAcmV0dXJuIGJvb2wNCiAqLw0KZnVuY3Rpb24gQ2hlY2tDU1JGVG9rZW5WYWxpZCgkZmllbGROYW1lID0gJ2NzcmZUb2tlbicsICRtZXRob2RzID0gYXJyYXkoJ2dldCcsICdwb3N0JykpDQp7DQogICAgZ2xvYmFsICR6YnA7DQogICAgJGZsYWcgPSBmYWxzZTsNCiAgICBpZiAoaXNfc3RyaW5nKCRtZXRob2RzKSkgew0KICAgICAgICAkbWV0aG9kcyA9IGFycmF5KCRtZXRob2RzKTsNCiAgICB9DQogICAgZm9yZWFjaCAoJG1ldGhvZHMgYXMgJG1ldGhvZCkgew0KICAgICAgICBpZiAoJHpicC0+VmVyaWZ5Q1NSRlRva2VuKEdldFZhcnMoJGZpZWxkTmFtZSwgJG1ldGhvZCkpKSB7DQogICAgICAgICAgICAkZmxhZyA9IHRydWU7DQogICAgICAgICAgICBicmVhazsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIHJldHVybiAkZmxhZzsNCn0NCg0KLyoqDQogKiDmo4DmtYtIVFRQIFJlZmVyZXLmmK/lkKblkIjms5UuDQogKg0KICogQHJldHVybiBib29sDQogKi8NCmZ1bmN0aW9uIENoZWNrSFRUUFJlZmVyZXJWYWxpZCgpDQp7DQogICAgZ2xvYmFsICRibG9naG9zdDsNCiAgICAkcmVmZXJlciA9IEdldFZhcnMoJ0hUVFBfUkVGRVJFUicsICdTRVJWRVInKTsNCiAgICBpZiAodHJpbSgkcmVmZXJlcikgPT09ICcnKSB7DQogICAgICAgIHJldHVybiB0cnVlOw0KICAgIH0NCiAgICAkcyA9ICRibG9naG9zdDsNCiAgICAkcyA9IHN0cl9yZXBsYWNlKCc6ODAvJywgJy8nLCAkcyk7DQogICAgJHMgPSBzdHJfcmVwbGFjZSgnOjQ0My8nLCAnLycsICRzKTsNCiAgICBpZiAoc3RyaXBvcygkcmVmZXJlciwgJHMpID09PSBmYWxzZSkgew0KICAgICAgICByZXR1cm4gZmFsc2U7DQogICAgfQ0KDQogICAgcmV0dXJuIHRydWU7DQp9DQoNCi8qKg0KICog5riF6Zmk5LiA5Liy5Luj56CB5YaF5omA5pyJ55qEUEhQ5Luj56CBDQogKg0KICogQHBhcmFtIHN0cmluZyAkY29kZQ0KICoNCiAqIEByZXR1cm4gc3RyaW5nDQogKi8NCmZ1bmN0aW9uIFJlbW92ZVBIUENvZGUoJGNvZGUpDQp7DQogICAgLy8gUEhQIFN0YXJ0IHRhZ3M6IDw/cGhwIDw/IDw/PQ0KICAgIC8vIFBIUCA1IHN1cHBvcnRzOiA8JSA8c2NyaXB0IGxhbmd1YWdlPSJwaHAiPg0KICAgIC8vIERlcGVuZHMgb24gUEhQDQogICAgJGNvbnRpbnVlID0gdHJ1ZTsNCiAgICB3aGlsZSAoJGNvbnRpbnVlKSB7DQogICAgICAgICR0b2tlbnMgPSB0b2tlbl9nZXRfYWxsKCRjb2RlKTsNCiAgICAgICAgJGNvbnRpbnVlID0gZmFsc2U7DQogICAgICAgIGZvcmVhY2ggKCR0b2tlbnMgYXMgJHR0KSB7DQogICAgICAgICAgICAkbmFtZSA9IGlzX251bWVyaWMoJHR0WzBdKSA/IHRva2VuX25hbWUoJHR0WzBdKSA6ICcnOw0KICAgICAgICAgICAgaWYgKCRuYW1lID09PSAnVF9PUEVOX1RBRycgfHwgJG5hbWUgPT09ICdUX09QRU5fVEFHX1dJVEhfRUNITycgfHwgJG5hbWUgPT09ICdUX0NMT1NFX1RBRycpIHsNCiAgICAgICAgICAgICAgICAkY29kZSA9IHN0cl9yZXBsYWNlKCR0dFsxXSwgIiIsICRjb2RlKTsNCiAgICAgICAgICAgICAgICAkY29udGludWUgPSB0cnVlOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgfQ0KDQogICAgcmV0dXJuICRjb2RlOw0KfQ0KDQpmdW5jdGlvbiBHZXRJREFycmF5QnlMaXN0KCRhcnJheSwgJGtleW5hbWUgPSBudWxsKQ0Kew0KICAgICRpZHMgPSBhcnJheSgpOw0KICAgIGZvcmVhY2ggKCRhcnJheSBhcyAka2V5ID0+ICR2YWx1ZSkgew0KICAgICAgICBpZiAoJGtleW5hbWUgPT0gbnVsbCkgew0KICAgICAgICAgICAgJGlkc1tdID0gcmVzZXQoJHZhbHVlLT5HZXREYXRhKCkpOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgJGEgPSAkdmFsdWUtPkdldERhdGEoKTsNCiAgICAgICAgICAgICRpZHNbXSA9ICRhWyRrZXluYW1lXTsNCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIHJldHVybiAkaWRzOw0KfQ0KDQpmdW5jdGlvbiBHZXRCYWNrZW5kQ1NQSGVhZGVyKCkNCnsNCiAgICAkZGVmYXVsdENTUCA9IGFycmF5KA0KICAgICAgICAnZGVmYXVsdC1zcmMnID0+ICInc2VsZicgZGF0YTogYmxvYjoiLA0KICAgICAgICAnaW1nLXNyYycgICAgID0+ICIqIGRhdGE6IGJsb2I6IiwNCiAgICAgICAgJ21lZGlhLXNyYycgICA9PiAiKiBkYXRhOiBibG9iOiIsDQogICAgICAgICdzY3JpcHQtc3JjJyAgPT4gIidzZWxmJyAndW5zYWZlLWlubGluZScgJ3Vuc2FmZS1ldmFsJyIsDQogICAgICAgICdzdHlsZS1zcmMnICAgPT4gIidzZWxmJyAndW5zYWZlLWlubGluZSciLA0KICAgICk7DQogICAgZm9yZWFjaCAoJEdMT0JBTFNbJ2hvb2tzJ11bJ0ZpbHRlcl9QbHVnaW5fQ1NQX0JhY2tlbmQnXSBhcyAkZnBuYW1lID0+ICYkZnBzaWduYWwpIHsNCiAgICAgICAgJGZwcmV0dXJuID0gJGZwbmFtZSgkZGVmYXVsdENTUCk7DQogICAgfQ0KICAgICRyZXQgPSBhcnJheSgpOw0KICAgIGZvcmVhY2ggKCRkZWZhdWx0Q1NQIGFzICRrZXkgPT4gJHZhbHVlKSB7DQogICAgICAgICRyZXRbXSA9ICRrZXkgLiAnICcgLiAkdmFsdWU7DQogICAgfQ0KDQogICAgcmV0dXJuIGltcGxvZGUoJzsgJywgJHJldCk7DQp9DQoNCi8qKg0KICog5qOA5p+l6YeN5aSN5Yqg6L2955qELg0KICovDQpmdW5jdGlvbiBDaGVja0luY2x1ZGVkRmlsZXMoJGZpbGUpDQp7DQogICAgJGEgPSBnZXRfaW5jbHVkZWRfZmlsZXMoKTsNCiAgICAkZmlsZSA9IHN0cl9yZXBsYWNlKCdcXCcsICcvJywgJGZpbGUpOw0KICAgIGZvcmVhY2ggKCRhIGFzICRrZXkgPT4gJHZhbHVlKSB7DQogICAgICAgICRhWyRrZXldID0gdHJpbShzdHJfcmVwbGFjZSgnXFwnLCAnLycsICR2YWx1ZSkpOw0KICAgIH0NCg0KICAgIHJldHVybiBpbl9hcnJheSh0cmltKCRmaWxlKSwgJGEpOw0KfQ0K</file>
	<file name='zb_system\function\c_system_version.php' crc32='E91E105D'  dt:dt='bin.base64'>PD9waHANCg0KaWYgKCFkZWZpbmVkKCdaQlBfUEFUSCcpKSB7DQogICAgZXhpdCgnQWNjZXNzIGRlbmllZCcpOw0KfQ0KLyoNCiAqIOWumuS5ieeJiOacrOWPtw0KDQrov5nmmK8xLjXlj5bmtojnmoTmlbDnu4TvvIzooqvlronmjpLliLDlupTnlKjkuK3lv4PlrqLmiLfnq6/nmoRpbmNsdWRlLnBocOaWh+S7tumHjOOAgg0KI+WumuS5ieeJiOacrOWPt+WIlw0KJHpicHZlcnM9YXJyYXkoKTsNCiR6YnB2ZXJzWycxMzA3MDcnXT0nMS4wIEJldGEgQnVpbGQgMTMwNzA3JzsNCiR6YnB2ZXJzWycxMzExMTEnXT0nMS4wIEJldGEyIEJ1aWxkIDEzMTExMSc7DQokemJwdmVyc1snMTMxMjIxJ109JzEuMSBUYWljaGkgQnVpbGQgMTMxMjIxJzsNCiR6YnB2ZXJzWycxNDAyMjAnXT0nMS4yIEhpcHBvIEJ1aWxkIDE0MDIyMCc7DQokemJwdmVyc1snMTQwNjE0J109JzEuMyBXb25jZSBCdWlsZCAxNDA2MTQnOw0KJHpicHZlcnNbJzE1MDEwMSddPScxLjQgRGVlcGx1ZSBCdWlsZCAxNTAxMDEnOw0KJHpicHZlcnNbJzE1MTYyNiddPScxLjUgWmVybyBCdWlsZCAxNTE2MjYnOw0KDQogKi8NCmRlZmluZSgnWkNfVkVSU0lPTl9NQUpPUicsICcxJyk7DQpkZWZpbmUoJ1pDX1ZFUlNJT05fTUlOT1InLCAnNicpOw0KZGVmaW5lKCdaQ19WRVJTSU9OX0JVSUxEJywgJzQnKTsNCmRlZmluZSgnWkNfVkVSU0lPTl9DT01NSVQnLCAnMjEzMCcpOw0KZGVmaW5lKCdaQ19WRVJTSU9OX0NPREVOQU1FJywgJ1ZhbHlyaWEnKTsNCmRlZmluZSgnWkNfVkVSU0lPTicsIFpDX1ZFUlNJT05fTUFKT1IgLiAnLicgLiBaQ19WRVJTSU9OX01JTk9SIC4gJy4nIC4gWkNfVkVSU0lPTl9CVUlMRCAuICcuJyAuIFpDX1ZFUlNJT05fQ09NTUlUKTsNCmRlZmluZSgnWkNfVkVSU0lPTl9ESVNQTEFZJywgWkNfVkVSU0lPTl9NQUpPUiAuICcuJyAuIFpDX1ZFUlNJT05fTUlOT1IgLiAnLicgLiBaQ19WRVJTSU9OX0JVSUxEIC4gJyAnIC4gWkNfVkVSU0lPTl9DT0RFTkFNRSk7DQpkZWZpbmUoJ1pDX1ZFUlNJT05fRlVMTCcsIFpDX1ZFUlNJT04gLiAnICgnIC4gWkNfVkVSU0lPTl9DT0RFTkFNRSAuICcpJyk7DQpkZWZpbmUoJ1pDX0JMT0dfQ09NTUlUJywgWkNfVkVSU0lPTl9DT01NSVQpOyAvLyDkuLrlhpnlhaXns7vnu5/phY3nva7nu5/kuIDpo47moLwNCiRHTE9CQUxTWydibG9ndmVyc2lvbiddID0gWkNfVkVSU0lPTl9NQUpPUiAuIFpDX1ZFUlNJT05fTUlOT1IgLiBaQ19WRVJTSU9OX0NPTU1JVDsNCmRlZmluZSgnWkNfQkxPR19WRVJTSU9OJywgWkNfVkVSU0lPTl9ESVNQTEFZIC4gJyBCdWlsZCAnIC4gJEdMT0JBTFNbJ2Jsb2d2ZXJzaW9uJ10pOw0K</file>
</files>